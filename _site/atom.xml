<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Delly's Publisher</title>
 <link href="http://blog.dellyqiao.com/" rel="self"/>
 <link href="http://blog.dellyqiao.com"/>
 <updated>2015-07-20T07:00:17+08:00</updated>
 <id>http://blog.dellyqiao.com</id>
 <author>
   <name>Delly Qiao</name>
   <email>qiaodeli1@gmail.com</email>
 </author>

 
 <entry>
   <title>WebSphere Application Server Performance Tunning</title>
   <link href="http://blog.dellyqiao.com/middleware/2015/05/20/websphere-application-server-performance-tunning"/>
   <updated>2015-05-20T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2015/05/20/websphere-application-server-performance-tunning</id>
   <content type="html">
&lt;p&gt;本文主要根据IBM红皮书的介绍和自己的理解，做一些性能调优的总结。&lt;/p&gt;

&lt;p&gt;应用程序的结构，基础设施，和这个系统需要承受的负载量是影响到性能参数配置的三个因素。不可能有任何一个固定的值是适用于所有系统的。我们需要系统容纳能力的规划，压力测试，收集信息，最后分析结果来确定对我们自己的系统来说最佳的配置。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;要进行性能调优，我们需要有一套跟自己的生产环境环境相同的性能测试环境。为了让测试结果真的有意义，我们要确保测试环境中的软件和硬件跟生产环境上的完全相同。&lt;/p&gt;

&lt;p&gt;为了让我们的测试成功，我们需要生成符合以下特征的负载：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可计量的：使用可以量化的计量单位，比如吞吐量和响应时间。&lt;/li&gt;
  &lt;li&gt;可重现的：确保多次同样的测试可以重现同样的结果。每次只更改一个参数，然后其他条件不变，这样就可以知道那个参数对系统真实的影响。&lt;/li&gt;
  &lt;li&gt;静态的：要确定是否一样的测试不论执行多久，都能得到一样的效果。&lt;/li&gt;
  &lt;li&gt;典型性：确保生成的负载可以真实地代表正常操作一个系统的压力。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要想确定性能的目标，首先我们必须清楚地理解我们系统的架构和需求。查看架构文档，用例图，以及功能性和非功能性的各种需求，从而确定对自己的系统来说，性能好的标准是什么。&lt;/p&gt;

&lt;p&gt;确定一个好坏性能的标准。没有一个标准或目标，我们无法确定性能调整是否成功。要避免使用那些非指向性的标准，比如尽可能地调试为性能“最好”的状态。时刻记住如果没有一个标准线，性能测试可能无穷无尽，因为每次测试都有可能发现一个新的瓶颈，不同的瓶颈又有不同的解决方案，这样的话到最后我们无法确定我们的性能调试到底是成功了还是失败了。&lt;/p&gt;

&lt;p&gt;不要尝试在有真实负载的生产环境上做性能调试，这么做的话，服务器有很大几率会做资源回收以使新的参数生肖，这些回收进程可能引发宕机时间。&lt;/p&gt;

&lt;h2 id=&quot;websphere&quot;&gt;使用队列类推法去调试WebSphere资源池&lt;/h2&gt;

&lt;p&gt;WAS的功能非常类似于一个由互通的代表各种各样不同资源的队列组成的队列网络。这些资源池包括网络，Web服务器，Web容器，EJB容器，ORB（Object Request Broker），数据源，还可能会有连接到自定义的后端系统的连接管理器。每种资源都代表着等待使用那些资源的一个请求的队列，这些队列都是容易受负载影响的资源，也就是说，平均响应速度取决于客户机请求的数量。这样的话，性能调优实际上就是对这些队列的调优。&lt;/p&gt;

&lt;p&gt;举例来说，某个应用程序包含servlet和需要访问数据库的EJB beans。每个部分都被放置在了适当的WebSphere组件上（例如servlet在Web容器里），在确定的时间段内，每个组件可以处理确定的数量的请求。&lt;/p&gt;

&lt;p&gt;客户机的请求会通过Web服务器，穿过WebSphere的几个组件之后WebSphere组件会给客户机提供响应。下面图解了这个应用程序通过WebSphere组件处理客户请求的路径，我们把这个路径类比成一些连接在一起的互通的管道。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中管道的宽度代表了在给定的时间里可以处理的请求数量。管道的长度代表了从收到请求到提供响应需要的处理事件。&lt;/p&gt;

&lt;p&gt;上图展示了在一个确定的时间内，一台Web服务器可以处理50个请求，一个Web容器可以处理18个请求，这就意味着在最大负载的情况下，请求会在Web服务器上排队以等待空闲的Web容器。EJB容器可以处理9个请求，因此一半的Web容器的请求需要排队等待可用的ORB线程池。而数据库看起来有足够的处理能力，因此EJB容器里的请求不需要等待数据库连接。&lt;/p&gt;

&lt;p&gt;假设我们的WAS系统中有足够的CPU和内存资源，这时，我们可以增加ORB资源池的大小来最大化地利用数据库连接。由于Web服务器在一个确定的时间内可以处理50个请求，我们也可以增加Web容器的线程池来获得更多的Web容器线程从而跟ORB的增长相匹配。&lt;/p&gt;

&lt;p&gt;然而，如何确定线程和数据库连接的最大值呢？如果我们的系统采用队列处理的方式，要想获得最佳的性能，我们到底应该从数据层开始调整呢还是应该从客户端开始调整？下面的章节提供了答案。&lt;/p&gt;

&lt;h3 id=&quot;upstream-queuing-&quot;&gt;Upstream queuing (上游队列）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;资源池调优的黄金法则是：尽量减少在WAS队列中等待的请求数，根据Web服务器前等待的资源来调节资源池。这样的配置使得只有准备好被处理的那些请求能够进入相应的队列。想要达到这种配置，需要让上游的队列（靠近客户端）配置得稍微大一些，二下游的队列（远离客户端的）要逐渐的变小。这样的方式叫做“Upstream queuing”。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下图13-2展示了这种配置。当200个客户请求到达Web服务器时，125个请求依然在网络中等待，因为Web服务器设置为只能同时处理75个客户请求。当这75个请求从Web服务器传送到Web容器的时候，25个请求被留在Web服务器中等待，50个请求进入到Web容器中被处理。当25个用户请求到达最终的目的地——数据库服务器时，这个处理的过程才会出现进展。由于在每个节点的上游都有一些请求等待进入被处理，所以这个系统中的每个组件都没有处于闲置状态等待请求进入。&lt;strong&gt;大量的请求在WAS之外的网络中进行等待，这样的配置增强了系统的稳定性，因为没有任何一个组件是过载的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于我们的系统不可能有无限的物理资源，所以不要使用等体积的队列。如果你有无限的资源，你可以调整你的系统使得每个Web服务器的请求都能得到一个Web容器的线程去处理，每个线程都能得到可用的数据库连接。然而在现实世界中，这样的配置是不可能出现的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;另一个精确调节资源池的重要法则是必须对我们的基础设施、应用程序架构和需求有一个清晰的认识。&lt;/strong&gt;不同的系统会有不一样的访问和使用的方式。&lt;/p&gt;

&lt;p&gt;比如说，在多数情况下，只有少部分的请求需要不断向下通过各个队列进行处理。然而，在一个静态页面居多的网站，大量的请求都被填充到Web服务器，不必进入Web容器进行处理。在这种情况下，Web服务器队列可以明显地大于Web容器队列。在上个例子中，Web服务器队列设置为75，而不是接近应用程序的最大并发数。当不同的组件处理请求的时间不同时，我们也需要做一下累死的调整。当静态内容的比重减少时，Web服务器队列跟和应用服务器队列之间的巨大的空隙将有可能造成站点整体性能的下降。所以说，在进行任何性能调优之前，一定要理解基础设施、应用程序架构和需求。&lt;/p&gt;

&lt;p&gt;另一个例子，在一个应用程序中，90%的时间都会用来处理复杂的servlet，10%的时间会用来进行快速的JDBC查询，这个10%是一个平均值，servlet可能会在任何时候访问数据连接。这时，数据库连接池就可以明显小雨Web容器的队列。反过来说，如果处理servlet的大部分时间都花费在复杂的数据库查询上了，可以考虑同时增加Web容器线程池和数据连接池的数量。永远记得监控WAS服务器和数据库服务器的CPU和内存使用率，确保服务器没有过载。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下面的章节我们介绍如何调整每个资源池，由最下游的资源池开始，向上介绍。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;数据源调试&lt;/h3&gt;

&lt;p&gt;调整数据源队列时，要考虑下面的设定：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;连接池的大小&lt;/li&gt;
  &lt;li&gt;Prepared Statement Cache size&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;连接池大小&lt;/h4&gt;

&lt;p&gt;访问任何数据库的时候，数据库连接的初始化都是一个非常昂贵的操作。WAS提供了连接池和连接重用的功能。连接池使应用程序和使用数据库的企业Bean可以进行直接的JDBC调用。&lt;/p&gt;

&lt;p&gt;IBM Tivoli Performance Viewr可以帮助我们确定连接池的最大值。模拟正常情况下的客户访问量，使用固定的迭代测试次数，使用标准的配置。观察JDBC Connection Pool模块下的Pool Size，Percent Used，和Concurrent Waiters counters这些项目。最合适的数值应该是比监控到的数值稍大一点（The optimal value for the pool size is the value that reduces the values for these monitored counters.个人理解，意思就是说最合适的值就是一个可以减掉监控到的那些数值的值，也就是说要稍大一点）如果Percent Used使用的百分比的数值始终很低，请考虑减少连接池中的连接数。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Windows Log transfer script</title>
   <link href="http://blog.dellyqiao.com/server/2015/04/21/windows-log-transfer-script"/>
   <updated>2015-04-21T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/server/2015/04/21/windows-log-transfer-script</id>
   <content type="html">
&lt;p&gt;4月21日更新：&lt;/p&gt;

&lt;p&gt;本文分享一个Windows服务器日志传输的脚本。作为示例，这个脚本可以被修改为在Windows服务器之间传输任何文件的一个应用。下面具体描述一下我的环境，需求和脚本的实现方法。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section&quot;&gt;需求&lt;/h3&gt;

&lt;p&gt;我有三台Windows服务器在运行Java应用，每台服务器上都有多个JVM，每个JVM的日志的路径也不同。而四台服务器是作为水平集群的，每台服务器上的日志路径和命名方式也都是一样的。&lt;/p&gt;

&lt;p&gt;经常性的需要把某个特定的JVM在四台机器上的日志都取出来放到另外的一台服务器上，所以现在写个脚本实现这个任务。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;实现过程&lt;/h3&gt;

&lt;p&gt;首先写一个Map硬盘盘符的脚本 map_drive.bat.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net use H: /delete
net use I: /delete
net use J: /delete

net use H: \\192.168.1.65\logs$ password /user:username
net use I: \\192.168.1.66\logs$ password /user:username
net use J: \\192.168.1.67\logs$ password /user:username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后写一下获取日志的脚本 getlog.bat.&lt;/p&gt;

&lt;p&gt;日志的格式也需要总结一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;每台服务器上的日志路径是这样的：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&amp;lt;logdrive&amp;gt;\logs\WebSphere\sample1-server / sample2-server / sample3-server&lt;/p&gt;

      &lt;p&gt;&amp;lt;logdrive&amp;gt;\log\Websphere\sample4-server&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java日志的命名格式是这样：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;SystemOut.log SystemErr.log&lt;/p&gt;

      &lt;p&gt;SystemOut_15.03.30_10.26.32.log SystemErr_15.03.30_10.26.32.log &lt;/p&gt;

      &lt;p&gt;//15.03.30代表15年3月30日，10.26.32代表10点26分32秒生成的日志&lt;/p&gt;

      &lt;p&gt;SystemOut_15.03.30_10.26.32.log.gz SystemErr_15.03.30_10.26.32.log.gz&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;日志轮转机制的设置是，如果日志大于50MB，就会生成一个新的日志文件。所以，当需要获得某一天的日志文件的时候，需要获取文件名为&lt;code&gt;SystemOut_YY.MM.DD*&lt;/code&gt;和&lt;code&gt;SystemErr_YY.MM.DD*&lt;/code&gt;的所有文件，如果需要获取今天的日志，还需要额外拿一下文件名为&lt;code&gt;SystemOut.log SystemErr.log&lt;/code&gt;的这两个文件。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是&lt;code&gt;getlogs.bat&lt;/code&gt;的具体内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo on
call map_drive.bat

set /p appname=&quot;Input APP Server Name (sample1/sample2/sample3/sample4):&quot;
##获取应用服务器名

set logpath=%appname%-server
##拼接日志路径字符串

set destpath=logs\WebSphere\
##设置存有日志的远程主机的日志路径

if %appname%==sample4 (
set destpath=log\websphere\
set logpath=iPOSAppSrv
)
##为sample4设置例外

set localpath=D:\SFTP_SITE\AIA_Thailand\App_log\
##设置当前主机，日志将要存放的目标路径

forfiles /p %localpath%%logpath% /s /m *.* /c &quot;cmd /c del @path&quot;
##清理临时目录


set /p time=&quot;Input date(eg:YY.MM.DD / today): &quot;
##获取想要得到的日志的日期

if %time%==today (
##如果需要的是今天的日志，那就得到今天的日期并且拼接成SystemOut_YY.MM.DD*格式的字符串，然后直接把SystemOut.log和SystemErr.log传输过来

set sysout=SystemOut_%date:~12,2%.%date:~4,2%.%date:~7,2%*
set syserr=SystemErr_%date:~12,2%.%date:~4,2%.%date:~7,2%*

copy H:\%destpath%%logpath%\SystemErr.log %localpath%%logpath%\app10
copy I:\%destpath%%logpath%\SystemErr.log %localpath%%logpath%\app11
copy J:\%destpath%%logpath%\SystemErr.log %localpath%%logpath%\app12

copy H:\%destpath%%logpath%\SystemOut.log %localpath%%logpath%\app10
copy I:\%destpath%%logpath%\SystemOut.log %localpath%%logpath%\app11
copy J:\%destpath%%logpath%\SystemOut.log %localpath%%logpath%\app12

set time=%date:~12,2%.%date:~4,2%.%date:~7,2%
##把SystemOut.log和SystemErr.log传输完之后，把time变量设成日期，后面做压缩包的时候会用到。

) else (
##如果需要的不是今天的日志，则直接根据用户输入拼接日志名字符串
set sysout=SystemOut_%time%*
set syserr=SystemErr_%time%*
)

copy H:\%destpath%%logpath%\%syserr% %localpath%%logpath%\app10
copy I:\%destpath%%logpath%\%syserr% %localpath%%logpath%\app11
copy J:\%destpath%%logpath%\%syserr% %localpath%%logpath%\app12

copy H:\%destpath%%logpath%\%sysout% %localpath%%logpath%\app10
copy I:\%destpath%%logpath%\%sysout% %localpath%%logpath%\app11
copy J:\%destpath%%logpath%\%sysout% %localpath%%logpath%\app12
##传输日志


7z a %localpath%%logpath%_%time%.zip %localpath%%logpath%\
##压缩整个文件夹

forfiles /p %localpath%%logpath% /s /m *.* /c &quot;cmd /c del @path&quot;
##再次清理临时文件夹

explorer.exe %localpath%
##打开放置压缩包的目录方便操作

exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行getlog.bat就可以获取日志了。期间需要输入想要获取的日志的JVM名，然后输入日期，即可获得一个打包好的日志文件包了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>IBM WAS 6.1 Web container problem determination——文档翻译（更新中）</title>
   <link href="http://blog.dellyqiao.com/middleware/translation/2015/04/14/ibm-was-61-web-container-problem-determination"/>
   <updated>2015-04-14T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/translation/2015/04/14/ibm-was-61-web-container-problem-determination</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;声明&lt;/h3&gt;

&lt;p&gt;本文为IBM官方WebSphere问题诊断系列文档翻译，旨在为自己增加知识和方便国人查看。本翻译遵循实用原则，原文过于拖沓啰嗦的地方就略过。有兴趣的可以继续阅读，没兴趣的请路过。欢迎留言吐槽，谢谢。&lt;/p&gt;

&lt;p&gt;本文为翻译plugin问题诊断文档：redp4045-WebSphere Application Server V6 Web Server Plug-in Problem Determination.pdf，次文档可以从这里下载：&lt;a href=&quot;http://dellyqiao.qiniudn.com/2015/04/14/redp4309-WebSphere Application Server V6.1Web container problem determination.pdf&quot;&gt;文档下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面进入正题：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;websphere-application-server-v61-web-container-problem-determination&quot;&gt;WebSphere Application Server V6.1: Web container problem determination&lt;/h2&gt;

&lt;p&gt;Web组件的运行时环境叫做Web容器（Web Container）。当用户无法正常访问系统时，可能就是Web Container的问题。&lt;/p&gt;

&lt;p&gt;对于Web container来说，可能出现的问题有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户无法访问Web组件&lt;/li&gt;
  &lt;li&gt;运行Web组件的时候反应不正常&lt;/li&gt;
  &lt;li&gt;启动Web组件时报错&lt;/li&gt;
  &lt;li&gt;JSP进行编译的时候有错&lt;/li&gt;
  &lt;li&gt;运行Web组件时抛出错误或异常&lt;/li&gt;
  &lt;li&gt;收到以SRVE（Web container）、JSPG（JSP）、JSFG（JSF页面）开头的信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文教你如何在分布式系统和IBM i5/OS系统上诊断IBM WAS V6.1的Web container的问题。&lt;/p&gt;

&lt;h3 id=&quot;web&quot;&gt;Web容器介绍&lt;/h3&gt;

&lt;p&gt;Web容器是运行Web应用的运行时环境，它处理servlet，JSP文件，和其他种类的服务器端组件。每个应用程序服务器运行时都有有一个单独的逻辑Web容器，你可以修改它，但是不能创建或删除。&lt;/p&gt;

&lt;h3 id=&quot;web-1&quot;&gt;Web容器概述&lt;/h3&gt;

&lt;p&gt;Figure 1图解了Web容器，以及它在应用服务器中的位置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/14/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Web容器提供：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Web容器传输链（transport chains）&lt;/p&gt;

    &lt;p&gt;Web容器inbound传输链用来处理请求。它由下列组件组成：用来提供容器和网络之间的链接的TCP inbound channel，用来为HTTP 1.0和1.1提供服务的HTTP inbound channel，还有用来把servlet和JSP请求发送到Web容器的Web container channel。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Servlet处理进程&lt;/p&gt;

    &lt;p&gt;当Web容器处理servlet请求时，Web容器会创建请求对象和响应对象，然后调用servlet的service方法。当时机合适，Web容器也会调用servlet的destroy方法，之后JVM会执行垃圾回收（GC）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTML和其他静态内容的处理进程&lt;/p&gt;

    &lt;p&gt;当Web容器接受到HTML或其他静态内容请求时，Web容器inbound传输链会提供服务。然而，在生产环境下，使用外部Web服务器并且使用plugin作为接口在大多数情况下是更为合适的选择。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;会话管理&lt;/p&gt;

    &lt;p&gt;Web容器支持API中定义的javax.servlet.http.HttpSession接口规范。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;web-2&quot;&gt;Web应用程序&lt;/h3&gt;

&lt;p&gt;Servlet和JSP文件就是所说的Web组件。静态内容文件（比如HTML页面，图片，XML文件）在进行应用封装创建Web模块的时候会跟Web组件捆绑在一起。Web模块是一种遵循指定的格式规范去组织和打包的，可以被单独拿出来部署和使用的一个单元，它会被打包成Web archive（WAR）文件。J2EE Web模块符合Java servlet规范。&lt;/p&gt;

&lt;p&gt;Web模块最顶层的目录是应用程序的&lt;code&gt;document root&lt;/code&gt;，也就是放置JSP页面和静态Web资源的位置。document root有个名为&lt;code&gt;/WEB-INF/&lt;/code&gt;的子目录，其中放置Web应用部署描述符（web.xml）和Web模块需要用到的服务器端的类文件。如Figure 2：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/14/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-3&quot;&gt;确认Web容器的问题类型&lt;/h3&gt;

&lt;p&gt;Web容器出问题的时候会给用户返回很多种类的标识符，比如HTTP 404错误，500错误，或者页面上显示不正确的信息，例如由HTTP错误引发的一个错误页面，或者页面上显示的内容不正确，或者页面显示不完整。&lt;/p&gt;

&lt;p&gt;当发生HTTP错误的时候，Web浏览器会显示一个包含错误码的错误页面。如果在Web模块中自定义了错误页面，那你需要检查Web服务器日志以确定真实的HTTP错误码是什么，因为那些错误码很可能并不会显示在你自定的页面上。&lt;/p&gt;

&lt;h4 id=&quot;web-4&quot;&gt;收集分析Web服务器日志&lt;/h4&gt;

&lt;p&gt;从Web服务器上手机access日志，然后搜索日志中的404或500错误。下面是一些IHS（IBM HTTP Server）的例子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;access.log日志：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  127.0.0.1 - - [28/Mar/2007:19:52:31 -0400] &quot;GET url HTTP/1.1&quot; 404 304 
  127.0.0.1 - - [28/Mar/2007:20:03:48 -0400] &quot;GET url HTTP/1.1&quot;500 5348
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;重点注意一下跟出问题的URL相关的错误码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果正常情况下从Web服务器应该可以访问某个URL（这个请求需要到达应用服务器进行处理），然后出现了类似这样的信息：从xxx地方无法找到指定的文件。这时需要查看error日志，找一下文件无法访问的日志：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  - [Wed Mar 28 19:52:31 2007] [error] [client 127.0.0.1] File does not exist: file_location
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-404&quot;&gt;HTTP 404错误&lt;/h3&gt;

&lt;p&gt;HTTP 404错误有多重成因，下面是一些例子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;外部因素，比如Web服务器有问题&lt;/li&gt;
  &lt;li&gt;配置问题，比如plugin或者virtual host配置不正确&lt;/li&gt;
  &lt;li&gt;运行时环境的问题，比如应用或应用服务器没有启动&lt;/li&gt;
  &lt;li&gt;用户或应用问题，比如输错了URL&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;验证系统的完整性&lt;/h4&gt;

&lt;p&gt;如果用户得到404错误并且你比较了解出问题的应用程序，那么首先应该检查一下系统的完整性，需要检查的组件包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web服务器&lt;/li&gt;
  &lt;li&gt;应用服务器&lt;/li&gt;
  &lt;li&gt;应用程序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果这些组件都工作正常，或者你不是很清楚哪台应用服务或哪个应用受到了影响，请继续往下看。&lt;/p&gt;

&lt;h5 id=&quot;web-5&quot;&gt;&lt;strong&gt;&lt;em&gt;确认Web服务器是否正常响应&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;如何检查？取决于Web服务器的种类和它的配置。&lt;/p&gt;

&lt;p&gt;如果是IHS，简捷的方法是从浏览器访问对应的URL：http://server_name。如果可以看到欢迎页面，说明Web服务器可以工作。如果无法显示，出现了“page cannot be displayed”这类的信息，说明问题可能处在Web服务器。&lt;/p&gt;

&lt;h5 id=&quot;web-6&quot;&gt;&lt;strong&gt;&lt;em&gt;解决Web服务器问题&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;参阅另一篇文章：&lt;a href=&quot;http://blog.dellyqiao.com/middleware/translation/2015/04/11/web-server-plug-in-/&quot;&gt;http://blog.dellyqiao.com/middleware/translation/2015/04/11/web-server-plug-in-/&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;&lt;strong&gt;&lt;em&gt;确认应用服务器是否启动&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;确认应用程序是否部署在了服务器或集群上&lt;/li&gt;
  &lt;li&gt;确认应用服务器的状态&lt;/li&gt;
  &lt;li&gt;如果没启动，尝试启动一下&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果你不知道这些步骤怎么做，查看这里：&lt;a href=&quot;#page52&quot;&gt;“Managing servers and applications”&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;&lt;strong&gt;&lt;em&gt;确认应用程序是否启动&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;从管理控制台查看，Applications → Enterprise Applications。&lt;/p&gt;

&lt;p&gt;如果应用状态是启动，说明应用在运行，但是它无法检测应用在启动过程中是否有任何错误。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;收集诊断相关的数据&lt;/h4&gt;

&lt;p&gt;如果你无法看到错误的类型或者无法得知出问题的URL信息，你需要手机以下数据：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户浏览器显示的错误以及失败的URL&lt;/li&gt;
  &lt;li&gt;应用服务器的日志（如果应用部署在集群上，需要手机每台集群成员的日志）&lt;/li&gt;
  &lt;li&gt;Web服务器access和error日志&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TRCTCPAPP trace（i5/OS）&lt;/p&gt;

    &lt;p&gt;i5/OS系统上的HTTP服务器是集成到系统里的，还有一种额外的跟踪日志可以提供有用的信息。查看这里：&lt;a href=&quot;#page47&quot;&gt;“Trace Web server requests to WebSphere (i5/OS)”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-5&quot;&gt;分析数据&lt;/h4&gt;

&lt;p&gt;从诊断数据里能得到的信息主要是这两种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;出问题的URL&lt;/li&gt;
  &lt;li&gt;问题出在哪儿（Web服务器，plugin，应用服务器）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以以下面的顺序做问题诊断：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Web浏览器显示的错误信息&lt;/p&gt;

    &lt;p&gt;这些信息可以帮助你得知问题的类型和出问题的URL。这些信息有可能已经足够解决你的问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SystemOut日志&lt;/p&gt;

    &lt;p&gt;如果是Web容器出问题，SystemOut日志是最能提供有用信息的文件。日志中的信息也有可能会显示到浏览器中，取决于应用程序如何处理错误。如果这个JVM日志中没有任何错误信息，多数可能是因为请求没有到达应用服务器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TRCTCPAPP trace（只针对i5/OS系统）&lt;/p&gt;

    &lt;p&gt;这个trace可以帮你i安测问题是否出在plugin上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web服务器日志&lt;/p&gt;

    &lt;p&gt;如果没有发现其他的错误迹象，查看一下Web服务器日志，卡伊找到错误的类型（404、500）和错问题的URL。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-6&quot;&gt;分析浏览器输出的错误信息&lt;/h4&gt;

&lt;p&gt;一般来说，404错误会伴随有一些描述性的问题说明信息一起出现，如果用户报告的问题属于下面列表中的任何一条，我们就可以直接定位问题原因：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The page cannot be displayed&lt;/li&gt;
  &lt;li&gt;JSP error or JSF error&lt;/li&gt;
  &lt;li&gt;Failed to find resource&lt;/li&gt;
  &lt;li&gt;File not found&lt;/li&gt;
  &lt;li&gt;WebGroup/virtual host not defined&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;the-page-cannot-be-displayed-or-found&quot;&gt;&lt;strong&gt;&lt;em&gt;The page cannot be displayed or found&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Figure 3 展示了一个典型的例子。这种错误页面的显示效果是多种多样的，取决于浏览器。比如，有的浏览器会显示“The page cannot be found.”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/14/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这种情况的原因可能是：输入的URL错误，也可能是需要访问页面的组件不可用（比如Web服务器，应用服务器）。特别注意发生错误时候浏览器地址栏上的URL。&lt;/p&gt;

&lt;p&gt;如果访问出错的是JSP或servlet，查看&lt;a href=&quot;#page16&quot;&gt;“Page cannot be displayed or JSP/JSF error”&lt;/a&gt;。&lt;/p&gt;

&lt;h5 id=&quot;jspjsf&quot;&gt;&lt;strong&gt;&lt;em&gt;JSP和JSF错误&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;JSP和JSF错误通常伴随着从应用服务器发过来的跟问题检测相关的信息，Figure 4展示的就是一个带着”JSPG0036E: Failed to find resource”信息的页面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/14/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 5展示了一个带有”SRVE0190E: File not found”信息的页面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/14/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;出现这种错误信息的原因可能是URL错误，或者在server上的这个页面不可用，或者是plugin配置的问题。特别注意出错的URL。更多信息查看 &lt;a href=&quot;#page16&quot;&gt;“Page cannot be displayed or JSP/JSF error”&lt;/a&gt;。&lt;/p&gt;

&lt;h5 id=&quot;webgroupvirtual-host-has-not-been-defined&quot;&gt;&lt;strong&gt;&lt;em&gt;WebGroup/Virtual Host has not been defined&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;这个错误很有可能是因为virtual host配置错误，或者输入的URL不正确。一般错误信息会是这样：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SRVE0255E: WebGroup/Virtual Host has not been defined (V6.1) 􏰀 &lt;/li&gt;
  &lt;li&gt;SRVE0017W: WebGroup/Virtual Host has not been defined (V6.0)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/14/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;记住出问题的URL，然后查看这个连接 &lt;a href=&quot;#page16-2&quot;&gt;“WebGroup/virtual host not defined”&lt;/a&gt; 。&lt;/p&gt;

&lt;h4 id=&quot;systemout&quot;&gt;分析SystemOut日志&lt;/h4&gt;

&lt;p&gt;你需要查找这些关键字段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web容器信息：SRVExxxxE or SRVExxxxW&lt;/li&gt;
  &lt;li&gt;JSP信息：JSPGxxxxE or JSPGxxxxW&lt;/li&gt;
  &lt;li&gt;JSF信息：JSFGxxxxE or JSFGxxxxW&lt;/li&gt;
  &lt;li&gt;跟应用程序启动相关的错误信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-7&quot;&gt;&lt;strong&gt;&lt;em&gt;检查应用程序是否成功启动&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Example 1中的信息是一个Web模块正常启动的日志信息。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 1 Normal application startup messages&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;ApplicationMg A WSVR0200I: Starting application: [application_name] 
WebContainer A SRVE0161I: IBM WebSphere Application Server - Web Container.
Copyright IBM Corp. 1998-2004
WebContainer  A SRVE0162I: Servlet Specification Level: 2.4
￼￼￼￼￼WebContainer  A SRVE0163I: Supported JSP Specification Level: 2.0
WebGroup      A SRVE0169I: Loading Web Module: [web_module_name] 
ApplicationMg A WSVR0221I: Application started: [application_name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果应用启动时出现了错误或警告信息，你需要从应用程序方面检测问题的原因。&lt;/p&gt;

&lt;h5 id=&quot;web-group--virtual-host-&quot;&gt;&lt;strong&gt;&lt;em&gt;Web group / Virtual host 错误&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;如果出现了下面的错误，可能是virtual host配置有问题&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SRVE0255E: A WebGroup/Virtual Host to handle url has not been defined. (V6.1)&lt;/li&gt;
  &lt;li&gt;SRVE0017W: A WebGroup/Virtual Host to handle url has not been defined. (V6.0)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;查看这个连接获得更多信息：&lt;a href=&quot;#page16-2&quot;&gt;“WebGroup/virtual host not defined”&lt;/a&gt; &lt;/p&gt;

&lt;h5 id=&quot;section-8&quot;&gt;&lt;strong&gt;&lt;em&gt;其他错误信息&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;有JSPG，JSFG，或者SRVE前缀并且包含出错的URL的错误信息，点击此链接获取检查方法：&lt;a href=&quot;#page16&quot;&gt;“Page cannot be displayed or JSP/JSF error”&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果没有找到任何错误，查看后面的“Web服务器日志分析”章节。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;web-7&quot;&gt;Web服务器日志分析&lt;/h4&gt;

&lt;p&gt;尝试从Web服务器日志中查找下面的标志符并且分析它们。&lt;/p&gt;

&lt;h5 id=&quot;access404&quot;&gt;&lt;strong&gt;&lt;em&gt;在access日志中查找404状态吗&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;NCSA格式的日志如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Remote_host- - date_time &quot;request&quot; status_code bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于404错误来说：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从&lt;code&gt;status_code&lt;/code&gt;的位置查找“404”&lt;/li&gt;
  &lt;li&gt;着重关注&lt;code&gt;remote_host&lt;/code&gt;地址，&lt;code&gt;date_time&lt;/code&gt;时间戳，以及请求的URL&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;error&quot;&gt;&lt;strong&gt;&lt;em&gt;在error日志中查找错误&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Error日志会像下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[date_time] [error] [client Remote_host] error_message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于error日志来说：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;查找“error”&lt;/li&gt;
  &lt;li&gt;通过&lt;code&gt;remote_host&lt;/code&gt;地址和&lt;code&gt;date_time&lt;/code&gt;时间戳把对应的access日志和error日志关联起来&lt;/li&gt;
  &lt;li&gt;注意&lt;code&gt;error_message&lt;/code&gt;的具体内容&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;access&quot;&gt;&lt;strong&gt;&lt;em&gt;评估access日志&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

</content>
 </entry>
 
 <entry>
   <title>IBM Web Server Plug-in问题诊断——文档翻译</title>
   <link href="http://blog.dellyqiao.com/middleware/translation/2015/04/11/web-server-plug-in-"/>
   <updated>2015-04-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/translation/2015/04/11/web-server-plug-in-</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;声明&lt;/h3&gt;

&lt;p&gt;本文为IBM官方WebSphere问题诊断系列文档翻译，旨在为自己增加知识和方便国人查看。本翻译遵循实用原则，原文过于拖沓啰嗦的地方就略过。有兴趣的可以继续阅读，没兴趣的请路过。欢迎留言吐槽，谢谢。&lt;/p&gt;

&lt;p&gt;本文为翻译plugin问题诊断文档：redp4045-WebSphere Application Server V6 Web Server Plug-in Problem Determination.pdf，次文档可以从这里下载：&lt;a href=&quot;http://dellyqiao.qiniudn.com/2015/04/11/redp4045-WebSphere Application Server V6 Web Server Plug-in Problem Determination.pdf&quot;&gt;文档下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面进入正题：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;websphere-application-server-v6-web-server-plug-in-problem-determination&quot;&gt;WebSphere Application Server V6: Web Server Plug-in Problem Determination&lt;/h2&gt;

&lt;p&gt;本文讨论一下跟WebSphere Application Server V6（后文简称WAS）相关的Web服务器的plugin-in的问题诊断技术，包括由配置错误引起的问题。Web服务器plugins用来处理Web服务器跟Web container（Web container是应用服务器上的组件）之间的连接交互。跟plugin相关的问题有以下标志：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户无法通过Web服务器访问到应用&lt;/li&gt;
  &lt;li&gt;负载均衡和故障转移（failover）无法正常工作&lt;/li&gt;
  &lt;li&gt;会话数据丢失&lt;/li&gt;
  &lt;li&gt;应用响应速度缓慢或时快时慢&lt;/li&gt;
  &lt;li&gt;在安装或配置plugin之后，Web服务无法启动&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugin可以与六中不同的Web服务器协同工作，但是本文只关注IBM HTTP Server（后文简称IHS）和它的plugin。本文不会去讨论Web服务器本身的问题或者跟Web Container相关的问题。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip：强烈建议您从应用服务器开始排错的过程，请阅读：Approach to Problem Determination in WebSphere Application Server V6 at http://www.redbooks.ibm.com/redpapers/pdfs/redp4073.pdf（以后将继续翻译）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;介绍&lt;/h3&gt;

&lt;p&gt;图1展示了plugin如何在Web服务器和应用服务器上的Web Container之间进行交互。注意，Web服务器和应用服务器不需要都放到同一台物理服务器上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/11/figure1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据图示，本文讲到的问题诊断技术的关注点在Web服务器plugin和它的配置文件上。由于安装plugin的时候也需要修改Web服务器配置，创建plugin的时候需要使用WebSphere管理工具，因此本文还会讨论到这些部分。&lt;/p&gt;

&lt;p&gt;我们需要关注下列用户可以看到的问题的标志：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户无法访问到应用（页面无法找到，和页面无法显示）&lt;/li&gt;
  &lt;li&gt;会话数据丢失（比如每次都需要登录，购物车数据丢失）&lt;/li&gt;
  &lt;li&gt;响应速度慢，时好时坏&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们还需要关注下列系统管理员可以看到的问题的标志：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web服务器无法启动&lt;/li&gt;
  &lt;li&gt;在集群环境中应用无法正确地分布到集群成员服务器上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有可以使用plugin的Web服务器都可以在运行时加载外部模块；plugin也正是其中的一个模块。比如，IHS使用两行命令加载plugin模块，引用plugin配置文件。如下面的Example 1。&lt;/p&gt;

&lt;p&gt;Plugin配置文件是一个XML文档，它告诉Web服务器如何处理那些需要发送到WAS服务器的请求。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 1 IBM HTTP Server plug-in directives&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;LoadModule was_ap20_module &quot;C:\IBM\WAS6\Plugins\bin\mod_was_ap20_http.dll&quot;
WebSpherePluginConfig &quot;C:\IBM\WAS6\Plugins\config\webserver1\plugin-cfg.xml&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Plugin的工作原理是这样的：它拦截所有Web服务器收到的请求，然后用URL里的Host name和端口去跟Plugin配置文件中定义的&lt;code&gt;VirtualHostGroup&lt;/code&gt;和&lt;code&gt;UriGroup&lt;/code&gt;里定义的URI相比较。如果找到了对应的&lt;code&gt;VirtualHostGroup&lt;/code&gt;和&lt;code&gt;UriGroup&lt;/code&gt;，那么plugin会继续寻找哪个&lt;code&gt;Route&lt;/code&gt;会使用所找到的&lt;code&gt;VirtualHostGroup&lt;/code&gt;和&lt;code&gt;UriGroup&lt;/code&gt;。在找到&lt;code&gt;Route&lt;/code&gt;之后，plugin会把请求发送到&lt;code&gt;Route&lt;/code&gt;中定义&lt;code&gt;ServerCluster&lt;/code&gt;上。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在根据以上的工作原理，在Example 2中，URL请求&lt;code&gt;http://server/snoop&lt;/code&gt;将会被转到WAS，其他的所有请求将会被传到Web服务器继续处理。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 2 Excerpt from the plug-in config file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHostGroup Name=&quot;default_host&quot;&amp;gt;
	&amp;lt;VirtualHost Name=&quot;*:80&quot;/&amp;gt;
&amp;lt;/VirtualHostGroup&amp;gt;
&amp;lt;UriGroup Name=&quot;default_host_cluster1_URIs&quot;&amp;gt;
	&amp;lt;Uri AffinityCookie=&quot;JSESSIONID&quot; AffinityURLIdentifier=&quot;jsessionid&quot; Name=&quot;/snoop/*&quot;/&amp;gt;
&amp;lt;/UriGroup&amp;gt;
&amp;lt;Route ServerCluster=&quot;cluster1&quot; 
UriGroup=&quot;default_host_cluster1_URIs&quot; 
VirtualHostGroup=&quot;default_host&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plugin配置文件由WebSphere administrative console管理，只要你有任何影响到plugin的更改，就需要重新生成plugin。这种更改包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;修改Virtual host定义&lt;/li&gt;
  &lt;li&gt;更改HTTP传输类型或端口&lt;/li&gt;
  &lt;li&gt;创建或删除服务器&lt;/li&gt;
  &lt;li&gt;安装或卸载应用&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip: 你可以设置自动生成和传输plugin配置文件。方法请自行查阅。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-2&quot;&gt;负载均衡&lt;/h4&gt;

&lt;p&gt;Plugin可以为多台集群成员实施负载均衡。&lt;/p&gt;

&lt;p&gt;Figure 2 展示了一种负载均衡的例子，Plugin安装到了Web服务器所在的主机，通过round-robin或random方式把请求转到后面的两台应用服务器上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/11/figure2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://publib-b.boulder.ibm.com/abstracts/sg246392.html&quot;&gt;点击这里&lt;/a&gt;查看更多关于可扩展性和性能方面的内容功能。&lt;/p&gt;

&lt;p&gt;plugin-cfg.xml文件除了描述哪些URL应该被route到plugin之外，它还描述了服务器集群。Example 2展示了snoop URL相关的那些配置，这些配置告诉plugin，snoop应用程序应该由叫做&lt;code&gt;default_host_cluster1_URIs&lt;/code&gt;的&lt;code&gt;UriGroup&lt;/code&gt;去处理。&lt;/p&gt;

&lt;p&gt;Example 3展示了&lt;code&gt;route&lt;/code&gt;配置，这些配置标明&lt;code&gt;default_host_cluster1_URIs&lt;/code&gt;里提到的所有应用将会被叫做&lt;code&gt;cluster1&lt;/code&gt;的这个集群去处理。&lt;code&gt;cluster1&lt;/code&gt;这个集群拥有两台服务器，第一台要通过HTTP端口9080和HTTPS端口9443去访问，第二胎要通过HTTP端口9081和HTTPS端口9444去访问。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 3 Clustering excerpts from the plug-in configuration file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;￼￼￼￼￼&amp;lt;Route ServerCluster=&quot;cluster1&quot; UriGroup=&quot;default_host_cluster1_URIs&quot; VirtualHostGroup=&quot;default_host&quot;/&amp;gt;
...
&amp;lt;ServerCluster CloneSeparatorChange=&quot;false&quot; LoadBalance=&quot;Round Robin&quot; Name=&quot;cluster1&quot; 
PostSizeLimit=&quot;-1&quot; RemoveSpecialHeaders=&quot;true&quot; RetryInterval=&quot;60&quot;&amp;gt;
&amp;lt;Server CloneID=&quot;10ig7jdvd&quot; ConnectTimeout=&quot;0&quot; ExtendedHandshake=&quot;false&quot; 
LoadBalanceWeight=&quot;2&quot; MaxConnections=&quot;-1&quot; Name=&quot;kll6571Node01_server1&quot; ServerIOTimeout=&quot;0&quot;
WaitForContinue=&quot;false&quot;&amp;gt;
     &amp;lt;Transport Hostname=&quot;kll6571&quot; Port=&quot;9080&quot; Protocol=&quot;http&quot;/&amp;gt;
     &amp;lt;Transport Hostname=&quot;kll6571&quot; Port=&quot;9443&quot; Protocol=&quot;https&quot;&amp;gt;
        &amp;lt;Property Name=&quot;keyring&quot; Value=&quot;C:\ibm\was6\plugins\etc\plugin-key.kdb&quot;/&amp;gt;
        &amp;lt;Property Name=&quot;stashfile&quot; Value=&quot;C:\ibm\was6\plugins\etc\plugin-key.sth&quot;/&amp;gt;
     &amp;lt;/Transport&amp;gt;
&amp;lt;/Server&amp;gt;
&amp;lt;Server CloneID=&quot;10ig7jfqi&quot; ConnectTimeout=&quot;0&quot; ExtendedHandshake=&quot;false&quot; 
LoadBalanceWeight=&quot;2&quot; MaxConnections=&quot;-1&quot; Name=&quot;kll6571Node01_server2&quot; ServerIOTimeout=&quot;0&quot; 
WaitForContinue=&quot;false&quot;&amp;gt;
     &amp;lt;Transport Hostname=&quot;kll6571&quot; Port=&quot;9081&quot; Protocol=&quot;http&quot;/&amp;gt;
     &amp;lt;Transport Hostname=&quot;kll6571&quot; Port=&quot;9444&quot; Protocol=&quot;https&quot;&amp;gt;
        &amp;lt;Property Name=&quot;keyring&quot; Value=&quot;c:\ibm\was6\plugins\etc\plugin-key.kdb&quot;/&amp;gt;
        &amp;lt;Property Name=&quot;stashfile&quot; Value=&quot;c:\ibm\was6\plugins\etc\plugin-key.sth&quot;/&amp;gt;
     &amp;lt;/Transport&amp;gt;
&amp;lt;/Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些配置可以使snoop的请求被转到某台应用服务器上，可能是监听9080的那台也可能是另一台。&lt;/p&gt;

&lt;p&gt;Plugin还会监控它发给应用服务器的请求，如果任何一台服务器无法连接，那么那台服务器将会被标记为宕机，同时会把它移出集群，直到它恢复正常。&lt;/p&gt;

&lt;p&gt;负载均衡相关的配置，一部分通过WebSphere Console配置，一部分通过直接修改plugin-cfg.xml文件来配置。&lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.
websphere.nd.doc/info/ae/ae/crun_srvgrp.html&quot;&gt;点击这里&lt;/a&gt;查看更多相关内容。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;会话亲缘性&lt;/h4&gt;

&lt;p&gt;J2EE应用支持会话的概念。会话是一种维护某个用户所有请求的方法。举例来说，我们用会话可以维护用户的购物车清单。&lt;/p&gt;

&lt;p&gt;会话是在Web Container管理的。然而plugin具有维护会话亲缘性的功能。当用户连接到使用会话的应用时，比如购物车，Web Container将会启动会话，并且把用户的session ID回传到浏览器端，一般会放到cookie中。&lt;/p&gt;

&lt;p&gt;集群环境中维护会话的方式很多（比如，把每个请求的会话数据写入到一个共享的数据库）。如果使用了会话亲缘性，plugin将会把某个用户所有的请求都转到创建会话的那台应用服务器。Plugin是通过在内部维护服务器和session ID的列表来实现这个功能的。使用会话亲缘性为应用程序提供了最好的性能表现，因为你不必再为每个请求读取或写入数据库，而是把会话数据都放到了应用服务器的内存里。&lt;/p&gt;

&lt;p&gt;想要使用会话亲缘性无须堆plugin进行任何配置。只要在应用服务器中启用了会话支持，并且plugin配置文件中有&lt;code&gt;CloneID&lt;/code&gt;参数就可以了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Server CloneID=&quot;10ig7jdvd&quot; ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认情况下会生成&lt;code&gt;CloneID&lt;/code&gt;，这是plugin识别没太应用服务器要用到的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;注：实际上&lt;code&gt;CloneID&lt;/code&gt;参数只会在集群环境中生成，在Standard版本的WAS中生成plugin配置文件的时候是不会产生&lt;code&gt;CloneID&lt;/code&gt;参数的，因为后段的应用服务器只有一台，WAS也没必要去做这个额外的配置。但是可以通过在Web Container进行一些配置强制生成&lt;code&gt;CloneID&lt;/code&gt;。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;解决问题&lt;/h3&gt;

&lt;p&gt;诊断问题从收集数据开始，这里有一个你需要收集的文件列表，以及介绍如何收集他们。如果你被限制不能重现问题，你就需要把所有文档一次集齐。&lt;/p&gt;

&lt;p&gt;接下来，你需要过一下一系列问题，这些问题描述了一些问题的特征，根据特征去寻找问题的根源，每一步都能让你更接近问题的根源。&lt;/p&gt;

&lt;p&gt;最后，我们提供了解决问题的指导文档，这些文档可能是一个网站，可能是去联系IBM，或者配置某些东溪，或者其他建议。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;收集数据&lt;/h4&gt;

&lt;p&gt;跟问题相关的日志和trace包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web服务器日志&lt;/li&gt;
  &lt;li&gt;Web服务器plugin日志&lt;/li&gt;
  &lt;li&gt;Plugin trace （可以从plugin日志里找到）&lt;/li&gt;
  &lt;li&gt;WAS SystemOut和SystemErr日志&lt;/li&gt;
  &lt;li&gt;WAS console的信息&lt;/li&gt;
  &lt;li&gt;网络协议分析（有时候是指iptrace）&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;web&quot;&gt;&lt;em&gt;Web服务器日志文件&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;大部分Web服务器会输出两个日志文件：包含了所有访问Web服务器的详情的access文件，和记录了错误的error文件。默认位置为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;IHS，Apache，SunOne&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Windows&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  Access日志：&amp;lt;Web_server_home&amp;gt;\logs\access.log
	
  Error日志：&amp;lt;Web_server_home&amp;gt;\logs\error.log
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Unix&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  Access日志: &amp;lt;Web_server_home&amp;gt;/logs/access_log
	
  Error日志: &amp;lt;Web_server_home&amp;gt;/logs/error_log
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;微软IIS&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Windows&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  Access日志: C:\WINNT\SYSTEM32\LogFiles\W3SVC1\&amp;lt;date&amp;gt;.log 
	
  Error日志: Windows事件日志（eventvwr）
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Domino Web server&lt;/p&gt;

    &lt;p&gt;Domino Web服务器日志放在数据库里，请自行查阅Domino文档了解更多。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;webplugin&quot;&gt;&lt;em&gt;Web服务器plugin日志&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;plugin也会输出自己的日志，日志文件会输出到plugin安装目录下的某个目录。可以从plugin配置文件中找到日志的路径，如Example 4.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 4 Location of plug-in log file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Log LogLevel=&quot;Error&quot;
Name=&quot;c:\ibm\was6\plugins\logs\webserver1\http_plugin.log&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认的LogLevel是&lt;code&gt;Error&lt;/code&gt;，你可以设置为&lt;code&gt;Trace&lt;/code&gt;来收集更详细的跟踪信息。&lt;/p&gt;

&lt;h5 id=&quot;plugin-trace&quot;&gt;&lt;em&gt;Plugin trace&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;要获取有效的跟踪信息，你需要尽可能多地得到日志。比如，你可以为IHS设置配置文件中的LogLevel为&lt;code&gt;debug&lt;/code&gt;来获得更详细的日志输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LogLevel debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于这个更改，你必须重启IHS服务才能生效。&lt;/p&gt;

&lt;p&gt;同时可以在plugin里启用trace日志，修改plugin-cfg.xml文件即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Log LogLevel=&quot;Trace&quot;
Name=&quot;c:\ibm\was6\plugins\logs\webserver1\http_plugin.log&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于这个更改，不需要重启IHS即可生效。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;plugin trace将会显著增加数据量，所以启用后尽量测试具体的问题一减少日志的行数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;was&quot;&gt;&lt;em&gt;WAS日志&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;从应用服务器上获取，日志文件的路径为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;WAS_install_root&amp;gt;/profiles/&amp;lt;profile&amp;gt;/logs/&amp;lt;server&amp;gt;/SystemOut.log 
&amp;lt;WAS_install_root&amp;gt;/profiles/&amp;lt;profile&amp;gt;/logs/&amp;lt;server&amp;gt;/SystemErr.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-6&quot;&gt;&lt;em&gt;网络跟踪信息&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;少量情况下，你需要使用网络分析工具获取iptrace，这可以帮助检测出问题的位置。WAS不支持这种工具，你可以使用第三方工具完成这项工作。如 http://www.ethereal.com/&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;查看问题特征&lt;/h4&gt;

&lt;p&gt;我们通过查看下面列表中提到的问题特征描述来找到应对的方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;无法从Web服务器获得响应&lt;/p&gt;

    &lt;p&gt;检查Web服务器是否已启动，可以检查进程或者访问顶级URL。例如：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  http://localhost/
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;如果无法得到Web服务器的欢迎也，检查一下Web服务器的进程是否已经启动，如果没有，尝试手动启动。&lt;/p&gt;

    &lt;p&gt;如果Web服务器无法启动，查看 &lt;a href=&quot;#problem1&quot;&gt;“Problem: Web server will not start”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web服务器已经启动，但是无法通过它访问应用。&lt;/p&gt;

    &lt;p&gt;比如说用这个URL &lt;code&gt;http://Web_server/snoop&lt;/code&gt;去访问snoop servlet无法正常工作。&lt;/p&gt;

    &lt;p&gt;这时要先检查一下应用是否可以通过Web Container直接访问，使用这种URL去检测：&lt;code&gt;http://Application_server:WC_port/snoop&lt;/code&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  要通过Web Container直接访问应用：
  1. 找到对应的Web Container的端口：
      a. 在WAS console中，选择 Servers -&amp;gt; Application Servers.
      b. 点击服务器名
      c. 在“Communications”区，展开“Ports”
      d. 记住“WC_defaulthost”所对应的端口号
  2. 用浏览器使用端口号去访问对应的资源。
      例如：如果端口号是9080，那么URL就是：http://localhost:9080/snoop
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;如果可以通过Web Container访问到应用但是通过Web服务器就不行，那么查看 &lt;a href=&quot;#problem2&quot;&gt;“Problem: Failure between the Web server and plug-in”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用依赖于会话，但是会话信息很明显丢失了。&lt;/p&gt;

    &lt;p&gt;例如，如果你每次访问应用时都要求登录，或者购物车数据丢失，那就说明有可能发生了会话丢失的现象。这种情况查看 &lt;a href=&quot;#problem3&quot;&gt;“Problem: Sessions are being lost”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;集群环境下，应用时好时坏&lt;/p&gt;

    &lt;p&gt;例如，2/3的请求是工作的，另外的1/3会超时。这种情况查看 &lt;a href=&quot;#problem4&quot;&gt;“Problem: The application works intermittently”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用负载没有均匀地分布到集群中的成员上&lt;/p&gt;

    &lt;p&gt;例如，某台集群成员CPU负载在80%，另一台负载总是很小。这种情况请查看 &lt;a href=&quot;#problem5&quot;&gt;“Problem: Application load is not being evenly distributed”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果上面的列表里没有你遇到的问题，查看这里 &lt;a href=&quot;#problem6&quot;&gt;“The next step”&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;分析问题&lt;/h4&gt;

&lt;p&gt;根据收集到的信息，你应该已经被指引到了下面的某一个问题类别里。如果没有的话，查看 &lt;a href=&quot;#problem6&quot;&gt;“The next step”&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;problem1&quot;&gt;Problem: Web server will not start&lt;/h4&gt;

&lt;p&gt;如果你已经安装了plugin，或者生成了plugin配置文件，然后Web服务器无法启用，那么问题应该在plugin上。&lt;/p&gt;

&lt;h5 id=&quot;section-9&quot;&gt;需要收集的数据&lt;/h5&gt;

&lt;p&gt;需要收集下列日志以确定为何无法启动Web服务器，请把日志拷贝出来以防在debug的过程中日志被覆盖。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS操作系统信息&lt;/li&gt;
  &lt;li&gt;Web服务器日志&lt;/li&gt;
  &lt;li&gt;plugin日志&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在某些情况下，错误信息不会输出到任何日志中，这时你需要用命令行启动应用然后观察在控制台输出的错误信息。&lt;/p&gt;

&lt;h5 id=&quot;section-10&quot;&gt;如何检查&lt;/h5&gt;

&lt;p&gt;查看标识出为什么服务无法启动的日志。如果看到最后都没有失败的信息，那么尝试启动服务器然后直接查看输出的信息。&lt;/p&gt;

&lt;p&gt;Example 5展示了如果plugin-cfg.xml文件缺失，日志会是什么样：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 5 Starting the HTTP Server from the command line&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;C:\IBM\HTTP\bin&amp;gt;apache
ws_common: websphereUpdateConfig: Failed to stat plugin config file for
C:\IBM\WAS6\Plugins\config\webserver1\plugin-cfg.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Unix环境中，当你启动Web服务器的时候，一般可以在命令行中看到相关的信息。比如plugin模块被损坏了，输出如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 6 Messages indicating a corrupt plug-in module on UNIX&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Syntax error on line 844 of /opt/IBMIHS/conf/httpd.conf:
Cannot load /opt/IBM/WAS6/Plugins/bin/mod_was_ap20_http.so into server:
/opt/IBM/WAS6/Plugins/bin/mod_was_ap20_http.so: undefined symbol: ap_palloc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Windows环境中，用Windows services面板启动Web服务器的时候很少会看到有用的信息，你需要查看日志文件。累死Example 6的信息将会出现在http_plugin.log文件中。&lt;/p&gt;

&lt;p&gt;如果是plugin是Web服务器无法启动，那么错误信息一般会很精确很具体。等你解决了那些问题的时候就可以启动Web服务器了。&lt;/p&gt;

&lt;p&gt;如果错误信息指向某些文件，那么请确认文件确实存在并且没被损坏。确认过程中请使用启动Web服务器的那个账户，以确保不存在任何权限问题。&lt;/p&gt;

&lt;p&gt;如果错误信息指出跟plugin-cfg.xml相关，可以尝试重新生成这个文件。&lt;/p&gt;

&lt;p&gt;Plugin只在特定版本的Web服务器上工作，如果你的plugin版本过劳，或者Web服务器或者GSKit版本过来，那么你需要升级一下对应的组件。下面的链接可以查看软件版本的适配信息：&lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.
websphere.base.doc/info/welcome_base.html&quot;&gt;http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.
websphere.base.doc/info/welcome_base.html&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip: 运行GSKit版本命令以获取版本信息，此命令在&lt;gskit_install&gt;/bin目录下。
示例：C:\Program Files\IBM\gsk7\bin\gsk7ver&lt;/gskit_install&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果上面的信息都跟你的情况不符，那么问题就不是有plugin引起的。这种情况下，你需要回顾一下问题的特征，确定是否应该属于别的情况。&lt;/p&gt;

&lt;h4 id=&quot;problem2&quot;&gt;Problem: Failure between the Web server and plug-in&lt;/h4&gt;

&lt;p&gt;如果你猜想plugin有一些问题导致了Web服务器不能把HTTP请求发送到WAS服务器，那么这个部分会帮助你确定原因。&lt;/p&gt;

&lt;p&gt;最明显的特征是可以直接访问Web Container，但是不能通过Web服务器去访问。&lt;/p&gt;

&lt;p&gt;Error日志同时也会出现一个无法找到文件的记录，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Tue Jun 28 15:54:43 2005] [error] [client 127.0.0.1] File does not exist:
C:/IBM/HTTP/htdocs/en_US/snoop
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-11&quot;&gt;需要收集的数据&lt;/h5&gt;

&lt;p&gt;收集这些日志文件可以帮助你查明问题的根源：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web服务器日志&lt;/li&gt;
  &lt;li&gt;Plugin日志&lt;/li&gt;
  &lt;li&gt;Plugin trace （debug模式的plugin日志）&lt;/li&gt;
  &lt;li&gt;网络trace （辅助plugin trace分析）&lt;/li&gt;
  &lt;li&gt;plugin配置文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-12&quot;&gt;如何检查&lt;/h5&gt;

&lt;p&gt;首先确定Web服务器确实引用了plugin-cfg.xml文件，检查httpd.conf配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WebSpherePluginConfig /opt/WAS6/Plugins/config/web1/plugin-cfg.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开这个xml文件，检查无法正常工作的应用程序的URI是否包含在其中，像Example 2那样。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;验证你是否使用了正确的配置文件&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果应用程序的URI配置丢失，那么确认一下Web服务器上的这个配置文件是否是你生成的那个。当你生成plugin配置文件时，不论是用WAS Console还是&lt;code&gt;GenPluginCfg.sh/bat&lt;/code&gt;命令，输出的信息都会告诉你生成的文件的具体位置。Figure 3显示plugin文件的位置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/11/figure3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当以下条件满足时，plugin配置文件还可以自动传输到本地或远程服务器的指定位置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;远程Web服务器是IHS&lt;/li&gt;
  &lt;li&gt;Plugin配置服务已经在运行&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以下条件满足任意一条：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;WebSphere的node agent运行在Web服务器所在的主机上&lt;/li&gt;
      &lt;li&gt;IHS运行在Web服务器所在的主机上，并且管理密码已经设定好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;自动传输插件的配置已经启用。如Figure 4：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/11/figure4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更多自动传输插件的信息请查阅这里： &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.
websphere.base.doc/info/aes/ae/uwsv_plugin_props.html&quot;&gt;http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.
websphere.base.doc/info/aes/ae/uwsv_plugin_props.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;验证是否正确地生成了plugin配置文件&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果尝试生成plugin配置文件，但是应用的context root没有出现在其中，那么可能配置文件没有正确地生成。配置文件中的内容取决于你生成配置文件的方法。&lt;/p&gt;

&lt;p&gt;如果你使用&lt;code&gt;GenPluginCfg.sh/bat&lt;/code&gt;命令，没有使用任何参数，那么拓扑结构中所有的应用和应用服务器都会生成到配置文件中。然而，你可以通过参数缩小要包含进来的拓扑结构的部分。例如，如果使用命令行并且指定Web服务器名去生成plugin，或者使用WAS Console生成plugin，那么只有映射到那个Web服务器上的应用程序才会被包含到plugin文件中。&lt;/p&gt;

&lt;p&gt;问题的原因可能只是因为你没有把应用程序映射到对应的Web服务器。这是用WAS Console做一下mapping就好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;检查此错误：Virtual Host and WebGroup not found error&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果配置文件没问题，但是“Virtual Host and WebGroup not found error”这样的错误信息返回到了浏览器中，那么这个错误是跟WAS相关的，查看此链接：&lt;a href=&quot;http://www.redbooks.ibm.com/redpapers/pdfs/redp4058.pdf&quot;&gt;http://www.redbooks.ibm.com/redpapers/pdfs/redp4058.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;进一步分析：Trace和请求&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;到现在为止，你确定一切配置都正常，看起来Web服务器可以接受请求，plugin可以把请求发到WAS，但是不能从应用方面得到响应。&lt;/p&gt;

&lt;p&gt;下一个步骤，启用plugin trace，再次发送一个HTTP请求，然后检查每个日志，跟踪此HTTP请求以确定到底它是在哪个环节失败的。Figure 5展示了HTTP请求索要经过的路径：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/11/figure5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据图示的路径追踪指定的请求可以告诉你问题出在哪儿。Example 9展示了一个成功的请求，这些日志记录展示了请求在各个组件之间成功地过渡。&lt;/p&gt;

&lt;p&gt;写入到http_plugin.log文件里的第一行日志说明plugin绑定了转换URL的工具，如果一切正常，可以看到它将会绑定你的URL。Example 7摘要了几条snoop应用相关的trace日志：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 7 Plug-in trace initial entries&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - TRACE: ws_uri: uriCreate: Creating uri
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - TRACE: ws_uri: uriSetName: Setting the name /snoop/* with score 7
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - TRACE: ws_uri: uriSetAffinityURL: Setting the affinity cookie jsessionid
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - TRACE: ws_uri: uriSetAffinityCookie: Setting the affinity cookie JSESSIONID
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - TRACE: ws_uri_group: uriGroupAddUri: Adding uri /snoop/* to front of list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在plugin完成转换工作之后，它会把版本信息写入到日志里，如下Example 8：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 8 Plug-in initialization messages&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;--------------------System Information-----------------------
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - PLUGIN: Bld version: 6.0.0
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - PLUGIN: Bld date: Oct 31 2004, 11:15:26
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - PLUGIN: Webserver: IBM_HTTP_Server/6.0 Apache/2.0.47 (Win32)
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - PLUGIN: Hostname = KLL6571
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - PLUGIN: OS version 5.0, build2195, &#39;Service Pack 4&#39;
[Thu Jun 23 14:35:46 2005] 0000097c 00000ae4 - PLUGIN:
--------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example 9所示的日志说明plugin已经成功地转换了URL，然后设置传输方式，把请求转到了集群中的一台服务器去处理。之后，一个带有200返回码的响应成功地返回到了plugin。时间标说明应用服务器花了7秒钟去处理这个请求。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 9 Web server plug-in request trace entries for snoop&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[Thu Jun 23 14:35:56 2005] 000007bc 000007d4 - TRACE: ws_common: websphereShouldHandleRequest: trying to match a route for: vhost=&#39;localhost&#39;; uri=&#39;/snoop&#39;
...
[Thu Jun 23 14:35:56 2005] 000007bc 000007d4 - TRACE: ws_common: websphereUriMatch: Found a match &#39;/snoop&#39; to &#39;/snoop&#39; in UriGroup: default_host_cluster1_URIs with score 6
...
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE: ws_common: websphereExecute: Executing the transaction with the app server
...
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE: lib_htrequest: htrequestWrite: Writing the request:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼18 WebSphere Application Server V6: Web Server Plug-in Problem Determination
GET /snoop HTTP/1.1
User-Agent: Wget/1.9
Host: localhost
Accept: */*
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE:
WS-ESI=&quot;ESI/1.0+&quot;
Connection: Keep-Alive
$WSIS: false
$WSSC: http
$WSPR: HTTP/1.0
$WSRA: 127.0.0.1
$WSRH: 127.0.0.1
$WSSN: localhost
$WSSP: 80
Surrogate-Capability:
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE: lib_htrequest: htrequestWrite: Writing the request content
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE: ws_common: websphereExecute: Wrote the request; reading the response
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE: lib_htresponse: htresponseRead: Reading the response: 5397bc
...
[Thu Jun 23 14:35:57 2005] 000007bc 000007d4 - TRACE: lib_htresponse: htresponseRead: Reading the response: 5397bc
[Thu Jun 23 14:36:04 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:36:04 2005] 000007bc 000007d4 - TRACE:
text/html;charset=ISO-8859-1
[Thu Jun 23 14:36:04 2005] 000007bc 000007d4 - TRACE:
en-US
HTTP/1.1 200 OK
Content-Type:
Content-Language:
Content-Length: 16166
[Thu Jun 23 14:36:04 2005] 000007bc 000007d4 - TRACE:
[Thu Jun 23 14:36:04 2005] 000007bc 000007d4 - TRACE: lib_htresponse:
htresponseSetContentLength: Setting the content length |16166|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这之后，很快地Web服务器把得到的响应返回给浏览器，同时更新access日志，显示整个事务成功完成。如Example 10：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 10 Web server access log entry for snoop&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1 - - [23/Jun/2005:14:35:56 -0400] &quot;GET /snoop HTTP/1.0&quot; 200 16166
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Web服务器在整个处理最后的过程才会写入Access日志。&lt;/p&gt;

&lt;p&gt;根据上面的介绍，你可以根据提到的日志文件去确定问题出在哪个环节。&lt;/p&gt;

&lt;p&gt;下面的Example 11展示了plugin标记应用服务器为宕机状态的日志。这个日志即使不是trace级别也会出现，这个信息包含操作系统返回的错误：&lt;code&gt;err=10061&lt;/code&gt;，这条信息表示connection refused。想要知道这些错误信息的含义，你需要检查一下操作系统的文档。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 11 Plug-in messages when a server goes down&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[Thu Jul 07 13:53:20 2005] 00000d6c 000010b8 - ERROR: ws_common: websphereGetStream: Failed to connect to app server on host &#39;kll6571&#39;, OS err=10061
[Thu Jul 07 13:53:20 2005] 00000d6c 000010b8 - ERROR: ws_common: websphereExecute: Failed to create the stream
[Thu Jul 07 13:53:20 2005] 00000d6c 000010b8 - ERROR: ws_server: serverSetFailoverStatus: Marking kll6571Node01_server01 down 
[Thu Jul 07 13:53:20 2005] 00000d6c 000010b8 - ERROR: ws_common: websphereHandleRequest: Failed to execute the transaction to &#39;kll6571Node01_server01&#39;on host &#39;kll6571&#39;; will try another one
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果plugin trace显示它绑定了请求并且把请求发送到了应用服务器，但是没有显示收到的回复，那么问题可能是Web服务器和APP服务器之间的网络出现问题。Example 12中的日志显示plugin把请求写入了请求然后等待响应。在这个例子中，plugin设置了连接超时为10秒，所以10秒过后还没有响应，plugin就会把这台应用服务器标记为宕机。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 12 Marking a server down after time out&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[Thu Jul 07 15:09:48 2005] 00000ed4 00000ffc - TRACE: lib_htrequest: htrequestWrite: Writing the request content
[Thu Jul 07 15:09:48 2005] 00000ed4 00000ffc - TRACE: ws_common: websphereExecute: Wrote the request; reading the response
[Thu Jul 07 15:09:48 2005] 00000ed4 00000ffc - TRACE: lib_htresponse: htresponseRead: Reading the response: 4cf1504
[Thu Jul 07 15:09:58 2005] 00000ed4 00000ffc - TRACE: lib_htresponse: htresponseSetError: Setting the error |1|
[Thu Jul 07 15:09:58 2005] 00000ed4 00000ffc - ERROR: ws_common: websphereExecute: Failed to read from a new stream; App Server may have gone down during read
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;某些情况下，成功建立连接并且写入请求之后，应用服务器宕机了，但是plugin无法检测出来。这种奇怪的现象一般是因为其中一台服务器是Windows另一台是Unix。&lt;/p&gt;

&lt;p&gt;Example 13展示了一个正常收到响应的例子。plugin写入请求然后等待响应，7秒钟后收到响应。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 13 A request that responds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[Thu Jul 07 14:27:00 2005] 00000a20 00000f80 - TRACE: lib_htrequest:
htrequestWrite: Writing the request content
[Thu Jul 07 14:27:00 2005] 00000a20 00000f80 - TRACE: ws_common:
websphereExecute: Wrote the request; reading the response
[Thu Jul 07 14:27:00 2005] 00000a20 00000f80 - TRACE: 	lib_htresponse: htresponseRead: Reading the response: 5397cc
[Thu Jul 07 14:27:07 2005] 00000a20 00000f80 - TRACE: HTTP/1.1 200 OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example 14展示了这种情况：plugin写入请求然后等待响应，但是5分钟后下一个请求已经到达了，上个请求的响应还没有收到。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 14 A request that never responds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[Thu Jul 07 14:22:20 2005] 00000a20 00000f88 - TRACE: ws_common: websphereExecute: Wrote the request; reading the response
[Thu Jul 07 14:22:20 2005] 00000a20 00000f88 - TRACE: lib_htresponse: htresponseRead: Reading the response: 4cf1504
[Thu Jul 07 14:27:00 2005] 00000a20 00000f80 - TRACE: lib_util: parseHostHeader: Host: &#39;localhost&#39;, port 80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种时候，你可以使用网络协议分析器去检测数据包在离开Web服务器后发生了什么事情。也可以叫&lt;code&gt;iptrace&lt;/code&gt;。网络协议分析器是一种专业性强的工具，一般来说即时网络比较空闲也会产生大量的数据。如果你没有足够的经验，也可以请网络工程师来帮忙抓取。&lt;/p&gt;

&lt;p&gt;大多数表面上跟plugin相关的问题实际上都是配置问题和网络问题。除了均衡负载这个特性之外，plugin实际上是一个用来抓取请求，转换URL然后找到匹配，然后把匹配好的请求转发到应用服务器的简单组件。&lt;/p&gt;

&lt;h4 id=&quot;problem3&quot;&gt;Problem: Sessions are being lost&lt;/h4&gt;

&lt;p&gt;如果在集群环境中出现了会话数据丢失的情况，那么plugin有可能是问题的根源。&lt;/p&gt;

&lt;h5 id=&quot;section-13&quot;&gt;需要收集的数据&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Plugin trace&lt;/li&gt;
  &lt;li&gt;Web服务器上的Plugin日志&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-14&quot;&gt;如何检查&lt;/h5&gt;

&lt;p&gt;Plugin trace可以给我们展示处理会话亲缘性的详细过程。WAS自带的示例应用程序就可以测试会话亲缘性。下面的URL可以展示WAS正在运行而且设置了一个会话。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://servername/HelloHTML.jsp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example 15中的日志片段展示了会话的创建过程。plugin试图找到跟session相关的cookie，但是没有找到，所以它使用round-robin负载均衡算法找到了一台服务器去创建。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 15 Creating a session&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: ws_common: websphereWriteRequestReadResponse: Enter
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: ws_common: websphereHandleSessionAffinity: Checking for session affinity [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: ws_common: websphereHandleSessionAffinity: Checking the SSL session id
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: lib_htrequest:
    htrequestGetCookieValue: Looking for cookie: &#39;SSLJSESSION&#39;
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: lib_htrequest:
    htrequestGetCookieValue: No cookie found for: &#39;SSLJSESSION&#39;
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: ws_common:
    websphereHandleSessionAffinity: Checking the cookie affinity: JSESSIONID
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: lib_htrequest:
    htrequestGetCookieValue: Looking for cookie: &#39;JSESSIONID&#39;
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: lib_htrequest:
    htrequestGetCookieValue: No cookie found for: &#39;JSESSIONID&#39;
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: ws_common: websphereHandleSessionAffinity: Checking the url rewrite affinity: jsessionid [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: ws_common: websphereParseSessionID: Parsing session id from &#39;/HelloHTML.jsp&#39;
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: ws_common: websphereParseSessionID: Failed to parse session id
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: ws_common: websphereHandleSessionAffinity: Bypassing check for partitionID cookie affinity. No stored partition table.
    [Mon Jun 27 14:48:33 2005] 00000798 00000e00 - TRACE: ws_server_group: serverGroupNextRoundRobinServer: Round Robin load balancing
    ...
    [Mon Jun 27 14:51:36 2005] 00000798 00000e18 - TRACE: ws_server_group: serverGroupIncrementConnectionCount: Server kll6571Node01_server2 picked, pendingConnectionCount 1 totalConnectionsCount 5.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面的Example 16展示了第二个请求处理的过程。因为已经有一个session ID了，所以这一次请求被发送到了Example 15中创建session的那台机器上，也就是&lt;code&gt;kll6571Node01_server2 &lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 16 Processing session affinity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_common: websphereHandleSessionAffinity: Checking for session affinity [Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_common: websphereHandleSessionAffinity: Checking the SSL session id
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: lib_htrequest:
htrequestGetCookieValue: Looking for cookie: &#39;SSLJSESSION&#39;
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: lib_htrequest:
htrequestGetCookieValue: No cookie found for: &#39;SSLJSESSION&#39;
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_common: websphereHandleSessionAffinity: Checking the cookie affinity: JSESSIONID [Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: lib_htrequest: htrequestGetCookieValue: Looking for cookie: &#39;JSESSIONID&#39;
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: lib_htrequest: htrequestGetCookieValue: name=&#39;JSESSIONID&#39;, value=&#39;00004RRFkLCkLGWVw-37Cd-mEN7:10ig7jfqi&#39;
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_common: websphereParseCloneID: Parsing clone ids from &#39;00004RRFkLCkLGWVw-37Cd-mEN7:10ig7jfqi&#39;
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_common: websphereParseCloneID: Adding clone id &#39;10ig7jfqi&#39;
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_common: websphereParseCloneID: Returning list of clone ids
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_server_group: serverGroupFindClone: Looking for clone
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_server_group: serverGroupGetFirstPrimaryServer: getting the first primary server
￼￼￼￼￼￼￼￼￼￼WebSphere Application Server V6: Web Server Plug-in Problem Determination 23
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_server_group:
serverGroupFindClone: Comparing curCloneID &#39;10ig7jfqi&#39; to server clone id
&#39;10ig7jdvd&#39;
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_server_group:
serverGroupGetNextPrimaryServer: getting the next primary server
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_server_group: serverGroupFindClone: Comparing curCloneID &#39;10ig7jfqi&#39; to server clone id &#39;10ig7jfqi&#39;
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_server_group: serverGroupFindClone: Match for clone &#39;kll6571Node01_server2&#39;
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_server: serverHasReachedMaxConnections: currentConnectionsCount 0, maxConnectionsCount -1.
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - STATS: ws_server_group: serverGroupCheckServerStatus: Checking status of kll6571Node01_server2, ignoreWeights 1, markedDown 0, retryNow 0, wlbAllows -1 reachedMaxConnectionsLimit 0
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_server: serverHasReachedMaxConnections: currentConnectionsCount 0, maxConnectionsCount -1.
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_server_group: serverGroupIncrementConnectionCount: Server kll6571Node01_server2 picked, pendingConnectionCount 1 totalConnectionsCount 7.
[Mon Jun 27 14:51:51 2005] 00000798 00000e00 - TRACE: ws_common: websphereHandleSessionAffinity: Setting server to kll6571Node01_server2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看plugin trace日志就可以知道会话亲缘性是否正常工作，plugin有没有把会话转发到正确的服务器。&lt;/p&gt;

&lt;p&gt;如果会话亲缘性很明显没有正常工作，请检查WAS的配置，以确定会话管理的配置参数是否正确设定。同时，检查plugin-cfg.xml文件以确定&lt;code&gt;CloneID&lt;/code&gt;参数是否存在。&lt;/p&gt;

&lt;p&gt;Figure 6展示了会话管理参数的配置页面，按照此路径到达这个配置页：Application servers → servername → Web container settings → Session management&lt;/p&gt;

&lt;p&gt;有三种会话机制可以配置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;启用SSL ID跟踪，只有为应用程序使用SSL加密的时候才可以使用。&lt;/li&gt;
  &lt;li&gt;启用cookies，这是最通用的方法&lt;/li&gt;
  &lt;li&gt;启用URL重写，这种方法很少使用，因为它需要对每个URL都进行重写，对性能会有较大影响&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要启用会话支持，可以选择一个或多个机制。其他参数是用来设置会话能持续多久，和其他目的会话配置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/11/figure6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;与会话相关的错误信息只会出现在plugin trace里。&lt;/p&gt;

&lt;p&gt;Example 17与Example 16类似，不同的是创建会话的那台主机已经宕机。这时plugin会选择另一台集群中的服务器，但是宕掉的机器产生的会话数据将会丢失。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 17 Session lost after application server goes down&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[Thu Jul 07 15:55:59 2005] 00000bcc 000010c0 - TRACE: ws_server_group: serverGroupFindClone: Match for clone &#39;m23vnx60Craig01_server02&#39;
...
[Thu Jul 07 15:55:59 2005] 00000bcc 000010c0 - TRACE: ws_server_group: lockedServerGroupUseServer: Server m23vnx60Craig01_server02 picked, weight 0. [Thu Jul 07 15:55:59 2005] 00000bcc 000010c0 - TRACE: ws_common: websphereFindTransport: Finding the transport
[Thu Jul 07 15:55:59 2005] 00000bcc 000010c0 - TRACE: ws_common: websphereFindTransport: Setting the transport(case 2): m23vnx60 on port 19082 [Thu Jul 07 15:55:59 2005] 00000bcc 000010c0 - TRACE: ws_common: websphereExecute: Executing the transaction with the app server
[Thu Jul 07 15:55:59 2005] 00000bcc 000010c0 - TRACE: ws_common: websphereGetStream: Getting the stream to the app server
[Thu Jul 07 15:55:59 2005] 00000bcc 000010c0 - TRACE: ws_transport: transportStreamDequeue: Checking for existing stream from the queue
[Thu Jul 07 15:56:00 2005] 00000bcc 000010c0 - ERROR: ws_common: websphereGetStream: Failed to connect to app server on host &#39;m23vnx60&#39;, OS err=10061
[Thu Jul 07 15:56:00 2005] 00000bcc 000010c0 - TRACE: ws_common: websphereGetStream: socket 6628 closed - failed to connect
[Thu Jul 07 15:56:00 2005] 00000bcc 000010c0 - ERROR: ws_common: websphereExecute: Failed to create the stream
[Thu Jul 07 15:56:00 2005] 00000bcc 000010c0 - ERROR: ws_server: serverSetFailoverStatus: Marking m23vnx60Craig01_server02 down
[Thu Jul 07 15:56:00 2005] 00000bcc 000010c0 - STATS: ws_server: serverSetFailoverStatus: Server m23vnx60Craig01_server02 : pendingConnections 0 failedConnections 1 affinityConnections 1 totalConnections 0.
[Thu Jul 07 15:56:00 2005] 00000bcc 000010c0 - ERROR: ws_common: websphereHandleRequest: Failed to execute the transaction to &#39;m23vnx60Craig01_server02&#39;on host &#39;m23vnx60&#39;; will try another one
...
[Thu Jul 07 15:56:00 2005] 00000bcc 000010c0 - TRACE: ws_server_group: lockedServerGroupUseServer: Server kll6571Node01_server01 picked, weight 0. [Thu Jul 07 15:56:00 2005] 00000bcc 000010c0 - TRACE: ws_common: websphereFindTransport: Finding the transport
[Thu Jul 07 15:56:00 2005] 00000bcc 000010c0 - TRACE: ws_common: websphereFindTransport: Setting the transport(case 2): kll6571 on port 9082
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果从plugin的角度来看，很明显会话亲缘性工作正常，那问题很可能出现在应用上。这时请跟开发团队去确定应用程序有正确地处理会话。&lt;/p&gt;

&lt;p&gt;Example 18展示了这样的情况：应用程序需要会话，并且采用了cookie机制，但是客户端浏览器不支持cookie。由于无法保存session ID，导致plugin无法维护会话亲缘性。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example 18 Session failure as cookies are not allowed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: ws_common: websphereHandleSessionAffinity: Checking for session affinity [Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: ws_common: websphereHandleSessionAffinity: Checking the SSL session id
[Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: lib_htrequest: htrequestGetCookieValue: Looking for cookie: &#39;SSLJSESSION&#39;
[Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: lib_htrequest: htrequestGetCookieValue: No cookie found for: &#39;SSLJSESSION&#39;
[Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: ws_common: websphereHandleSessionAffinity: Checking the cookie affinity: JSESSIONID
[Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: lib_htrequest: htrequestGetCookieValue: Looking for cookie: &#39;JSESSIONID&#39;
[Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: lib_htrequest: htrequestGetCookieValue: No cookie found for: &#39;JSESSIONID&#39;
[Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: ws_common: websphereHandleSessionAffinity: Checking the url rewrite affinity: jsessionid [Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: ws_common: websphereParseSessionID: Parsing session id from &#39;/HelloHTML.jsp&#39;
[Thu Jul 07 15:59:04 2005] 00000978 00000ff4 - TRACE: ws_common: websphereParseSessionID: Failed to parse session id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查阅下面的连接获取更多有关WAS集群中会话管理的信息：&lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.nd.doc/info/ae/ae/crun_srvgrp.html&quot;&gt;http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.nd.doc/info/ae/ae/crun_srvgrp.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;problem4&quot;&gt;Problem: The application works intermittently&lt;/h4&gt;

&lt;p&gt;如果在集群环境下，系统发生定期的的反常的现象，可能是plugin有问题。&lt;/p&gt;

&lt;h5 id=&quot;section-15&quot;&gt;需要收集的数据&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Web服务器日志&lt;/li&gt;
  &lt;li&gt;plugin日志&lt;/li&gt;
  &lt;li&gt;WAS日志&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果依然不能定位问题，你需要做一个plugin trace。&lt;/p&gt;

&lt;h5 id=&quot;section-16&quot;&gt;如何检查&lt;/h5&gt;

&lt;p&gt;时好时坏的现象可能是因为plugin没有检测到集群中的某台WAS服务器已经宕机，依然把请求转发到那些主机上。&lt;/p&gt;

&lt;p&gt;如果应用服务器是宕机的（服务器进程处于停止状态），plugin没办法与它创建TCP/IP连接，也不会把请求发过去。因此在这种情况下，plugin会把这台服务器标记为宕机。&lt;/p&gt;

&lt;p&gt;但是，如果应用服务器挂起（hung），那么这台服务器依然可以接收请求，只是不能做出响应。这种情况下，plugin不会把这台服务器标记为宕机，除非从操作系统层面认为连接超时。具体超时的时间依操作系统而定，可能长达十分钟。当plugin标记这台服务器宕机之后，他还会在某些时间点再次检测这台服务器是否依然宕机，这时服务器还是可以接收请求，因此plugin会再次标记它为已启动，直到连接从操作系统层面再次超时。&lt;/p&gt;

&lt;p&gt;如果应用服务器没有挂起而是处理速度慢，当应用服务器上可用的的TCP/IP连接被用完时，plugin就无法建立新的连接了，就会标记它为宕机。&lt;/p&gt;

&lt;p&gt;如果是应用本身有问题，因为应用服务器能接收请求并且做出响应（即使是失败的响应），因此plugin不会认为应用所在的服务器宕机。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: 上面提到的所有情况下，当你直接访问应用服务器的时候都是无法获得响应的，例如：
http://servername:9080/snoop
在集群环境中，你需要单独访问每台服务器以确定哪台有问题。更多WAS排错的方法和信息请查阅此处：http://www.redbooks.ibm.com/redpapers/pdfs/redp4073.pdf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个部分所提到的问题都是跟应用服务器相关的，所以你需要解决应用服务器的问题。然而，我们可以通过修改plugin的参数去控制plugin如何响应time-out的情况，从而最大限度地减少问题造成的影响。下面介绍一下相关的参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;RetryInterval&lt;/p&gt;

    &lt;p&gt;这个参数确定在plugin标记某台服务器为宕机状态之后多久再一次检查服务器的状态。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ServerIOTimeout&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;Server&lt;/code&gt;元素中的这个ServerIOTimeout参数允许我们设定plugin发送请求到接收响应这段时间的超时时间的值，单位是秒。如果没有设定这个参数，plugin会使用阻塞I/O方式把请求写入到应用服务器，然后从应用服务器读取响应，直到这个TCP连接超时。&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;Server Name=&quot;server1&quot; ServerIOTimeout=300&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;在这个配置中，在TCP连接超时之前，plugin会等待300秒（也就是5分钟）。设置一个合理的值可以使plugin尽可能快速地把请求切换到可用的服务器上。同时也注意，应用程序处理请求的时候可能需要几分钟，如果超时时间设置得太短可能会导致plugin给客户端发送错误的响应。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Note: 运行在Solaris操作系统上的plugin会忽略ServerIOTimeout参数。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ExtendedHandshake&lt;/p&gt;

    &lt;p&gt;如果在Web服务器plugin和应用服务器之间有代理防火墙，你应该配置这个参数。这个参数强制plugin去做更广泛的检查以确定应用服务器是否宕机。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MaxConnections&lt;/p&gt;

    &lt;p&gt;这个参数限定并行发送到应用服务器的连接数，从而避免plugin发送过量的请求拖慢速度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ConnectTimeout&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;Server&lt;/code&gt;元素中的这个ConnectTimeout参数使plugin可以跟应用服务器发起一个非阻塞连接。当plugin无法连接到目标服务器因而无法确定端口是否可用的时候，非阻塞连接非常有用。&lt;/p&gt;

    &lt;p&gt;如果不设定这个参数或者设置值为0，plugin会从所在的服务器发起一个阻塞连接，这个连接的超时时间取决于操作系统，一旦超时plugin会标记那台服务器宕机。如果设置的数字大于0，plugin会等待对应的秒数。如果在这个超时时间之后，链接始终没有建立成功，plugin会标记宕机，尝试集群中的其他成员。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;&lt;em&gt;译者注：这个参数与ServerIOTimeout的区别是，这个超时时间是指建立连接的超时时间，关注点在创建连接本身的这个过程；而ServerIOTimeout是配置整个处理过程的超时时间，也就是从plugin发送请求开始算起，不管连接有没有建立起来，它只关注是否在特定的时间内收到了响应&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果可能的话，尽量使用WAS Console去配置这些参数，因为一旦重新生成插件，手工修改的参数就不存在了。我们可以用Console设置&lt;code&gt;RetryInterval&lt;/code&gt;这个参数，跳转的路径为：Web servers → webserver → Plug-in properties → Request routing，如Figure 7。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/11/figure7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其他所有的参数都得修改plugin-cfg.xml手工配置。所以每次重新生成plugin之后，记得手工修改一下。更多plugin属性的配置请参阅此链接：&lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.express.doc/info/exp/ae/rwsv_plugincfg.html&quot;&gt;http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.express.doc/info/exp/ae/rwsv_plugincfg.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;problem5&quot;&gt;Problem: Application load is not being evenly distributed&lt;/h4&gt;

&lt;p&gt;负载分部不均匀可能也是由plugin引起的。&lt;/p&gt;

&lt;h5 id=&quot;section-17&quot;&gt;需要收集的数据&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Plugin trace&lt;/li&gt;
  &lt;li&gt;Plugin日志&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;手机plugin日志即可得到trace，因为trace是写入到plugin日志中的。你需要分析trace以确定每台服务器得到多少请求。&lt;/p&gt;

&lt;h5 id=&quot;section-18&quot;&gt;如何检查&lt;/h5&gt;

&lt;p&gt;每当plugin选择一台服务器发送请求时都会在日志里写入一条类似下面这样的跟踪信息：&lt;/p&gt;

&lt;p&gt;TRACE: ws_server_group: serverGroupIncrementConnectionCount: Server servername picked, pendingConnectionCount count totalConnectionsCount count.&lt;/p&gt;

&lt;p&gt;你可以手动数一下plugin为集群里的没台应用服务器发送了多少个请求，也可以写一个脚本把日志数据转换一下，然后得到这个数量。（&lt;strong&gt;&lt;em&gt;译者注：如果是Linux系统的话，直接用&lt;code&gt;grep xxxx plugin.log | wc -l&lt;/code&gt;就可以了&lt;/em&gt;&lt;/strong&gt;）。如果发现负载分发的时候不均匀，我们需要检查一下所定义的每个集群成员的权重，查看&lt;code&gt;LoadBalanceWeight&lt;/code&gt;参数即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Server CloneID=cloneid ConnectTimeout=0 ExtendedHandshake=false
LoadBalanceWeight=3 MaxConnections=-1 Name=servername
ServerIOTimeout=0 WaitForContinue=false&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每当plugin把请求发送到某一台应用服务器，那台服务器所对应的计数器的数值会减一。计数器的初始值就是权重的数值。当一台服务器计数器的数值变为0的时候，plugin就不会再往那里转发请求了。当所有服务器的数值都变为0的时候，plugin会充值计数器的数值为权重值。权重的默认值是2。&lt;/p&gt;

&lt;p&gt;举个例子，集群里有两台服务器，server1和server2。Server1的权重是2，server2是4。Table 1展示了请求会如何发送到两台服务器上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/04/11/table1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其他参数的配置也会影响到负载均衡。举例来说，如果某台服务器上的应用运行速度比较慢，那台服务器就很容易到达&lt;code&gt;MaxConnection&lt;/code&gt;的上限，这时plugin就会停止给它发送请求。如果发生这种情况，我们可以在plugin trace里看到。&lt;/p&gt;

&lt;p&gt;会话亲缘性也可能影响到请求被分发到哪台服务器上。如果某台服务器创建了一个会话，那后续的请求当然都会发送到那台服务器上。&lt;/p&gt;

&lt;p&gt;如果每台服务器收到的请求数的比值跟权重设置的数字的比值相同，就说明plugin的负载均衡机制工作正常。这时异常的CPU占用率肯定就是由其他原因引发的了，比如服务器上的其他的异常进程，或者应用程序有问题。&lt;/p&gt;

&lt;p&gt;如果比值不同，就说明其他因素影响了负载均衡的工作。比如，某台服务器的请求数到达了&lt;code&gt;MaxConnections&lt;/code&gt;的上限，或者某台服务器被plugin标记为宕机了。&lt;/p&gt;

&lt;p&gt;如果你需要更智能的负载均衡方案，比如根据应用服务器的负载或响应时间，你可以使用其他的负载均衡产品，比如WAS Edge组件。&lt;/p&gt;

&lt;h4 id=&quot;problem6&quot;&gt;The next step&lt;/h4&gt;

&lt;p&gt;本文中提到的那些问题特征基本上涵盖了可能遇到的大部分情况，然而也有其他可能性导致问题的出现。如果看完了本文的诊断过程还是没有得到真相，强烈建议你看一下这篇WAS问题诊断的文章：http://www.redbooks.ibm.com/redpapers/pdfs/redp4073.pdf。请查看这一章：Classify the problem and determine the root cause，以确定是否问题出在其他组件上。&lt;/p&gt;

&lt;p&gt;如果你觉得肯定是plugin的问题，那就重新查看一下你收集到的所有诊断文件，查找跟问题相关但是本文有没有提到的日志记录，查阅支持网站。&lt;/p&gt;

&lt;p&gt;如果还是不能定位问题，你需要收集下面列表中提到的“MustGather”文档，然后发送这些文档给IBM进行下一步诊断。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MustGather for general problems with the Web server plug-in: &lt;/p&gt;

    &lt;p&gt;http://www-1.ibm.com/support/docview.wss?rs=180&amp;amp;uid=swg21174894&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MustGather for problems generating the plug-in configuration file:&lt;/p&gt;

    &lt;p&gt;http://www-1.ibm.com/support/docview.wss?rs=180&amp;amp;uid=swg21199421
􏰀&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MustGather for problems installing the Web server plug-in: &lt;/p&gt;

    &lt;p&gt;http://www-1.ibm.com/support/docview.wss?rs=180&amp;amp;uid=swg21199343&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;请把你已经做过的诊断过程告诉IBM的支持工程师以减少诊断问题的时间。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;全文完，接下来会继续翻译 redp4309-WebSphere Application Server V6.1Web container problem determination.pdf&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Disable RC4 Cipher for IIS/Apache/IHS</title>
   <link href="http://blog.dellyqiao.com/security/middleware/2015/04/07/disable-rc4-cipher-for-iisapacheihs"/>
   <updated>2015-04-07T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/security/middleware/2015/04/07/disable-rc4-cipher-for-iisapacheihs</id>
   <content type="html">
&lt;p&gt;最近多家安全网站曝出网站系统使用TLS安全协议时如果使用RC4 Cipher会有安全问题，如下文所述：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.imperva.com/docs/HII_Attacking_SSL_when_using_RC4.pdf&quot;&gt;http://www.imperva.com/docs/HII_Attacking_SSL_when_using_RC4.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://securityaffairs.co/wordpress/35352/hacking/bar-mitzvah-attack-on-rc4.html&quot; title=&quot;http://securityaffairs.co/wordpress/35352/hacking/bar-mitzvah-attack-on-rc4.html&quot;&gt;http://securityaffairs.co/wordpress/35352/hacking/bar-mitzvah-attack-on-rc4.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.securityweek.com/new-attack-rc4-based-ssltls-leverages-13-year-old-vulnerability&quot; title=&quot;http://www.securityweek.com/new-attack-rc4-based-ssltls-leverages-13-year-old-vulnerability&quot;&gt;http://www.securityweek.com/new-attack-rc4-based-ssltls-leverages-13-year-old-vulnerability&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于常见的Web服务器来说，要修复这个安全漏洞，需要禁用RC4 Cipher。下面列出几种服务器中禁用RC4 Cipher的方法：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;iis&quot;&gt;1) IIS&lt;/h3&gt;

&lt;p&gt;IIS服务器使用哪种安全协议，安全协议使用哪种密钥都是需要在注册表里去配置的。RC4 Cipher也不例外，在Windows Server 2003中的配置方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;How to Completely Disable RC4 
Clients and Servers that do not wish to use RC4 ciphersuites, regardless of the other party&#39;s supported ciphers, can disable the use of RC4 cipher suites completely by setting the following registry keys. In this manner any server or client that is talking to a client or server that must use RC4, can prevent a connection from happening. Clients that deploy this setting will not be able to connect to sites that require RC4 while servers that deploy this setting will not be able to service clients that must use RC4. 

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128] 
&quot;Enabled&quot;=dword:00000000
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128] 
&quot;Enabled&quot;=dword:00000000
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128] 
&quot;Enabled&quot;=dword:00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考下面链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.technet.com/b/srd/archive/2013/11/12/security-advisory-2868725-recommendation-to-disable-rc4.aspx&quot; title=&quot;http://blogs.technet.com/b/srd/archive/2013/11/12/security-advisory-2868725-recommendation-to-disable-rc4.aspx&quot;&gt;http://blogs.technet.com/b/srd/archive/2013/11/12/security-advisory-2868725-recommendation-to-disable-rc4.aspx&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ihs&quot;&gt;2) IHS&lt;/h3&gt;

&lt;p&gt;IHS即IBM HTTP Server，所有的配置都在httpd.conf中，所以修改httpd.conf就好了。&lt;/p&gt;

&lt;p&gt;默认情况下，IHS是不会启用RC4的，但是由于前几年各界都比较认可RC4，所以一般的IHS服务器都启用了RC4。想要禁用的话删掉对应的配置就好了。&lt;/p&gt;

&lt;p&gt;首先我们要找到相关的SSL的配置，并且确定哪些配置是用来启用RC4的。可能的配置是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SSLCipherSpec SSL_RSA_WITH_3DES_EDE_CBC_SHA
SSLCipherSpec SSL_RSA_WITH_RC4_128_SHA
SSLCipherSpec SSL_RSA_WITH_RC4_128_MD5
SSLCipherSpec SSL_RSA_WITH_DES_CBC_SHA
SSLCipherSpec TLS_RSA_EXPORT1024_WITH_RC4_56_SHA
SSLCipherSpec TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也有可能是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SSLCipherSpec 34
SSLCipherSpec 35
SSLCipherSpec 3A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是启用了34、35或者3A这样的类似代码一样的东西，我们如何确定哪个是跟RC4相关的呢？&lt;/p&gt;

&lt;p&gt;请参考如下链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://publib.boulder.ibm.com/httpserv/ihsdiag/ssl_questions.html#check_ssl_config&quot; title=&quot;http://publib.boulder.ibm.com/httpserv/ihsdiag/ssl_questions.html#check_ssl_config&quot;&gt;http://publib.boulder.ibm.com/httpserv/ihsdiag/ssl_questions.html#check_ssl_config&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;How can I check the end result of my SSL configuration changes to verify what prototcols and ciphers my server will use ?
In IHS 8.0 and later:

If there is a question of how your configuration customizations are ultimately combined, you can run
 apachectl -t -DDUMP_SSL_CONFIG
to see the effective values after processing the configuration.
 
Example output of the default configuration + SSLEnable is:             
                                                                        
SSL server defined at:                                                  
/home/ihs/2.2/built/conf/httpd.conf:907                       
Server name: 127.0.1.1:443                                              
SSL enabled: YES                                                        
FIPS enabled: 0                                                         
Keyfile: /home/ihs/IHSJTest/data/ihskeys/key.kdb                
Protocols enabled: SSLV2,SSLV3,TLSv10,TLSv11,TLSv12                     
Ciphers for SSLV2: (defaults)                                           
Ciphers for SSLV3: (defaults)                                           
TLS_RSA_WITH_AES_128_CBC_SHA(2F),TLS_RSA_WITH_AES_256_CBC_SHA(35b),S    
SL_RSA_WITH_RC4_128_SHA(35),SSL_RSA_WITH_RC4_128_MD5(34),SSL_RSA_WIT    
H_3DES_EDE_CBC_SHA(3A)                                                  
Ciphers for TLSv10: (defaults)                                          
TLS_RSA_WITH_AES_128_CBC_SHA(2F),TLS_RSA_WITH_AES_256_CBC_SHA(35b),S    
SL_RSA_WITH_RC4_128_SHA(35),SSL_RSA_WITH_RC4_128_MD5(34),SSL_RSA_WIT    
H_3DES_EDE_CBC_SHA(3A)                                                  
Ciphers for TLSv11: (defaults)                                          
TLS_RSA_WITH_AES_128_CBC_SHA(2F),TLS_RSA_WITH_AES_256_CBC_SHA(35b),S    
SL_RSA_WITH_RC4_128_SHA(35),SSL_RSA_WITH_RC4_128_MD5(34),SSL_RSA_WIT    
H_3DES_EDE_CBC_SHA(3A)                                                  
Ciphers for TLSv12: (defaults)                                          
TLS_RSA_WITH_AES_128_GCM_SHA256(9C),TLS_RSA_WITH_AES_256_GCM_SHA384     
(9D),TLS_RSA_WITH_AES_128_CBC_SHA256(3C),TLS_RSA_WITH_AES_256_CBC_S     
HA256(3D),TLS_RSA_WITH_AES_128_CBC_SHA(2F),TLS_RSA_WITH_AES_256_CBC     
_SHA(35b),SSL_RSA_WITH_3DES_EDE_CBC_SHA(3A) 

                            
(Note: we report SSLv2 as enabled with zero available ciphers as an     
implementation quirk)                                     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;找到启用RC4相关的&lt;code&gt;SSLCipherSpec&lt;/code&gt;之后，删除掉他们然后重启IHS服务就好了。&lt;/p&gt;

&lt;h3 id=&quot;apache&quot;&gt;3) Apache&lt;/h3&gt;

&lt;p&gt;如链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raymii.org/s/tutorials/Strong_SSL_Security_On_Apache2.html&quot; title=&quot;https://raymii.org/s/tutorials/Strong_SSL_Security_On_Apache2.html&quot;&gt;https://raymii.org/s/tutorials/Strong_SSL_Security_On_Apache2.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考这一部分：&lt;/p&gt;

&lt;p&gt;The recommended cipher suite:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SSLCipherSuite AES128+EECDH:AES128+EDH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The recommended cipher suite for backwards compatibility (IE6/WinXP):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Swift基础学习笔记</title>
   <link href="http://blog.dellyqiao.com/coding/2015/04/03/swift"/>
   <updated>2015-04-03T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/coding/2015/04/03/swift</id>
   <content type="html">
&lt;h3 id=&quot;swift&quot;&gt;Swift基础&lt;/h3&gt;

&lt;p&gt;Swift语言相当灵活，这里做了一下总结，每个特性下面直接用代码做解释。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Variables&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var languageName: String = &quot;Swift&quot;

let languageName: String = &quot;Swift&quot;  //常量，安全性和运行速度有优势，所以优先考虑。


var version = 1.0  //推导为Double类型
var version: Double = 1.0 

变量名可以使用Unicode符号，Emojo汉字都可以
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;String:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let someString = &quot;String&quot;

let components = &quot;~/Documents/ZhaoZhe&quot;.pathComponents
// [&quot;~&quot;, &quot;Documents&quot;, &quot;ZhaoZhe&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Character:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for character in &quot;Swift&quot; {
	println(character)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Combining Strings and Characters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let china = &quot;a&quot;
let video = &quot;好开心&quot;
let chineseVideo = china + video
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Building Complex Strings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let a = 3, b = 5
let mathResult = &quot;\(a) 乘以 \(b) 等于 \(a * b)&quot;
\\3 乘以 5 等于 15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;String Mutability：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = &quot;小明&quot;
a += &quot;和小红&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Array and Dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let components = &quot;~/Documents/ZhaoZhe&quot;.pathComponents
// [&quot;~&quot;, &quot;Documents&quot;, &quot;ZhaoZhe&quot;]

var names = [&quot;ming&quot;, &quot;hong&quot;, &quot;sang&quot;, &quot;four&quot;]

var numberOfLegs = [&quot;ant&quot;: 6, &quot;snake&quot;: 0, &quot;dog&quot;: 4]

var elements = Int[]()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify an Array:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var shoppingList = [&quot;松花蛋&quot;, &quot;doujiang&quot;]
println(shoppingList[0])
shoppingList += &quot;new&quot;
shoppingList += [&quot;new2&quot;, &quot;new3&quot;]
shoppingList[0] = &quot;6颗松花蛋&quot;
shoppingList[3...5] = [&quot;毛豆&quot;, &quot;黄瓜&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify a Dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var numberOfLegs = [&quot;ant&quot;: 6, &quot;snake&quot;: 0, &quot;dog&quot;: 4]
numberOfLegs[&quot;蜘蛛&quot;] = 273 //自动添加这条
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Retrieving a Value from a Dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;possibleLegCount: Int? = numberOfLegs[&quot;章鱼&quot;] //表示可能得到一个值，也可能没有值

if possibleLegCount == nil {
	println(&quot;no data&quot;)
} else {
	let legCount = possibleLegCount! //强制解包
	println(&quot;一只章鱼\(legCount)条腿&quot;)
}

等价写法：

if possibleLegCount {
	let legCount = possibleLegCount!
	println(&quot;一只章鱼\(legCount)条腿&quot;)
}

等价写法：

if let legCount = possibleLegCount {
	println(&quot;一只章鱼\(legCount)条腿&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If Stagements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if legCount == 0 {
} else if letCount == 1 {
else {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Switch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch legCount {
	case 0:
		println(&quot;000&quot;)
		break //写不写都会执行break
		
	case 1, 3, 5, 7, 9:
		println(&quot;111&quot;)
		
	case 10...100:
		println(&quot;222&quot;)
		
	default:
		println(&quot;nnn&quot;)
}

switch sender {
	case button:
		println(&quot;someone tapped button&quot;)
		
	case usernameTextField:
		println(&quot;someone tapped the text field&quot;)
		
	default:
		println(&quot;tapped something else&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loops:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while !winCheck() {
	next()

}

for var i = 1; i&amp;lt;=10; ++i {
}

for number in 1...5 {
	//表示1~5所有值，如果是1..5就是1234，不包含5
}

var numberOfLegs = [&quot;ant&quot;: 6, &quot;snake&quot;: 0, &quot;dog&quot;: 4]
for (animalName, legCount) in numberOfLegs {
	println(&quot;一只\(animalName)\(legCount)条腿&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func sayHello() {
	println(&quot;Hello&quot;)
}

sayHello()

func sayHello(name: String = &quot;路人甲&quot;) {
	println(&quot;\(name) 你好&quot;)
}
sayHello() or sayHello(name: &quot;zhaozhe&quot;)


func buildGreeting(name: String = &quot;lurenjia&quot;) -&amp;gt; String {
	return name + &quot;Hello&quot;
}
let greeting = buildGreeting()

//Return Multiple Values
func refreshWebPage() -&amp;gt; (Int, String) {
	return (200, &quot;Success&quot;)
}
let (statusCode, message) = refreshWebPage()

等价写法：

func refreshWebPage() -&amp;gt; (code: Int, message: String) {
	return (200, &quot;Success&quot;)
}
let status = refreshWebPage()
println(&quot;Received \(status.code): \(status.message)&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tuples (元组)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//类似于没有名字的结构体
(2.79, 3.99, 4.19)
(404, &quot;Not Found&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Closures: 闭包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let greetingPrinter = {
	println(&quot;Hello World!&quot;)
}

等价写法：

let greetingPrinter: () -&amp;gt; () = {
	println(&quot;Hello World!&quot;)
}

greetingPrinter()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Closure as Parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func repeat(count: Int, task: () -&amp;gt; ()) {
	for i in 0..count {
		task()
	}
}

repeat(2, {
	println(&quot;Hello!&quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trailing Closures: 依附式闭包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repeat(2) {
	println(&quot;Hello!&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Vehicle {
	// properties
	// methods
	// initializers
	
	var numberOfWheels = 0 //Stored Properties
	//此处必须设置初始值，或者声明时加?
	
	//Computed Properties
	var description: String {
		get { //get属性是默认的，不写这个声明也可以
			return &quot;\(numberOfWheels)个轮子&quot;
		}
		set {
			//在这里可以通过newValue变量访问新值
		}
	}
}

let someVehicle = Vehicle()
someVehicle.numberOfWheels = 2
println(someVehicle.description)

	

class Bicycle: Vehicle {
	init() {
		super.init() //这个不是必要的，子类初始化与父类无关
		numberOfWheels = 2
	}
}
let myBicycle = Bicycle()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Overriding a Property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Car: Vehicle {
	var speed = 0.0
	init() {
		numberOfWheels = 4
	}
	override var description: String {
		return super.description + &quot;, 每小时 \(speed) 英里&quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Property Observers: 属性观察&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ParentsCar: Car {
	override var speed: Double {
		willSet {
			//这里可以通过newValue变量访问新值
			if newValue &amp;gt; 65.0 {
				println(&quot;请小心&quot;)
			}
		}
		didSet {
			//在这里可以通过oldValue变量访问旧值
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Conter {
	var count = 0
	func increment(amount: Int) {
		count += amount
	}
	func resetToCount(count: Int) {
		self.count = count
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Structures in Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Point {
	var x, y: Double
}
struct Size {
	var width, height: Double
}
struct Rect {
	var origin: Point
	var size: Size
	
	var area: Double {
		return size.width * size.height
	}
	
	func isBiggerThanRect(other: Rect) -&amp;gt; Bool {
		return self.area &amp;gt; other.area
	}
}


var point = Point(x: 0.0, y: 0.0)
var size = Size(width: 640.0, height: 480.0)
var rect = Rect(origin: point, size: size)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Structures and Classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct不可继承，class可以

struct在传输的时候是值传递，会复制整个值。class对象是引用传递，传递的是对象的引用
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Constants and Variables: Reference Types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let window = Window(frame: frame)  //Window是类
window.title = &quot;Hello!&quot; //这么做是可以的，因为window是个引用，即时是常量的引用也可以修改对象内的值
 
window = Window(frame: frame) //这样不可以
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Constants and Variables: Value Types&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let point1 = Point(x: 0.0, y: 0.0)  //Point是结构体

point1.x = 5  //不可以这样做
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mutating a Structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Point {
	var x, y: Double
	
	mutating func moveToTheRightBy(dx: Double) { //mutating是在涉及到修改struct内部变量时必须的
		x += dx
	}
}

let point = Point(x: 0.0, y: 0.0)
point.moveToTheRightBy(200.0)  //错误！！！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enumerations: 枚举&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum Day: Int {
	case Monday = 1
	case Tuesday = 2
	case Wdnesday = 3, Thursday = 4
}

等价写法：

enum Day: Int {
	case Monday = 1, Tuesday, Wednesday, Thursday
}

let day = Day.thursday	//推导为枚举Day类型
//day 是 Thursday

let dayNumber = Day.Thursday.toRow() //推导为其内部存储Int类型
//dayNumber 是 4


enum Direction {
	case North, South, East, West
}
var direction = Direction.West
direction = .East

let lable = UILable()
lable.textAlignment = .Right
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enumerations: Associated Values&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum TrainStatus {
	case OnTime, Delayed(Int)
	init() {
		self = OnTime
	}
	var description: String {
		switch self {
			case OnTime:
				return &quot;准时到达&quot;
			case Delayed(let minutes):
				return &quot;延误 \(minutes) 分钟&quot;
			default:
				return &quot;准时到达“”
		}
	}
}

var status = .Delayed(42)
println(status.description)
//延误 42 分钟
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nested Types: 类型嵌套&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Train {
	enum Status {
		case ......
		......
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extensions: 扩展&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Size {
	mutating func increaseByFactor(factor: Int) {
		width *= factor
		height *= factor
	}
}

extension Int {
	func repetitions(task: () -&amp;gt; ()) {
		for i in 0..self {
			task()
		}
	}
}

500.repetitions({
	println(&quot;赵哲&quot;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generic: 泛型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Stack&amp;lt;T&amp;gt; {
	var elements = T[]()
	
	mutating func push(element: T) {
		elements.append(element)
	}
	
	mutating func pop() -&amp;gt; T {
		return elements.removeLast()
	}
}

var stringStack = Stack&amp;lt;String&amp;gt;()
stringStack.push(&quot;Hello&quot;)
println(stringStack.pop())
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>ITIL Learning Note</title>
   <link href="http://blog.dellyqiao.com/management/2015/03/22/ITIL-Learning-Note"/>
   <updated>2015-03-22T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/management/2015/03/22/ITIL-Learning-Note</id>
   <content type="html">&lt;p&gt;IT Infrastructure Library or ITIL is a framework that provides structure and best practice guidelines for implementing and maintaining IT Service Management.&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;## ITIL Service Life Cycle ##&lt;/p&gt;

&lt;p&gt;The core of the ITIL framework is the ITIL Service Life Cycle. It provides a comprehensive approach to the various aspects of Service Management.&lt;/p&gt;

&lt;p&gt;The ITIL Service Life Cycle has various components. Applying these components ensures that Service Management processes are efficient and effective. It also ensures there’s a balance between a strong, stable structure and an environment that can improve and adapt to business needs.&lt;/p&gt;

&lt;p&gt;The ITIL Service Life Cycle provides a structure that enables you to organize information and processes into an interconnected framework.&lt;/p&gt;

&lt;p&gt;Without this structure, you would have no way of determining the relative importance of information items or the connections between them.&lt;/p&gt;

&lt;p&gt;The ITIL Service Life Cycle also provides guidelines to help understand the structure and the connection between processes and components. It helps determine how changes in an area can affect the whole system or part of it.&lt;/p&gt;

&lt;p&gt;You can use the structure to determine patterns of behavior that lead to the occurrence of events. Then you can control or change these events by simply changing the structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;structure
|
patterns of behavior
|
events
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ITIL Service Life Cycle contains five key stages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Service Strategy&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;In the Service Strategy stage, you determine the underlying principles used for developing the policies, objectives, guidelines, and processes required throughout the Service Life Cycle. You also identify business opportunities.
Service Strategy is a critical stage of the Service Life Cycle because the decisions made in this stage impact all subsequent stages.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Service Design&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Service Design is the stage in which the required service is designed and developed. The design created in this stage encompasses all aspects of the service and is based on the principles identified in the Service Strategy stage.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Service transition&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;In the Service Transition stage, you create the framework to ensure that the designed service is effectively and efficiently implemented in the live environment.
This stage includes determining risks, constraints, and whether the service will meet business requirement. This ensures that actual performance matches expected performance.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Service Operation&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;During the Service Operation stage, you perform all activities and processes required to run services effectively. The Service Operation stage ensures that the framework developed in the Service Transition stage is implemented.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Continual Service Improvement&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The Continual Service Improvement or CSI stage is an overarching stage for maintaining service quality. You use the CSI stage to improve the effectiveness and efficiency of the processes involved in every other stage of the ITIL Service Life Cycle.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each stage of the ITIL Service Life Cycle is represented by a volume in the ITIL Core Library. Together, these volumes provide an integrated approach to Service Management throughout the ITIL Service Life Cycle.&lt;/p&gt;

&lt;p&gt;Each volume of the ITIL Core Library provides guidance on each of the five ITIL Service Life Cycle stages.&lt;/p&gt;

&lt;h3 id=&quot;service-strategy&quot;&gt;Service Strategy&lt;/h3&gt;

&lt;p&gt;Organizations can use the Service Strategy volume to develop strategic objective and assess costs and risks. This volume is a guide on how to develop Service Management as a strategic asset.&lt;/p&gt;

&lt;p&gt;Guidance is provided across a wide range of expertise, including marketing management, finance, information systems, system dynamics, and industrial engineering.&lt;/p&gt;

&lt;h3 id=&quot;service-design&quot;&gt;Service Design&lt;/h3&gt;

&lt;p&gt;The Service Design volume is a guide to assist the development and design of a service and the Service Management process. This volume describes design principles that convert strategic objectives into a workable service or a portfolio of services.&lt;/p&gt;

&lt;p&gt;This volume can be used to create a new service or improve an existing service.&lt;/p&gt;

&lt;h3 id=&quot;service-transition&quot;&gt;Service Transition&lt;/h3&gt;

&lt;p&gt;Using the Service Transition volume, you can create a framework that ensures a smooth transition between Service Design and Service Operation. This volume includes guidelines for assessing and controlling risks and managing changes to reduce the chance of unexpected results, failures, or setbacks.&lt;/p&gt;

&lt;h3 id=&quot;service-operation&quot;&gt;Service Operation&lt;/h3&gt;

&lt;p&gt;You can use the Service Operation volume for guidance on managing service delivery and operations to meet strategic objectives.&lt;/p&gt;

&lt;p&gt;The volume provides best practices, methods, and tools to control operations proactively and reactively. It also contains guidelines for maintaining stability while allowing for necessary improvement and change to design, scale, or service levels. This volume provides service owners and providers with ideas and direction on fixing problems and handling demand.&lt;/p&gt;

&lt;h3 id=&quot;continual-service-improvement&quot;&gt;Continual Service Improvement&lt;/h3&gt;

&lt;p&gt;As an overall guide, the &lt;em&gt;Continual Service Improvement&lt;/em&gt; volume provides guidance for continual maintenance. It also provides guidelines for improving quality of service, creating value for customers, and achieving operational efficiency.&lt;/p&gt;

&lt;p&gt;This volume is applicable across the ITIL Service Life Cycle and provides guidance for improvement in service strategy, design, transition, and operations.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To archive organization goals and objectives through ITIL Service Life Cycle stages, you need to understand these core concepts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Processes&lt;/li&gt;
  &lt;li&gt;Functions&lt;/li&gt;
  &lt;li&gt;Feedback&lt;/li&gt;
  &lt;li&gt;Specialization and coordination&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>WebSphere应用服务器学习笔记</title>
   <link href="http://blog.dellyqiao.com/middleware/2015/03/21/WebSphere-Learning-Notes"/>
   <updated>2015-03-21T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2015/03/21/WebSphere-Learning-Notes</id>
   <content type="html">&lt;p&gt;WebSphere是应用程序服务器，是电子商务基础结构的核心。WebSphere服务器支持J2EE规范。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;websphere&quot;&gt;Websphere的架构&lt;/h2&gt;

&lt;p&gt;Websphere采用三层架构来平衡工作负载，病最大化对资源的访问，从而提高了吞吐量和性能。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;表示层&lt;/strong&gt;：支持网络上的客户端计算机，向其展示信息，并且处理用户操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;应用程序逻辑层&lt;/strong&gt;：包含用于管理连接和处理数据的应用程序组建，包括servlet，EJB组建，applet等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;资源层&lt;/strong&gt;：包含数据库和其他数据存储设备。该层中的服务位于安全网络中，客户端不能直接访问。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;websphere-1&quot;&gt;Websphere的组件&lt;/h2&gt;

&lt;p&gt;WAS包含多个组件，每个组件都向平台提供特定的功能：&lt;/p&gt;

&lt;h3 id=&quot;ejb&quot;&gt;EJB容器&lt;/h3&gt;

&lt;p&gt;安装在服务器上的EJB不直接与应用程序服务器交互。EJB容器就是服务器与EJB之间的接口。这是支持线程、事务处理和数据管理的服务器进程，处理进入和出自EJB的所有请求。&lt;/p&gt;

&lt;h3 id=&quot;web&quot;&gt;WEB容器&lt;/h3&gt;

&lt;p&gt;WEB容器支持用于处理HTTP客户端请求的servlet和JSP文件，然后向其他应用程序组件提供数据，必要时还生成XML。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;应用程序客户端容器&lt;/h3&gt;

&lt;p&gt;处理客户端一侧的Java程序，管理与应用服务器上承载的J2EE组件之间的交互，并在客户机上配置器执行环境。&lt;/p&gt;

&lt;h3 id=&quot;applet&quot;&gt;Applet容器&lt;/h3&gt;

&lt;p&gt;WEB服务器可以把生成WEB页时涉及的某些处理负荷转移到客户端，这是通过与普通HTML一起向其发送Java applet来实现的。这些applet是在客户端浏览器中运行的Java类，在客户端机器上安装的applet通过applet容器可以访问应用程序服务器上的EJB。&lt;/p&gt;

&lt;h3 id=&quot;http&quot;&gt;嵌入式HTTP服务器&lt;/h3&gt;

&lt;p&gt;WEB客户端通过HTTP服务器上的HTTP插件连接到应用程序服务器。嵌入式HTTP服务器是提供替代方案的Websphere内部组件，它使得客户端可以直接连接到应用程序服务器。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;虚拟主机&lt;/h3&gt;

&lt;p&gt;在多台机器上运行Websphere的优点之一是可以隔离数据，使得只有同一台机器上安装的资源才能访问。你可以通过创建虚拟主机在一台机器上复制该功能，也就是说，让一台机器看起来仿佛是多台机器在运行。这样就可以限制对数据的访问，在虚拟机上运行具有自定义配置的应用程序。&lt;/p&gt;

&lt;h2 id=&quot;j2ee&quot;&gt;J2EE功能&lt;/h2&gt;

&lt;p&gt;Java 2 Enterprise Edition平台是在开发和部署企业应用程序中使用的一项标准。它也为J2EE应用程序提供运行库环境。&lt;/p&gt;

&lt;h3 id=&quot;j2ee-1&quot;&gt;J2EE标准定义的架构包含&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;开发多层应用程序的标准应用程序模型&lt;/li&gt;
  &lt;li&gt;承载应用程序的标准平台&lt;/li&gt;
  &lt;li&gt;保证达到J2EE标准的兼容性测试套件&lt;/li&gt;
  &lt;li&gt;提供J2EE平台运行定义的引用实现&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;j2eej2ee&quot;&gt;J2EE平台规范为J2EE应用程序定义运行库环境，包括：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;应用程序组件&lt;/li&gt;
  &lt;li&gt;容器&lt;/li&gt;
  &lt;li&gt;资源管理器驱动程序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些元素与一组也是由J2EE标准规定的标准设备进行通信。&lt;/p&gt;

&lt;h3 id=&quot;j2ee-2&quot;&gt;J2EE平台定义在应用程序开发和部署期间执行的一系列角色。理解这些角色可以更有效的开发和部署应用程序。&lt;/h3&gt;

&lt;p&gt;产品提供商 &amp;amp; 工具提供商 –》 产品&lt;/p&gt;

&lt;p&gt;应用程序组件提供商 &amp;amp; 应用程序汇编器 –》 应用程序&lt;/p&gt;

&lt;p&gt;部署者 &amp;amp; 系统管理员 –》 运行库&lt;/p&gt;

&lt;h3 id=&quot;j2ee-3&quot;&gt;在J2EE架构中部署应用程序有多项优点：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;简化的结构&lt;/strong&gt;：因为J2EE规范是以标准的Java组件和服务为基础的，所以企业应用程序只需编写一次，在任何地方都可以运行。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;选择工具&lt;/strong&gt;：开发人员可以从一系列应用程序开发工具和现成的组件和解决方案中选择。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;集成服务&lt;/strong&gt;：你可以把J2EE应用程序与当前多种系统集成到一起，包括Java数据库互联（JDBC）、Java消息服务（JMS）、Java接口定义语言（Java Interface Definition Language，Java IDL）和JavaMail及Java事务处理API。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;缩放能力&lt;/strong&gt;：例如，你可以向上扩展J2EE架构来满足需求，把容器在多个系统上分布并使用数据库连接池。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：应用程序组件安全机制是统一而灵活的，你可以把它与集成安全系统集成到一起。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;j2ee-4&quot;&gt;J2EE编程模型有四种类型的应用程序组件，每种都在应用程序服务器中不同类型的容器内。&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;EJB （在EJB容器中）&lt;/li&gt;
  &lt;li&gt;servlet和JSP页面文件 （在WEB容器中）&lt;/li&gt;
  &lt;li&gt;应用程序客户端 （在应用程序客户端容器中）&lt;/li&gt;
  &lt;li&gt;applet （在applet容器中）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每种类型的组件都有自己的容器。容器能够位组件提供运行库支持，为访问服务提供API，还能够处理安全机制、资源共享和其他问题。&lt;/p&gt;

&lt;h3 id=&quot;j2ee-5&quot;&gt;J2EE平台为实现组件之间的交互而提供了一组标准服务&lt;/h3&gt;

&lt;p&gt;其中包括HTTP和HTTPS、Java事务处理API和远程方法调用/Internet ORB间协议（Remote Method Invocation/Internet Inter-ORB Protocol, RMI/IIOP）。&lt;/p&gt;

&lt;h3 id=&quot;j2ee-6&quot;&gt;J2EE平台的一项重要特点是它打包应用程序进行部署的方式。&lt;/h3&gt;

&lt;p&gt;它把组件汇编到模块中，然后打包到应用程序。叫做部署描述符的XML文件控制每个模块和应用程序的部署&lt;/p&gt;

&lt;h3 id=&quot;ejb-1&quot;&gt;应用程序和EJB的新功能&lt;/h3&gt;

&lt;p&gt;WebSphere包含针对应用程序和EJB模块的新功能。EJB持久化管理器支持EJB2.0容器管理的持久化（container-managed persistence，CMP）方案，这与EJB1.1方案不同，这是对模块性、易维护性和性能的进一步完善。&lt;/p&gt;

&lt;p&gt;EJB2.0的规范支持包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本地、远程和消息驱动的Bean&lt;/li&gt;
  &lt;li&gt;容器管理的关系和关联关系&lt;/li&gt;
  &lt;li&gt;便携式查找着查询语言&lt;/li&gt;
  &lt;li&gt;编程模式&lt;/li&gt;
  &lt;li&gt;抽象和具体实体bean&lt;/li&gt;
  &lt;li&gt;本地家庭和本地实体接口&lt;/li&gt;
  &lt;li&gt;EJB查询语言&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WebSphere5.0中提供的超过EJB2.0规范的高性能的持久化功能包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;修改语义行为&lt;/li&gt;
  &lt;li&gt;实体bean的集成&lt;/li&gt;
  &lt;li&gt;乐观的并发控制&lt;/li&gt;
  &lt;li&gt;提前读取&lt;/li&gt;
  &lt;li&gt;密切的机制支持&lt;/li&gt;
  &lt;li&gt;后端访问支持&lt;/li&gt;
  &lt;li&gt;SQL&lt;/li&gt;
  &lt;li&gt;数据高速缓冲&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在WebSphere中完善CMP实体bean性能的新功能包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bean数据高速缓存&lt;/li&gt;
  &lt;li&gt;长生存期高速缓冲&lt;/li&gt;
  &lt;li&gt;乐观的并发控制&lt;/li&gt;
  &lt;li&gt;提前读取&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;活动对话是WebSphere企业版的一项新功能，用户可以通过该对话把事务处理分组到个工作单位。你可以在各种属性和配置与活动对话之间建立关联。&lt;/p&gt;

&lt;p&gt;CMP bean和bean管理的持久化（bean-managed persistence，BMP）bean可以通过共享数据存储连接在同一事务处理中访问数据。&lt;/p&gt;

&lt;p&gt;CMP bean之间可以互相集成，或互为子集。在关系数据存储中，可以在单张表格或根叶布局中定义。应用程序服务器在部署时认可继承。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;websphere-2&quot;&gt;确定WebSphere平台基础结构&lt;/h2&gt;

&lt;h3 id=&quot;base&quot;&gt;Base版&lt;/h3&gt;

&lt;p&gt;在基本版本的运行库架构中有多个组件，与管理相关的组件包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;节点&lt;/strong&gt;：WebSphere管理的服务器进程的逻辑安排，这些进程工作在公共配置和运行功能之外。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;配置存储库&lt;/strong&gt;：配置库在XML文件中保存每个组件配置文档的副本。应用程序服务器的管理服务管理配置，并保证运行期间的连贯性。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;虚拟主机&lt;/strong&gt;：通过虚拟主机可以把独立的一台主机当做多台主机使用。采用这项技术，一台物理机器可以支持一系列的唯一配置并管理的应用程序。虚拟主机不连接到特定节点上。是可以被创建但不能被启动和停止的组件。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;管理服务&lt;/strong&gt;：管理服务运行在每台服务器JVM上，也运行在基本配置的应用程序服务器中。管理服务提供一些关键功能，这些功能可以操纵用于服务器及其组件的配置数据。配置在存储库中保存，也就是在服务器文件系统中保存一组XML文件。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;会话数据库&lt;/strong&gt;：会话详细资料可以保存在中央会话数据库中，保证多用户环境下的会话持久化。承载特定应用程序的多个应用程序服务器共享数据库信息来运行状态组件的会话状态。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;脚本客户端&lt;/strong&gt;：脚本客户端wsadmin增强对基于WEB的管理控制台的调节。这样管理员就可以使用命令行接口了。脚本客户端使用脚本帮助自动完成对多台应用服务器和节点的管理。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;应用服务器是WebSphere的主要组件。他是在JVM上运行的，为应用程序代码提供运行库环境。&lt;/p&gt;

&lt;p&gt;应用程序服务器包含执行特定Java应用程序组件的容器。应用程序服务器有三个容器：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;WEB容器&lt;/strong&gt;：WEB容器处理servlet和JSP文件。它默认有一个会话管理器，在处理servlet时创建请求对象和响应对象。然后它访问servlet服务的方法。WEB容器处理嵌入式HTTP服务器、外部WEB服务器插件或WEB浏览器的HTTP请求。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;EJB容器&lt;/strong&gt;：EJB容器为EJB提供运行库服务，处理对会话和实体bean的请求。企业bean位于EJB模块中。加载在应用服务器上的bean不直接与服务器交互。EJB容器提供EJB与服务器之间的接口。容器和服务器提供bean运行库环境。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JCA容器&lt;/strong&gt;：Java连接器结构（Java Connector Architecture，JCA）容器是WAS提供的组件。可以把从EIS提供商处购买的JCA资源适配器查到Java连接器结构上，用兼容JCA的应用程序来配置和使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;嵌入式WebSphere JMS提供者依靠JMS服务器来实现集成的消息传递功能。它适合点到点和发布/注册类型的消息传递，是事务处理管理服务的一部分。JMS服务器支持消息驱动的bean以及WebSphere单元中的消息传递。在Base版本中，JMS服务器在与应用服务器相同的JVM中运行。&lt;/p&gt;

&lt;p&gt;应用程序服务器JVM拥有名称服务，它提供Java命名和目录接口（JNDI）名称空间。该服务注册应用程序服务器所承载的所有EJB和J2EE资源（JMS、J2C、JDBC、URL和JavaMail）&lt;/p&gt;

&lt;p&gt;应用程序服务器JVM也承载依赖配置库中安全设置的安全服务，以提供验证和授权功能。&lt;/p&gt;

&lt;p&gt;在讨论WAS Base中，需要考虑有关应用程序的三个基本组件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;客户端应用程序容器&lt;/strong&gt;：是在客户端计算机上单独安装的组件。它使客户端能够在与EJB兼容的J2EE环境中运行应用程序。可以用可执行的命令行工具（launchClient）来启动客户端应用程序及其客户端容器运行库。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;应用程序&lt;/strong&gt;：是唯一设计的，是由应用程序服务器承载并运行的。应用程序在存储到企业应用程序档案（EAR）之后，可以有一个或多个应用程序服务器共享应用程序。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;应用程序数据库&lt;/strong&gt;：是在一个企业系统中的数据库服务器上运行的，在那里，堕胎应用程序服务器可以共享同一数据库。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WAS Base版包含若干个基于WEB的或与WEB相关的组件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;WEB服务器和WEB服务器插件&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;嵌入式HTTP服务器&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WEB管理控制台和应用程序&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WEB服务引擎&lt;/strong&gt;：WEB服务引擎不能作为单独的物理组件存在。应用程序服务器为附加服务引进了一系列的API。WEB服务是作为配合J2EE应用程序的一组API提供的。WebSphere WEB服务引擎是机遇AXIS的，使用SOAP、WSDL、UDDL和WSIF规范。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nd&quot;&gt;ND版&lt;/h3&gt;

&lt;p&gt;WAS ND配置支持多个节点，每个节点都有一个节点代理组件和多个应用程序服务器。都是在叫做单元的管理单元中运行的，单元在Deployment Manager中。你可以用Network Deployment单元配置负载平衡的应用程序服务器集群。DM管理单元中组件的配置和应用程序二进制文件都被分配给每个节点上的本地副本。&lt;/p&gt;

&lt;p&gt;ND运行库结构包含多个组件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;单元&lt;/strong&gt;：单元是管理域中节点的集合。为了进行配置，每个节点都有名称。单元住配置库保存单元中每个节点的配置和应用程序二进制文件。存储库是通过DM管理的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deployment Manager&lt;/strong&gt;：DM组件是管理单元所有部分的唯一位置。DM承载基于WEB的管理控制台应用程序。它负责每个节点的存储库内容（配置和应用程序二进制文件）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;主配置库&lt;/strong&gt;：主配置库保存单元的配置数据。DM执行对它的更新。每个节点的配置库是主库的同步子集。节点库针对应用程序服务器的访问是只读的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;节点代理&lt;/strong&gt;：节点代理是执行下列功能的管理组件：文件传输服务、配置同步和性能监控。节点代理通过与DM的交互管理可管理的组件。节点代理配置同步化，位DM执行管理操作。它还与应用程序服务器和JMS服务器交互来管理每台服务器并更新其配置和应用程序二进制文件。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UDDI注册表&lt;/strong&gt;：WAS提供专用的UDDI注册表，这样企业就可以在组织内管理其自身的WEB服务了。也可以向其他组织或企业提供代理服务。管理员把UDDI注册表作为符合J2EE规范的WEB应用安装到利用起服务的没太应用程序服务器上。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WEB服务网关是在WEB服务调用期间链接Internet和企业内部网的中间组件。它管理：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WEB服务&lt;/li&gt;
  &lt;li&gt;WEB服务触发的过滤器&lt;/li&gt;
  &lt;li&gt;承载进出WEB服务的请求的通道&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对在其中可以注册WEB服务的UDDI注册表的引用&lt;/p&gt;

    &lt;p&gt;网关运行在WEB服务定义语言（WSDL）和WEB服务调用框架（WSIF）智商，以进行部署和调用。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edge组件是承载WEB易访问的内容并提供Internet访问的一种有效而经济的方式。该软件一般是在邻近企业内部网和Internet之间边界的机器上运行的。Edge组件包含告诉缓冲代理器和负载平衡器，它们帮助管理员提高服务级别，以便具有访问权限的内部和外部用户能够更好地访问企业服务器计算机上的文档。&lt;/p&gt;

&lt;p&gt;集群是为工作负载平衡而设计的应用程序服务器进程的逻辑排列。构成集群一部分的应用程序服务器是该集群的成员，在其上应部署相同的应用程序组件。不要求集群成员共享任何配置数据。&lt;/p&gt;

&lt;p&gt;集群成员可以位于一个节点上（垂直群集），可以在多个节点上（水平群集），也可以是两种类型的混合。&lt;/p&gt;

&lt;p&gt;被管理的服务器或被管理的进程是指构成WebSphere产品组件的所有系统进程。所有服务器都在管理域中占有一席之地。JMX支持是所有被管理进程的一部分。这些进程能够接收管理命令，在这些进程内分布有关被管理资源条件的管理信息。&lt;/p&gt;

&lt;p&gt;WebSphere提供多项被管理的服务器或进程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Deployment Manager（ND）&lt;/p&gt;

    &lt;p&gt;Deployment Manager是一个单元的所有配置信息和控制的单个访问点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;节点代理（ND）&lt;/p&gt;

    &lt;p&gt;节点代理聚集并管理节点上所有WebSphere管理进程。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用程序服务器（Base and ND）&lt;/p&gt;

    &lt;p&gt;应用程序服务器是承载J2EE应用程序的托管服务器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JMS服务器（ND）&lt;/p&gt;

    &lt;p&gt;JMS服务器是为节点承载嵌入式消息传递服务的托管服务器&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;websphere-3&quot;&gt;WebSphere组件共存&lt;/h3&gt;

&lt;p&gt;ND为实现多个WAS安装在一台机器上的共存而支持一系列的场景。&lt;/p&gt;

&lt;h4 id=&quot;was&quot;&gt;多个WAS实例&lt;/h4&gt;

&lt;p&gt;WAS在一台机器上支持两种特定类型的运行库实例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;应用程序服务器，是WAS一个安装版本的多个实例。&lt;/li&gt;
  &lt;li&gt;DM，是ND的一个安装版本的多个实例&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-2&quot;&gt;来自单一安装版本的多个服务器实例&lt;/h4&gt;

&lt;p&gt;WebSphere支持采用一个安装版本运行多个数据库实例。例如，你可以从一个WAS安装版本中开发并运行多个WAS实例。你也可以从独立的ND安装版本中创建并运行多个DM。&lt;/p&gt;

&lt;p&gt;可以为耽搁ND安装版本配置多个DM，但是这些DM不能提供相互的故障转换，也不支持群集。&lt;/p&gt;

&lt;h4 id=&quot;wasnd&quot;&gt;WAS和ND共存&lt;/h4&gt;

&lt;p&gt;你可以在与WAS相同的机器上安装ND软件。这样做有明显的优点。例如，你不需要专门的机器来承载单元DM和它的主单元存储库。这还能够重新使用为节点机器提供的当前备份工具。&lt;/p&gt;

&lt;p&gt;但这样做也有缺点，如果WAS或DM出现了任何问题，则需要重建节点，需要重新部署其他组件。&lt;/p&gt;

&lt;h4 id=&quot;webweb&quot;&gt;单个Web服务器与多个Web服务器&lt;/h4&gt;

&lt;p&gt;除了多个实例以外，当独立机器上有多个应用程序服务器共存时WAS提供Web服务器选项。这些选项包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在一台机器上共享多个版本的应用程序服务器的一台Web服务器&lt;/li&gt;
  &lt;li&gt;用于WAS的多个实例的一台Web服务器&lt;/li&gt;
  &lt;li&gt;在运行WAS多个实例时用于每个应用服务器实例的独立Web服务器&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;websphere-4&quot;&gt;Websphere拓扑结构考虑因素&lt;/h2&gt;

&lt;p&gt;在为Websphere不熟选择合适的拓扑结构或配置是，有七个重要因素需要考虑：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;可用性&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;拓扑结构需要有合适的进程冗余，以避免单个故障点，从而最大化系统可用性。水平缩放、垂直缩放和IP喷射器都可以提高可用性。通过在多台机器上共享关键功能，WAS ND可以管理可用性。&lt;/p&gt;

    &lt;p&gt;结合这五中方法可以创建高度可用的系统：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;硬件和进程冗余度&lt;/p&gt;

        &lt;p&gt;通过硬件和进程冗余度可以消除单故障点。采用水平缩放可在多台物理机器上分布应用程序服务器。针对数据库、IP喷射器和Web服务器可以采用备份服务器。你可以在多个单元中部署应用程序。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;进程隔离&lt;/p&gt;

        &lt;p&gt;进程隔离保证了发生故障的服务器不影响配置中正常工作的服务器。多种配置都可以构成进程隔离元素。从应用程序服务器向其他一台不同机器部署Web服务器，可以保证应用程序服务器的问题不影响Web服务器。&lt;/p&gt;

        &lt;p&gt;采用水平缩放可以把应用程序服务器进程隔离到不同机器上。在多个单元中发布应用程序可以保证任何问题都被局限在受影响的一个或多个单元中。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;负载平衡&lt;/p&gt;

        &lt;p&gt;采用负载平衡技术保证了客户端请求不淹没每台服务器。可以采用的技术包括使用IP喷射器把请求散步道配置中的Web服务器上，把高交通量URL的请求转发到更强大的服务器上。ND中的Edge组件都具有这些功能。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;故障转移支持&lt;/p&gt;

        &lt;p&gt;应用程序在服务器被停止或重新启动时继续处理客户端请求。你可以通过水平缩放和工作量管理支持故障转移，或采用HTTP传输共享客户端堆应用程序服务器的请求。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;基于硬件的高度可用性&lt;/p&gt;

        &lt;p&gt;配置WebSphere与机遇硬件的高可用性产品（例如Sun Cluster或HACMP）一起工作没有多少优点。基于硬件的HA解决方案有益的唯一情形是当WebSphere作为分布式事务处理的协调者。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;易维护性&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;易维护性是指更新系统硬件和软件的内在考虑因素。易维护性可能与其他拓扑结构考虑因素发生冲突，导致通过量、性能和可用性方面的缺点。在决定拓扑结构采用垂直或水平缩放级之前需要考虑硬件升级。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;性能是指为事务处理服务取得尽可能快的响应时间。提高性能一般采用两种技术：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;垂直缩放，是指提供软件/应用程序服务器在多台JVM进程上的故障转移和负载平衡，这样管理员就可以查看当前的应用程序服务器是否出现性能障碍了。&lt;/li&gt;
      &lt;li&gt;水平缩放，是指在多台物理机器上创建另外的应用服务器进程，控制每台机器的附加处理能力，支持硬件故障转移，管理员可以吧实现成本分配到多台物理机器上。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;所建议的安全配置是采用两个防火墙创建安全区（demilitarized zone，DMZ）。DMZ中的信息皆有Internet和DMZ之间的过滤协议而受到某种程度的保护。Web服务器可以拦截请求并引导其通过下一个防火墙。&lt;/p&gt;

    &lt;p&gt;易受攻击的应用程序和事务数据元素存在于第二个防火墙之后的空间中，通过IP地址或域来过滤。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;会话管理&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;HTTP客户端请求之间的会话状态维护是在选择拓扑结构时的主要考虑因素。在ND中，在应用程序服务器进程之间共享会话有两种不同的功能：数据持久性和内存到内存复制。&lt;/p&gt;

    &lt;p&gt;数据库持久性是指会话数据被保存到所有应用程序服务器都可以访问的数据库中。&lt;/p&gt;

    &lt;p&gt;内存到内存复制是指在单个应用程序服务器JVM的内存之间复制会话数据。WebSphere内部消息传递是JMS发布/订阅机制，保证了在JVM进程之间复制会话。他是通过平衡WAS所提供的内部JMS提供者实现的，所以数据库产品并不是保证持久性所必需的。&lt;/p&gt;

    &lt;p&gt;犹豫WAS实现了高性能消息传递，所以内存到内存复制更为迅速。它只在ND环境中可用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;缩放能力&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;你可以配置多台机器来提高处理能力，增强安全性，最大化可用性，并平衡工作量。&lt;/p&gt;

    &lt;p&gt;通过三个组件实现配置缩放能力：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;WAS集群支持&lt;/p&gt;

        &lt;p&gt;通过集群可以开发服务器的逻辑群，他承载并运行相同的一个或多个应用程序。你可以在相同的机器（垂直缩放）或在多台机器（水平缩放）上安放集群。部署应用程序服务器集群可以提高服务器的性能，并能够对工作量进行管理。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;WAS工作量管理（WLM）&lt;/p&gt;

        &lt;p&gt;通过WebSphere工作量管理（Workload management，WLM），来自客户端的流入处理请求被透明地分配到集群应用程序服务器中。采用WLM可以实现负载平衡和故障转移，提高WAS应用程序的整体可靠性和缩放能力。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;IP喷射器&lt;/p&gt;

        &lt;p&gt;IP喷射器透明地把从Web客户端流入的HTTP请求重定向到Web服务器群。IP喷射器拦截所有请求，并把它们分散到服务器群中所有Web服务器上。Cisco Local Director等IP喷射器实现了Web服务器的缩放能力、负载平衡和故障转移。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;通过量&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;通过量与性能有关，包括开发服务于相同请求的一系列应用服务器实例。ND中的集群可能要求多台应用服务器，通过垂直或水平缩放添加。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;nd-1&quot;&gt;在ND拓扑结构中有一些关键术语：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web演示服务器节点&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Web演示服务器节点控制所有演示类型的行为，实现统一的用户接口。节点在基本级时服务于HTML页面，运行servlet和JSP。节点在更高级别时提供访问集成服务，并充当门户。通过与个性化服务器节点通信，可以根据用户的喜好或角色来定制演示。采用Web演示服务器，组织及其用户可以对应用程序和数据演示采用同意的方式，实现高级访问控制。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;数据库服务器节点&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;数据库服务器节点提供持久化的数据存储和检索，支持用户到商家的事务处理交互。已存储的数据连接到每个商务事务处理上，例如当前用户采购。数据库访问是Web应用程序最关键的性能因素。建议把数据库访问先知道一个或很少的几个呼叫。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;域和协议防火墙节点&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;防火墙可以把本地网络分隔为两个或多个部分，在各部分之间组织数据交换。过滤器和筛网控制特定交通类型的传输。高级安全系统采用防火墙和加密，并支持入侵检测登记书。公共防火墙包括筛网路由器、协议防火墙（通常是作为IP路由器实现的）、应用程序网关和域防火墙。采用两个防火墙节点提高了防护能力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;目录和安全服务节点&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;目录和安全服务节点提供有关该Web应用程序系统中用户的位置和能力等信息。该节点可以把验证和授权信息传送给一系列的安全服务，并执行安全处理。验证是批准对Web服务器的Web应用程序服务器部分的访问，但是该节点也验证对数据库服务器的访问。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web应用程序服务器节点&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;是包含HTTP服务器的应用程序服务器。它方便了HTTP客户端的访问，并包含演示和事务逻辑。节点是基于发布的Web服务器的附加组件，允许Web浏览器访问公共和针对特定用户的信息（包括共享的应用程序和数据库）。节点可以包含一系列的数据类型，例如HTML页面、企业bean、servlet、JavaServer页面和应用程序库。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web服务器转向器节点和应用程序服务器节点&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;在大部分的拓扑结构中，独立式Web服务器存在于DMZ中。Web应用程序服务器被分割为Web服务器转向器节点和应用程序服务器节点，进而分离Web服务器和Web应用程序服务器功能。应用程序服务器是对动态内容请求的目的地，这些请求要求由Servlet、JSP、企业bean和后端应用程序进行处理。Web林蓝旗请求被发送到Web服务器转向器节点中，该节点处理HTTP页面等固定内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;负载平衡器节点&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;把HTTP分散到多个相同配置的Web服务器或Web服务器重定向节点上实现水平缩放能力。使用负载平衡器可能要求保证会话的紧密性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Deployment Manager&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;DM是ND环境中的关键配置和操作区域。在每种拓扑结构中，你都需要特定DM和主单元存储库的位置。可以把DM放在特定机器中，也可以与WAS安装版本一起使用。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;was-nd&quot;&gt;WAS ND支持一系列的普通拓扑结构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;垂直缩放&lt;/p&gt;

    &lt;p&gt;在垂直缩放拓扑结构中，在一台机器上可以有多个应用程序服务器的实例。为此，你通常创建相关应用程序服务器的集群，都承载同一个应用程序。&lt;/p&gt;

    &lt;p&gt;在这种拓扑结构中，在应用程序服务器节点上有多个集群成员。你可以在一个配置中的多台机器上实现垂直缩放，也可以与其他拓扑结构组合到一起，提高性能和通过量。&lt;/p&gt;

    &lt;p&gt;垂直缩放的优点：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;平衡WebSphere工作量的管理&lt;/li&gt;
      &lt;li&gt;支持集群中多台应用程序服务器的故障转移&lt;/li&gt;
      &lt;li&gt;通过创建更多的JVM进程，最大程度地利用机器处理能力&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;主要缺点：主机形成系统单故障点&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP服务器分隔&lt;/p&gt;

    &lt;p&gt;HTTP服务器分离拓扑结构把HTTP服务器与应用程序服务器分离开来。这样就可以把HTTP服务器放置在DMZ中，在后端服务器和数据上增加了附加安全层。&lt;/p&gt;

    &lt;p&gt;WAS把Web服务器插件添加到Web服务器机器上，采用HTTP或HTTPS协议把请求定向到远程机器上的应用程序服务器。&lt;/p&gt;

    &lt;p&gt;优势：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;支持网络地址转换（NAT）防火墙&lt;/p&gt;

        &lt;p&gt;NAT（Network Address Translation）防火墙降低了对公共访问的IP地址的要求，屏蔽了内部LAN上关键性任务服务器的地址。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;防止访问DMZ中的数据&lt;/p&gt;

        &lt;p&gt;通过DMZ可以把公共Web站点与关键性任务的内部数据分离开来，例如把数据库和配置文件相分离。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;支持负载平衡和故障转移&lt;/p&gt;

        &lt;p&gt;HTTP服务器分离通过消除单故障点支持负载平衡和故障转移。相互依赖的进程会形成影响整个基础机构的故障点。但DMZ配置把这些进程分离开来，意味着只有这些组件之间的连接才是故障点。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;简化管理&lt;/p&gt;

        &lt;p&gt;HTTP服务器分离简化了管理，这是因为Web服务器插件采用单一的、便于理解的XML配置文件。在建立之后，某些解决方案要求最低程度的维护，而其他方案只要求才去非经常性的管理措施。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;减轻堵塞现象&lt;/p&gt;

        &lt;p&gt;HTTP服务器通过在多个服务器上分配交通量，避免在一台服务器上出现瓶颈，从而减少了堵塞现象。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;支持安全套接层（Secure Sockets Layer，SSL）加密&lt;/p&gt;

        &lt;p&gt;通过加密Web服务器和应用程序服务器之间的通信可以降低攻击者通过检测服务器之间发送的数据包而获得对安全信息的访问权限造成的风险。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;缺点：在配置每次修改之后需要重新生成Web服务器插件，必须配置域防火墙才能维持服务器之间的HTTP交通。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;反向代理&lt;/p&gt;

    &lt;p&gt;其他常见的拓扑结构包括提供代理服务器的反向代理拓扑结构。这些结构拦截进出Web服务器的交通量，提供对基础结构的访问，而不向外部人员披露Web服务器的地址。&lt;/p&gt;

    &lt;p&gt;位于DMZ中的反向代理转发去往和离开与应用程序服务器在同一台机器上的Web服务器的交通量。你可以采用DMZ中的反向代理服务器，加强Internet和处理请求的Web服务器之间的安全性。与WAS结合在一起时反向代理产品必须支持NAT。反向代理配置支持高性能的DMZ解决方案，这些方案取决于开放防火墙端口的最小数量。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;优点：&lt;/p&gt;

        &lt;p&gt;这种配置很常用，经过了验证和测试，可避免用户混淆。所有被转发的请求都采用HTTP协议，从而避免了协议切换，是快速的解决方案。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;缺点：&lt;/p&gt;

        &lt;p&gt;反向代理不参与WebSphere工作量管理，当安全机制针对出入防火墙的交通不使用同一端口或协议时这种配置不能工作，需要比没有代理服务器的拓扑结构中更多的硬件和软件。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多层&lt;/p&gt;

    &lt;p&gt;多层拓扑结构把应用程序服务器进程分配给Servlet应用程序服务器和EJB应用程序服务器。在安全和性能方面有优势。&lt;/p&gt;

    &lt;p&gt;在多层拓扑结构中，运行servlet的应用程序服务器进程存在于前端节点上，几演示服务器节点上。这样，servlet执行更靠近HTTP服务器，从而缩短了对客户端请求的响应时间。&lt;/p&gt;

    &lt;p&gt;应用程序服务器节点包含运行企业bean的应用程序服务器进程，更靠近应用程序数据。实体bean存储在数据库服务器中，代表应用程序中的应用程序数据。&lt;/p&gt;

    &lt;p&gt;在多层拓扑结构中群集应用程序服务器可以提高每个节点的资源利用率，形成进程冗余，与只能部署应用程序服务器单个实例的类似拓扑结构对比，提高了内存利用率。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;优点：&lt;/p&gt;

        &lt;p&gt;多层拓扑结构在复制应用程序服务器方面非常灵活。增加的机器资源提高了应用程序通过量和性能。在每两层之间引入了防火墙为实体bean和应用程序数据增加了安全性。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;缺点：&lt;/p&gt;

        &lt;p&gt;采用多层拓扑结构时，不需要进行当Web容器和EJB容器在同一台应用程序服务器上工作时应执行的本地JVM优化。引入网络等待时间会降低系统性能，引入了冗余级会让维护更复杂。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;带集群的水平缩放&lt;/p&gt;

    &lt;p&gt;当应用程序服务器群集的成员位于多台物理机器上时可以采用这种拓扑结构。通过这种方式，应用程序可以在多台机器上分布，同时仍维护单一的逻辑实体。&lt;/p&gt;

    &lt;p&gt;Web服务器插件共享应用程序服务器节点上堆群集成员应用程序服务器的请求。你可以在群集上添加Edge组件中的Network Dispatcher组件，利用带去你记得水平缩放和带IP喷射器的水平缩放。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;优点：&lt;/p&gt;

        &lt;p&gt;提高了垂直缩放拓扑结构的通过量&lt;/p&gt;

        &lt;p&gt;支持故障转移&lt;/p&gt;

        &lt;p&gt;适合处理应用程序服务器进程故障和硬件故障，对客户端服务没有任何重大破坏。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;缺点：&lt;/p&gt;

        &lt;p&gt;增加了维护工作量。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;带IP喷射器的水平缩放&lt;/p&gt;

    &lt;p&gt;在采用IP喷射器的水平缩放的拓扑结构中，可以采用负载平衡产品在多台物理机器上工作的应用程序服务器实例间分配HTTP请求。&lt;/p&gt;

    &lt;p&gt;Edge组件中的Network Dispatcher组件是一种IP喷射器。它采用服务器可用性、能力和工作量等元素在Web服务器上运行智能负载平衡。&lt;/p&gt;

    &lt;p&gt;既有简单的也有复杂的IP喷射器拓扑结构。&lt;/p&gt;

    &lt;p&gt;简单的水平缩放配置采用负载平衡器节点上的IP喷射器在多台机器上的应用程序服务器之间分配请求。通常在负载平衡节点上配置备份节点以避免单故障点。&lt;/p&gt;

    &lt;p&gt;在复杂的IP喷射器拓扑结构中，IP喷射器把请求分散到包含Web服务器和群集应用程序服务器的多个机器上。演示服务器节点承载基于servlet的应用程序。应用程序服务器节点包括访问应用程序数据和处理事务逻辑的企业bean。这样就可以再第一层中设置多个不太强大的机器，在第二层中设置少一些的但功能强大的机器。&lt;/p&gt;

    &lt;p&gt;IP喷射器拓扑结构不论是简单的还是复杂的，都非常灵活，提供了多个工作量管理层。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;多个WebSphere单元&lt;/li&gt;
  &lt;li&gt;单节点上多个集群&lt;/li&gt;
  &lt;li&gt;组合&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>IHS   SSL证书替换之后无法访问（Error SSL0227E）</title>
   <link href="http://blog.dellyqiao.com/middleware/security/2015/03/15/ihs---sslerror-ssl0227e"/>
   <updated>2015-03-15T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/security/2015/03/15/ihs---sslerror-ssl0227e</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;出现的问题&lt;/h3&gt;

&lt;p&gt;今天在为网站替换SSL证书的时候出现了一个问题，服务器是IBM HTTP Server服务器，症状如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;替换之后站点无法访问&lt;/li&gt;
  &lt;li&gt;用ikeyman打开证书查看，证书没有问题&lt;/li&gt;
  &lt;li&gt;服务启动后，HTTPS端口（443）已经正常监听了&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section-1&quot;&gt;问题分析&lt;/h3&gt;

&lt;p&gt;如果证书没有问题的话多半就是配置文件的问题了。查看error.log，发现如下错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fri Jan 16 14:28:36 2015] [crit] [client 10.64.48.52] [2195808] [2864] SSL0227E: SSL Handshake Failed, Specified label could not be found in the key file. [10.64.48.52:37368 -&amp;gt; 10.64.48.29:443] [14:28:36.457113] 
[Fri Jan 16 14:28:36 2015] [crit] [client 221.122.53.200] [2195808] [2864] SSL0227E: SSL Handshake Failed, Specified label could not be found in the key file. [221.122.53.200:31042 -&amp;gt; 10.64.48.29:443] [14:28:36.457113] 
[Fri Jan 16 14:28:36 2015] [crit] [client 10.64.48.51] [2195808] [2864] SSL0227E: SSL Handshake Failed, Specified label could not be found in the key file. [10.64.48.51:46678 -&amp;gt; 10.64.48.29:443] [14:28:36.457113] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pecified label could not be found in the key file.&lt;/code&gt; 错误信息里，这句话是关键，指定的label无法在key文件中找到。就是说httpd.conf中指定了一个别名，但是在key.kdb文件中没有。&lt;/p&gt;

&lt;p&gt;查看httpd.conf，发现如下配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Keyfile &quot;D:\IBM\HTTPServer\SSL\2015\www.server.com\key.kdb&quot;
SSLserverCert www.server.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SSLserverCert&lt;/code&gt; 这个配置是指定证书文件的名字，因为在key.kdb文件中可以导入多个个人证书，在一个kdb文件里有多个个人证书的情况下，就必须要指定你当前的配置是要用哪个证书去加密会话。&lt;/p&gt;

&lt;p&gt;一般在制作CSR的时候，我们习惯用域名来作为Label Name（类似于www.server.com），所以在我们的httpd.conf配置文件中都会用指定&lt;code&gt;SSLserverCert www.server.com&lt;/code&gt;。但是这次的KDB文件是由其他vendor提供的，在制作CSR的时候它们随便用了一个Label Name，所以就导致找不到证书别名的问题。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;解决方法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;直接把&lt;code&gt;SSLserverCert&lt;/code&gt;这一行删掉。因为我们的kdb文件里只有一个CER证书，删掉是无所谓的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把那个别名改变一下，跟导入是的别名设置成一样的。&lt;/p&gt;

    &lt;p&gt;如何查看证书导入时候的别名？如下图了：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/16/ssl alias.png/scale&quot; alt=&quot;SSL Alias&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Migrate JVM settings for same version Websphere Servers</title>
   <link href="http://blog.dellyqiao.com/middleware/migration/2015/03/14/migrate-jvm-settings-for-same-version-websphere-servers"/>
   <updated>2015-03-14T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/migration/2015/03/14/migrate-jvm-settings-for-same-version-websphere-servers</id>
   <content type="html">
&lt;h3 id=&quot;important&quot;&gt;Important&lt;/h3&gt;

&lt;p&gt;Only when your senario is exactly same as below, you may try this method to migrate the &lt;strong&gt;Application Server&lt;/strong&gt; configurations, in other word, this method can only copy the &lt;strong&gt;JVM&lt;/strong&gt; configurations.&lt;/p&gt;

&lt;p&gt;This scenario is as below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your profile have the capability to create new application server. (For example, the ND cell member Node, the standard application server profile which is managed by AgentAdmin)&lt;/li&gt;
  &lt;li&gt;You want to copy the configuration to another server with the same version WAS installed. (both server installed WAS 8.0, for example)&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;there-are-better-solutions-for-below-scenarios-i-will-write-another-essays-for-these-situations&quot;&gt;There are better solutions for below scenarios, I will write another essays for these situations:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;to migrate the configures from old version to the new version&lt;/li&gt;
  &lt;li&gt;To migrate the configures for Standard / Base version WAS with only 1 Node.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;

&lt;p&gt;For example, we’d like to migrate JVMs from server APP11 to APP15:&lt;/p&gt;

&lt;h4 id=&quot;open-wsadmin-with-jython-language-on-the-app11-&quot;&gt;1. Open wsadmin with jython language on the APP11 :&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;cd {Profile Home}\bin
wsadmin -lang jython -username wasadmin -password &quot;Password**&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output should be as below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/08/wsadmin.png/scale&quot; alt=&quot;alt JVMlist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Note!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ensure you saw the information like: you have successfully connected to the profile which includes the JVMs you want to export. &lt;strong&gt;Do not&lt;/strong&gt; run the command under AdminAgent/bin, this way will cause exception.&lt;/p&gt;

&lt;h4 id=&quot;export-the-old-jvm-configuration&quot;&gt;2. Export the old JVM configuration:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;wsadmin&amp;gt;AdminTask.exportServer(&#39;[-nodeName THAIPWAPP11Node02 -serverName ams-server -archive F:/IBM/Archive/amsArchive.car]&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I exported 4 JVM configuration archives:
&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/08/export1.png/scale&quot; alt=&quot;alt JVMlist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/08/export2.png/scale&quot; alt=&quot;alt JVMlist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Noted!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The archive file path must be with &lt;code&gt;/&lt;/code&gt; even you are running this command in Windows environment.&lt;/p&gt;

&lt;h4 id=&quot;create-the-new-profiles-and-register-the-application-profile-into-dmgr-or-adminagent&quot;&gt;3. Create the new profiles, and register the application profile into DMGR or AdminAgent.&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Create the profiles. Here I will create &lt;code&gt;AppSrv01&lt;/code&gt; and will register it into &lt;code&gt;AdminAgent01&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;![alt JVMlist](http://dellyqiao.qiniudn.com/2015/01/08/profiles.png/scale)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Change directory to AdminAgent01 bin folder, run registerNode command:&lt;/p&gt;

    &lt;p&gt;cd F:\IBM\WebSphere\AppServer\profiles\AdminAgent01\bin
   registerNode -profileName AdminAgent01 -host APP15 -profilePath “F:\IBM\WebSphere\AppServer\profiles\AppSrv01” -connType SOAP -port 8877 -username wasadmin -password “Password&lt;strong&gt;” -nodeusername wasadmin -nodepassword “Password&lt;/strong&gt;”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;Ensure the output information dosn&#39;t contains any error. 

![alt JVMlist](http://dellyqiao.qiniudn.com/2015/01/08/registernode.png/scale)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Logon AdminAgent IBM Console to verify the result.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;![alt JVMlist](http://dellyqiao.qiniudn.com/2015/01/08/nodeselect.png/scale)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;import-the-jvm-into-the-new-environment&quot;&gt;4. Import the JVM into the new environment:&lt;/h4&gt;

&lt;p&gt;Now your WAS profile have the capacity to create application servers as below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/08/createserver.png/scale&quot; alt=&quot;alt JVMlist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To import the configuration archive files, WAS will create the application server with the congiurations automatically.&lt;/p&gt;

&lt;p&gt;Copy the .car files into F:\IBM\Archive\ of APP15. Then execute below commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd {AppSrv01 Home}\bin
wsadmin -lang jython -username wasadmin -password &quot;Password**&quot;
//after logged in wsadmin tool:
AdminTask.importServer(&#39;[-archive F:\IBM\Archive\healthcareArchive.car -nodeInArchive APP11Node01 -serverInArchive HealthCare-server -nodeName APP15Node02 -serverName HealthCare-server]&#39;)
AdminConfig.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I imported 4 JVMs, and then saved the configuration with &lt;code&gt;AdminConfig.save()&lt;/code&gt; together:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/08/importresult.png/scale&quot; alt=&quot;alt JVMlist&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;verify-the-result-from-ibm-console&quot;&gt;5. Verify the result from IBM Console:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/08/JVMlist.png/scale&quot; alt=&quot;alt JVMlist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may open Process Defination settings to verify if the configuration is same as the old JVMs.&lt;/p&gt;

&lt;h3 id=&quot;configurations-that-will-not-be-copied&quot;&gt;Configurations that will not be copied&lt;/h3&gt;

&lt;p&gt;Frankly, this is not a full configuration copy, even you imported JVM via this method, some parameters still need to be changed manually. And you will still need to create JAAS/DataSource/JMS manually. Those configurations will not be copied out.&lt;/p&gt;

&lt;p&gt;I’m not exactly know the full list of the parameters that need to be modified manually, and I will keep updating the list here once I noticed any:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The JVM port. You need to modify them manually.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/08/JVMport.png/scale&quot; alt=&quot;alt JVMport&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Application Server Resources&lt;/p&gt;

    &lt;p&gt;You may created some resources (such as JDBC provider, DataSource) under the application server scope. For this case, the related resources should also be copied out with the application servers.&lt;/p&gt;

    &lt;p&gt;But as per my experience, sometimes some of the resources will not be exported into the archive files normally, sometimes the resources of server A will be exported into the archive of server B……&lt;/p&gt;

    &lt;p&gt;It is strange, thus we need to manually check all the resources by ourselves.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;Here I attache the reference article from IBM and you may get more information from there:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www-01.ibm.com/support/knowledgecenter/SS7JFU_8.0.0/com.ibm.websphere.express.doc/info/exp/ae/rxml_atconfigarchive.html&quot;&gt;http://www-01.ibm.com/support/knowledgecenter/SS7JFU_8.0.0/com.ibm.websphere.express.doc/info/exp/ae/rxml_atconfigarchive.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below attach the usage of importServer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Parameters and return values

    -archive
        Specifies the fully qualified path of the configuration archive. (String, required)
    -nodeInArchive
        Specifies the node name of the server defined in the configuration archive. (String, optional if there is only one node defined in the configuration archive, required if there are multiple nodes defined in the configuration archive)
    -serverInArchive
        Specifies the name of the server defined in the configuration archive. (String, optional if there is only one server defined on the specified nodeInConfiguration archive, required if there are multiple servers defined under the specified nodeInConfiguration archive)
    -nodeName
        Specifies the node name where the server is imported. (String, optional if there is only one node)
    -serverName
        Specifies the server name where the server is imported. If the server name that you specify matches an existing server name under the node, an exception is created. (String, optional, default: serverInArchive)
    -coreGroup
        Specifies the core group name to which the server should belong. (String, optional) 

    AdminTask.importServer(&#39;[-archive c:/myServer.car -nodeInArchive node1 -serverInArchive server1]&#39;)

    AdminTask.importServer(&#39;[-archive F:\IBM\Archive\iPOSArchive.car -nodeInArchive THAIPWAPP11Node01 -serverInArchive iPOSAppSrv -nodeName THAIPWAPP15Node01 -serverName iPOSAppSrv]&#39;)
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>用Markdown编写Evernote文章(With Sublime Text)</title>
   <link href="http://blog.dellyqiao.com/tools/2015/03/14/markdownevernotewith-sublime-text"/>
   <updated>2015-03-14T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/tools/2015/03/14/markdownevernotewith-sublime-text</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;先说说本文的来历。 之前用postach.io的服务构建了一个自己的个人博客，我也在陆续往这个博客上post文章。简单的来说，通过这个服务，你可以再Evernote的某一个笔记本里发布一篇文章，只要添加上特定的标签，这篇文章就可以自动发布到你的博客站点中。个人觉得这种方式有很多优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;发博文方便，你不需要像传统的方式那样在本地编号再登录到博客网站重新发布排版&lt;/li&gt;
  &lt;li&gt;便于归档，你不用把文章存好几份，不用担心线上线下的文章数量是否一致&lt;/li&gt;
  &lt;li&gt;有足够的定制空间。Postach.io可以从模板库里选择模板，也可以从github上fork一个现成的模板，修改一下应用到自己的博客上–这也是我现在正在使用的方式，我为自己的博客添加了评论系统，分享按钮，流量统计功能，等等……&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;p&gt;但是缺点也是有的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;只能用Evernote的编辑器去编写文章，说实话evernote的编辑器功能并不好，排版非常麻烦&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要说这个排版，最方便最”正确”的方式莫过于Markdown了，正好最近发现有一个Sublime Text 3的插件正好是用来发布Evernote的，如果能用Sublime编写Markdown形式的内容，然后简简单单直接post到Evernote上同时同步到postach.io上的话那可就真的完美了。经过一番探究，这种方法确实是可行的，于是在这里记录一下自己的经验做抛砖引玉之用。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;配置篇&lt;/h3&gt;

&lt;h4 id=&quot;sublime-text-3evernote&quot;&gt;第一步：为Sublime Text 3安装Evernote插件&lt;/h4&gt;

&lt;p&gt;安装Evernote插件的方法有三种，&lt;em&gt;Package Control&lt;/em&gt;，&lt;em&gt;手动&lt;/em&gt;，&lt;em&gt;Github&lt;/em&gt;。这里根据我的经验，用&lt;em&gt;Github&lt;/em&gt;和&lt;em&gt;手动&lt;/em&gt;的方式真心容易出问题（我碰到了菜单不全的问题，貌似Github上的那个库是很久以前的版本，已经很久没更新了，只有发布新文章的功能），用&lt;em&gt;Package Control&lt;/em&gt;的方法是最给力的。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Package Control&lt;/em&gt;是Sublime Text的一个插件，这个插件可以很方便的让Sublime去搜索安装其他插件，类似于一个包管理器，有了这个东西，以后安装更多的插件就非常容易了。所以首先我们得位Sublime Text装上Package Control：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;安装方法来源：&lt;a href=&quot;http://blog.csdn.net/nivana999/article/details/7823805&quot;&gt;一些必不可少的Sublime Text 2插件&lt;/a&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;按Ctrl+`调出console&lt;/li&gt;
    &lt;li&gt;粘贴以下代码到底部命令行并回车： import urllib2,os;pf=’Package Control.sublime-package’;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),’wb’).write(urllib2.urlopen(‘http://sublime.wbond.net/’+pf.replace(‘ ‘,’%20’)).read())&lt;/li&gt;
    &lt;li&gt;重启Sublime Text 2。&lt;/li&gt;
    &lt;li&gt;如果在Perferences-&amp;gt;package settings中看到package control这一项，则安装成功。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据我的经验，照做就好，不会出问题的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/14/1.png/scale&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mac版ST3按照上面ST2的方法安装成功，然而Windows版ST3无法成功。如果有问题请参照官方说明，ST3跟ST2的Package Control的安装方法应该是不同的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://packagecontrol.io/installation#st3&quot;&gt;https://packagecontrol.io/installation#st3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装好之后，就可以去搜索安装Evernote插件了。（&lt;strong&gt;注意：根据官方的说法，Evernote这个插件只兼容Sublime Text 3，目前3是Beta版，如果你的电脑里不是3，请去官网下载。&lt;/strong&gt;）&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;打开Sublime编辑器，调出命令面板。快捷键&lt;code&gt;CMD+Shift+P&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;输入&lt;code&gt;Package Control Install&lt;/code&gt;并回车。稍微等待一会儿，Sublime将会去搜索所有被Package Control管理的插件并且列出在编辑器列表中。&lt;/li&gt;
  &lt;li&gt;等列表出现之后，继续输入&lt;code&gt;evernote&lt;/code&gt;，找到这个插件包之后，按下回车键开始安装。等到安装日志出现后就说明插件装好了。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;![](http://dellyqiao.qiniudn.com/2015/03/14/2.png/scale)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;验证：CMD+Shift+P调出命令面板，输入evernote，看看有没有出现evernote相关的菜单，如果出现那就没问题了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;sublime-text-3evernote-1&quot;&gt;第二步：为你的Sublime Text 3添加Evernote的授权&lt;/h4&gt;

&lt;p&gt;通过Evernote developer的授权，你就可以通过认证码进行文章的增删改查，做法如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CMD+Shift+P调出命令面板（最喜欢这个强大的功能了ʅ(‾◡◝)），输入&lt;code&gt;evernote reconfigure auth&lt;/code&gt;(**Sublime编辑器支持模糊匹配，所以不一定非得输入完整的命令，只要差不多就行），看到重新授权的菜单后回车。  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;![](http://dellyqiao.qiniudn.com/2015/03/14/3.png/scale)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;这时候会自动弹出一个evernote的网页，网页的下部有一个创建token的连接，点击之，就会生成token了。  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/14/4.png/scale&quot; alt=&quot;&quot; /&gt;  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;打开Sublime Text的界面，会看到在软件的下部出现了一个输入token的条，把token复制粘贴进去，回车；然后复制“NoteStore URL”，粘贴到软件中，回车。  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/14/5.png/scale&quot; alt=&quot;&quot; /&gt; &lt;/p&gt;

&lt;p&gt;不出意外的话，Sublime编辑器的evernote插件就完全配置好了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;使用篇&lt;/h3&gt;

&lt;p&gt;到使用的部分了，自然就是写文章+发布文章了。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;写文章&lt;/h4&gt;

&lt;p&gt;用&lt;code&gt;CMD+N&lt;/code&gt;在Sublime中创建新文档并且通过&lt;code&gt;CMD+Shift+P&lt;/code&gt;节日&lt;code&gt;ssmarkdown&lt;/code&gt;设置Markdown语法匹配环境。&lt;/p&gt;

&lt;p&gt;文章的标题和标签可以通过两种方式设定：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;通过Liquid格式的meta data设置evernote文章的笔记本，标签和标题： &lt;/p&gt;

 	— 
 	title: 用Markdown编写Evernote文章(Sublime Text Editor) 	
 	tags: [“published”, “technology”] 
 	notebook: dellyqiao.com &amp;gt;
 	—&lt;br /&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果meta data的数据格式不对的话，在发布的时候会报错。下图是我写本文时候的样子。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![](http://dellyqiao.qiniudn.com/2015/03/14/6.png/scale)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;不设定Meta data，直接写文章，在发布的时候插件会提示你去设置标题，标签和所属的笔记本。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-4&quot;&gt;发布文章&lt;/h4&gt;

&lt;p&gt;发布文章的命令是&lt;code&gt;send to Evernote as new note&lt;/code&gt;，只需要几秒钟，你的文章就能按照想象的排版方式输出到evernote中并且同步到自己的博客里了。&lt;/p&gt;

&lt;p&gt;当然，也完全可以打开现有的文章（&lt;code&gt;Open Evernote Note&lt;/code&gt;）然后编辑保存，evernote的文章会按照原先的格式转换成Markdown格式输出到本地的Sublime Text中，修改完成后调用&lt;code&gt;Update Evernote Note&lt;/code&gt;就OK了。&lt;/p&gt;

&lt;p&gt;得益于Sublime Text强大的模糊搜索功能和各种各样的文档编辑功能，我觉得以后也许我会全靠Sublime Text来管理我的Evernote笔记了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-5&quot;&gt;遗憾&lt;/h3&gt;

&lt;p&gt;任何事情达成的过程都是一个取舍的过程，这种方案也不例外，那就是图片的问题。&lt;/p&gt;

&lt;p&gt;用Sublime打开带图片的Evernote文章的时候，图片不会被正确的转换成Markdown格式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果图片是直接复制粘贴到Evernote笔记里的，转换成Markdown的时候图片会转换成一堆无法识别的html代码。如果不加任何修改再把那堆代码同步到evernote中，evernote也无法识别。&lt;/li&gt;
  &lt;li&gt;如果图片是在用Markdown编写文章的时候通过&lt;code&gt;![alt &quot;text&quot;]()&lt;/code&gt;标签插入的，发布到evernote再转出来的话会转换成几个特殊字符，也不是正常的图片。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人觉得靠谱的解决方案如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用第三方的网盘存储图片，然后生成公开连接，在写文章时通过标签引用。如下： &lt;code&gt;![](http://dellyqiao.qiniudn.com/2015/03/14/2.png/scale)&lt;/code&gt; （同时也裂墙推荐七牛云存储，免费好用）&lt;/p&gt;

    &lt;p&gt;如此一来也能有效地节省Evernote吝啬的60M上传流量吧。如果这篇文章以后有可能会有大量改动的话，而且确实非Markdown编辑器不用的话，把Markdown文件在本地保存一份，方便随时修改而不用再去头疼图片的问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;（&lt;em&gt;从来不用Evernote客户端一直用网页端的请无视，网页端的复杂度堪比图片外链。。。&lt;/em&gt;）用Sublime写文章时只写文字，等文字发布之后，再转到Evernote客户端中把需要的图片粘到文章里做二次修改。 这种情况适合以后改动较少和图片较多的情况（按我的理解，在evernote客户端里粘贴图片是一种更为简单方便的操作）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;文章写到这儿也算完成了，我觉得介绍的还算详细，有了这工具，修改整理自己的笔记真心也方便了不少，很容易就能做出良好排版的笔记。如果我需要的话，可以把笔记转换到本地，然后用Markdown语法稍加修改，然后生成格式良好的打印版文档。&lt;/p&gt;

&lt;p&gt;抛砖引玉，Evernote的客户端编辑器确实做的不咋地，用Markdown+Sublime Text 3，相信你更会感受到创造内容的快乐的。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to delete a Websphere profile</title>
   <link href="http://blog.dellyqiao.com/middleware/2015/03/14/how-to-delete-a-websphere-profile"/>
   <updated>2015-03-14T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2015/03/14/how-to-delete-a-websphere-profile</id>
   <content type="html">
&lt;p&gt;How to delete a Websphere profile&lt;/p&gt;

&lt;h4 id=&quot;if-you-are-removing-a-profile-that-is-federated-to-a-cell-including-nd-cell-and-adminagent&quot;&gt;1. if you are removing a profile that is federated to a cell (Including ND Cell and AdminAgent)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;cd {AdminAgent Home}/bin
deregisterNode -connType SOAP -port 8877 -profilePath &quot;F:\IBM\Websphere\AppServer\profiles\AppSrv01&quot; -username xxxx -password &quot;Password&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Attention:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use removeNode command if it is a ND Cell. &lt;/li&gt;
  &lt;li&gt;Use deregisterNode command if it is a AdminAgent managed node. Here I use this secario as the example.&lt;/li&gt;
  &lt;li&gt;Please ensure &lt;strong&gt;The AdminAgent must be running&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If you don’t remember the SOAP port of the AdminAgent, can check the serverindex.xml under {AdminAgent Home}\config\cells\THAIPWAPP15AACell01\nodes\THAIPWAPP15AANode01&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;p&gt;The result should be like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/08/deregister.png/scale&quot; alt=&quot;alt Deregister&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;stop-all-the-jvm-services-in-the-profile-you-will-be-deleted-try-to-ensure-no-java-process-is-running-from-os-level&quot;&gt;2. Stop all the JVM services in the profile you will be deleted. Try to ensure no java process is running from OS level.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Windows: check from task manager.
Linux: ps -ef | grep java
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;change-directory-to-was-homebin-then-run-the-delete-profile-command&quot;&gt;3. Change directory to {WAS Home}/bin, then run the delete profile command:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;manageprofiles -delete -profileName AppSrv01
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output should be as below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/08/delete profile.png/scale&quot; alt=&quot;alt delete profile&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;clean-the-profile-registry-using-the-following-command&quot;&gt;4. Clean the profile registry using the following command:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;manageprofile -validateAndUpdateRegistry
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;remove-the-profile-folders&quot;&gt;5. Remove the profile folders.&lt;/h4&gt;

&lt;p&gt;Till now, most of the subfolders of the profile &lt;em&gt;AppSrv01&lt;/em&gt; should have been removed, only &lt;em&gt;AppSrv01/log&lt;/em&gt; folder still there. The last step is to delete the profile folder under {WAS Home}/profiles/.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Zabbix   Update from 1.8.3 to 1.8.12</title>
   <link href="http://blog.dellyqiao.com/monitoring/2015/03/13/zabbix---update-from-183-to-1812"/>
   <updated>2015-03-13T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/monitoring/2015/03/13/zabbix---update-from-183-to-1812</id>
   <content type="html">
&lt;p&gt;This document is to introduce how to upgrade the Zabbix from 1.8.3 to 1.8.12 to suit OpenSuse 11.4.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: As this is not a full new configuration, so this document is only for Zabbix version update from 1.8.3 to 1.8.12, cannot be treated as a full installation guide.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As this is a little update during 1.8.x, so no need to touch the DB. Steps attached here, please follow the steps strictly, all the command are provided here.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference:&lt;/h3&gt;

&lt;p&gt;You may find more information from below links:&lt;/p&gt;

&lt;p&gt;Install zabbix from Source: &lt;a href=&quot;https://www.zabbix.com/documentation/1.8/manual/installation/installation_from_source&quot;&gt;https://www.zabbix.com/documentation/1.8/manual/installation/installation_from_source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upgrade proceduler: (section 3.6) &lt;a href=&quot;https://www.zabbix.com/documentation/1.8/manual/about/installation_and_upgrade&quot;&gt;https://www.zabbix.com/documentation/1.8/manual/about/installation_and_upgrade&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dependency packages: (Chinese) &lt;a href=&quot;http://os.51cto.com/art/201104/252989.htm&quot;&gt;http://os.51cto.com/art/201104/252989.htm&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download:&lt;/h3&gt;

&lt;p&gt;You may get all the required packages from here: &lt;a href=&quot;http://dellyqiao.qiniudn.com/2015/03/13/Zabbix_Update_packages.zip&quot;&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Remove the old version Zabbix 1.8.3.   &lt;/p&gt;

    &lt;p&gt;You may run: &lt;code&gt;rpm -qa | grep zabbix&lt;/code&gt; to check all the installed zabbix packages. Please confirm all the installed packages have been removed before perform the new installation.  &lt;/p&gt;

    &lt;p&gt;Before remove:  &lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;After:  &lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install the dependency packages: &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; gcc  
 make  
 mysql-devel  
 curl-devel  
 net-snmp-devel 
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;(Above packages could be find from the OpenSuse 11.4 OS iso file, and most of the Linux distrubution should have includes these tools already.)  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; iksemel-1.4.tar.gz 
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;em&gt;install this package with below steps&lt;/em&gt;:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Upload file iksemel-1.4.tar.gz to /tmp, then &lt;code&gt;cd /tmp&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;tar –zxf iksemel-1.4.tar.gz&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;cd iksemel-1.4&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;./configure&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Upload the file zabbix-1.8.12.tar.gz to /tmp, then &lt;code&gt;cd /tmp&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;tar –zxf zabbix-1.8.12.tar.gz&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;cd zabbix-1.8.12&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;./configure --enable-server --enable-proxy --enable-agent --with-mysql --with-net-snmp --with-jabber --with-libcurl&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;ln -sf /usr/local/lib/libiksemel.so.3 /lib/&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Basically, till now, the new version Zabbix have been installed, please run &lt;code&gt;zabbix_server –V&lt;/code&gt; to verify the version of zabbix.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the config file to folder: /etc/zabbix:  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; cd /tmp/zabbix-1.8.12  
 cp misc/conf/zabbix_server.conf /etc/zabbix/  
 cp misc/conf/zabbix_proxy.conf /etc/zabbix/  
 cp misc/conf/zabbix_agent.conf /etc/zabbix/  
 cp misc/conf/zabbix_agentd.conf /etc/zabbix/
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;vi /etc/zabbix/zabbix_server.conf&lt;/code&gt;  &lt;/p&gt;

    &lt;p&gt;Find out below 2 lines, then modify the DB username and password: &lt;/p&gt;

    &lt;p&gt;(find function in VI: type &lt;code&gt;/ DBUser&lt;/code&gt; in command mode)  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;DBUser=zabbix  
DBPassword=zabbix
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Upload the files: zabbix_server and zabbix_agentd to /etc/init.d/, then add execute permission:&amp;lt;/div&amp;gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;chmod +x /etc/init.d/zabbix_server  
chmod +x /etc/init.d/zabbix_agentd
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start and stop the zabbix_server and zabbix_agentd to verify the installation with below commands:  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;/etc/init.d/zabbix_server start  
/etc/init.d/zabbix_server stop  
ps –ef | grep zabbix  
/etc/init.d/zabbix_agentd start  
/etc/init.d/zabbix_agentd stop  
ps –ef | grep zabbix  
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;After confirmed there’s no issue, start the zabbix_server and zabbix_agentd:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;/etc/init.d/zabbix_server start  
/etc/init.d/zabbix_agentd start  		
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Steer into the web interface configuration:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;cd /tmp/zabbix-1.8.12/frontends/php/&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;mkdir /srv/www/htdocs/zabbix&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;cp -a . /srv/www/htdocs/zabbix&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we don’t need to work with the command line any more, instead, we need to open a Web browser to access the zabbix web interface to configure our web view.&lt;/p&gt;

    &lt;p&gt;Open a browser, input the address: &lt;code&gt;http://&amp;lt;IP address here&amp;gt;/zabbix/queue.php&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;If you are working locally on the Linux server, you may open the embeded Firefox (I guess all the popular Linux distribution have Firefox installed by default). &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;If you are working with Linux server remotely, you will have some choices:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Find out any PC which could access the remote server via port 80, then use PC browser to access the web page.&lt;/li&gt;
      &lt;li&gt;Configure remote X session from local PC, you may use Putty+xming (free), or xterm (not free), and then access the Firefox on the server from local PC directly.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;code&gt;Next&amp;gt;&amp;gt;&lt;/code&gt; Button. Then read and accept GPL v2 license.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure that all software pre-requisites are met.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure database settings. Zabbix database must already be created.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Please input “zabbix” in “Name”, “User” and “Password” fields.&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;

    &lt;p&gt;Then click &lt;code&gt;Test Connection&lt;/code&gt; button, “Ok” means connection is fine.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click Next. See summary of settings. Click next.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download configuration file and place it under conf/.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Click the “Save configuration file” button.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;After saved, upload the file zabbix.conf.php to /srv/www/htdocs/zabbix/conf/. &lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;code&gt;Retry&lt;/code&gt; button, there should be “Ok” appears. Then finishing installation.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/13/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Till now, all the configuration is done, input the monitoring address on browser &lt;code&gt;http://IP Address/zabbix/&lt;/code&gt; to work with the new environment.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux网络管理— 学习笔记</title>
   <link href="http://blog.dellyqiao.com/server/2015/03/13/linux-"/>
   <updated>2015-03-13T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/server/2015/03/13/linux-</id>
   <content type="html">
&lt;h3 id=&quot;osi&quot;&gt;&lt;strong&gt;OSI七层模型：&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;物理层 比特 八根网线1346用来传数据，设备之间传递比特流&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据链路层 帧 用Mac地址访问媒介，错误检测修正&lt;/p&gt;

    &lt;p&gt;内网用Mac地址传数据&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;网络层 报文 （确定IP地址）提供逻辑地址，选择通路&lt;/p&gt;

    &lt;p&gt;公网用IP地址传输局&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;传输层 TPDU 确定服务端口， TCP/UDP — 确定可靠与不可靠的传输，传输前的错误检测，流控&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;会话层 SPDU 管理和同步用户会话&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;表示层 PPDU 数据的表现形式（如文字翻译成ASCII，再翻译成机器语言），特定功能的实现-如加密&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用层 APDU 用户接口&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tcpip&quot;&gt;&lt;strong&gt;TCP/IP四层模型&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;应用层 为用户提供各种服务 FTP，HTTP，&lt;/em&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;应用层&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;表示层&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;会话层&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;传输层 为应用层的尸体提供端到端的通信功能 TCP传输控制协议，UDP用户数据报协议&lt;/em&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;传输层&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;网际互联层 解决主机之间的通信问题 IP网际协议，ICMP互联网控制报文协议（ping），IGMP互联网组管理协议&lt;/em&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;pre&gt;&lt;code&gt;网络层
&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;网络接口层 负责数据在网络中的交换 ARP地址解析协议&lt;/em&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;pre&gt;&lt;code&gt;数据链路层
&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;pre&gt;&lt;code&gt;物理层
&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tcpiposi&quot;&gt;&lt;strong&gt;TCP/IP与OSI两种模型比较&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;共同点：&lt;/p&gt;

&lt;p&gt;1）都采用了层次结构的概念&lt;/p&gt;

&lt;p&gt;2）都能提供面向连接和无连接两种通信服务机制（TCP/UDP)&lt;/p&gt;

&lt;p&gt;不同点：&lt;/p&gt;

&lt;p&gt;1）层数不同&lt;/p&gt;

&lt;p&gt;2）对可靠性要求不同（后者更高）&lt;/p&gt;

&lt;p&gt;3）OSI实在协议开发前设计的，是通用的。TCP/IP是先有协议集再建立模型，不适用与非TCP/IP网络。&lt;/p&gt;

&lt;p&gt;4）实际市场应用不同（OSI是理论上的模型，并没有成熟的产品。TCP/IP已经成为实际上的国际标准）&lt;/p&gt;

&lt;en-media type=&quot;image/png&quot; hash=&quot;afc8ec882eaf0902a975f7342adf23b2&quot; style=&quot;height: auto;&quot; /&gt;

&lt;p&gt;网关&lt;/p&gt;

&lt;p&gt;1）子网内的计算机在跟不同子网设备通信时用&lt;/p&gt;

&lt;p&gt;2）子网IP转换成公网IP，公网IP转成子网IP&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux网络配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**&lt;br /&gt;
**&lt;/p&gt;

&lt;p&gt;1）ifconfig — 临时配置IP地址&lt;/p&gt;

&lt;p&gt;ifconfig eth0 192.168.0.200 netmask 255.255.255.0&lt;/p&gt;

&lt;p&gt;2）setup工具永久配置IP地址（RedHat系列专有）&lt;/p&gt;

&lt;p&gt;setup&lt;/p&gt;

&lt;p&gt;service network restart&lt;/p&gt;

&lt;p&gt;3）修改网络配置文件&lt;/p&gt;

&lt;p&gt;1. 网卡信息文件&lt;/p&gt;

&lt;p&gt;vi /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/p&gt;

&lt;p&gt;BOOTPROTO=none/static/dhcp 是否自动获取IP（none，static都代表手工设定）&lt;/p&gt;

&lt;p&gt;ONBOOT=yes 是否随网络服务启动（Redhat6以后默认为no）&lt;/p&gt;

&lt;p&gt;UUID=“xxx” 唯一识别码（虚拟机克隆后必须手动修改）&lt;/p&gt;

&lt;p&gt;IPADDR=&lt;/p&gt;

&lt;p&gt;NETMASK=&lt;/p&gt;

&lt;p&gt;GATEWAY=&lt;/p&gt;

&lt;p&gt;DNS1=&lt;/p&gt;

&lt;en-media type=&quot;image/png&quot; hash=&quot;8574ea63171d5176e7a56603839a5881&quot; style=&quot;height: auto;&quot; /&gt;

&lt;p&gt;2. 主机名文件&lt;/p&gt;

&lt;p&gt;vi /etc/sysconfig/network&lt;/p&gt;

&lt;p&gt;NETWORKING=yes&lt;/p&gt;

&lt;p&gt;HOSTNAME=imooc&lt;/p&gt;

&lt;p&gt;3. DNS配置文件&lt;/p&gt;

&lt;p&gt;vi /etc/resolv.conf&lt;/p&gt;

&lt;p&gt;nameserver xxx.xxx.xxx.xxx&lt;/p&gt;

&lt;p&gt;search localhost (比如输入imooc，自动访问imooc.localhost）&lt;/p&gt;

&lt;p&gt;4）图形界面配置IP地址&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;虚拟机网络参数配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1. 配置IP地址 （setup）&lt;/p&gt;

&lt;p&gt;2. 启动网卡 （ONBOOT=yes）&lt;/p&gt;

&lt;p&gt;service network restart&lt;/p&gt;

&lt;p&gt;3. 修改UUID&lt;/p&gt;

&lt;p&gt;1）删除Mac地址行&lt;/p&gt;

&lt;p&gt;2）rm -rf /etc/udev/rules.d/70-persistent-net.rules 删除网卡和Mac地址绑定文件&lt;/p&gt;

&lt;p&gt;3）重启系统&lt;/p&gt;

&lt;p&gt;4. 设置虚拟机网络连接方式&lt;/p&gt;

&lt;p&gt;桥接：利用电脑的物理网卡连接&lt;/p&gt;

&lt;p&gt;NAT：可以跟本机主机通信，而且可以用公网（VMnet8）&lt;/p&gt;

&lt;p&gt;HostOnly：可以跟主机通信，但是不能用公网（VMnet1）&lt;/p&gt;

&lt;p&gt;5.修改桥接网卡&lt;/p&gt;

&lt;p&gt;选择能通信的网卡。&lt;/p&gt;

&lt;p&gt;Linux网络命令：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网络环境查看命令&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ifconfig 查看与配置网络状态命令&lt;/p&gt;

&lt;p&gt;ifdown eth0 禁用网卡eth0&lt;/p&gt;

&lt;p&gt;ifup eth0&lt;/p&gt;

&lt;p&gt;netstat&lt;/p&gt;

&lt;p&gt;-t 列出TCP协议端口&lt;/p&gt;

&lt;p&gt;-u 列出UDP协议端口&lt;/p&gt;

&lt;p&gt;-n 不使用域名与服务名，而使用IP地址和端口号&lt;/p&gt;

&lt;p&gt;-l 仅显示在监听状态的连接&lt;/p&gt;

&lt;p&gt;-a 列出所有的网络连接&lt;/p&gt;

&lt;p&gt;-r 列出路由列，同route&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;如：netstat -an&lt;/td&gt;
      &lt;td&gt;grep ESTABLISHED&lt;/td&gt;
      &lt;td&gt;wc -l 列出多少服务器连接到这台机器&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;route -n == netstat -rn&lt;/p&gt;

&lt;p&gt;route add default gw 192.168.1.1&lt;/p&gt;

&lt;p&gt;nslookup www.baidu.com&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网络测试命令&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ping&lt;/strong&gt; IP -c 3&lt;/p&gt;

&lt;p&gt;telnet IP port&lt;/p&gt;

&lt;p&gt;taceroute IP/domain (利用ICMP协议，同ping）&lt;/p&gt;

&lt;p&gt;wget http://xxxxxxx/xxx/xxx.gz (下载）&lt;/p&gt;

&lt;p&gt;tcpdump -i eth0 -nnX port 21 (抓包）&lt;/p&gt;

&lt;en-media type=&quot;image/png&quot; hash=&quot;dd3a77f80cc4edbbc3f6c6e29c12a973&quot; style=&quot;height: auto;&quot; /&gt;

&lt;p&gt;&lt;strong&gt;SSH协议原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对称加密算法：单密钥密码系统的加密方法，同一个密钥同时用来加密和解密。&lt;/p&gt;

&lt;p&gt;非对称加密算法：
&lt;en-media type=&quot;image/png&quot; hash=&quot;ad3acd4c5dc7306d255541a53e0ab7b7&quot; style=&quot;height: auto;&quot;&gt;&lt;/en-media&gt;&lt;/p&gt;

&lt;en-media type=&quot;image/png&quot; hash=&quot;89715a36165a29984b0019f03211cf6b&quot; style=&quot;height: auto;&quot; /&gt;

&lt;p&gt;ssh 用户@IP&lt;/p&gt;

&lt;p&gt;vi ~/ssh/known_hosts&lt;/p&gt;

&lt;p&gt;下载文件 scp [-r] 用户@IP:文件路径 本地路径&lt;/p&gt;

&lt;p&gt;上传文件 scp [-r] 本地文件 用户@IP:上传路径&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java面试题练习   计算兄弟数字的分析和实现</title>
   <link href="http://blog.dellyqiao.com/coding/2015/03/13/java---"/>
   <updated>2015-03-13T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/coding/2015/03/13/java---</id>
   <content type="html">
&lt;p&gt;&lt;strong&gt;陈利人面试题之：&lt;/strong&gt; 给定一个数X，他的兄弟数Y定义为：是由X中的数字组合而成，并且Y是大于X的数中最小的。例如，38276的兄弟数字为38627。给定X，求Y。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原题及作者分析链接：&lt;/strong&gt; &lt;a href=&quot;http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5ODIzNDQ3Mw==&amp;amp;appmsgid=10000184&amp;amp;itemidx=1&amp;amp;sign=f080024b52b8bf130bd9c1c7860e4306&quot;&gt;http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5ODIzNDQ3Mw==&amp;amp;appmsgid=10000184&amp;amp;itemidx=1&amp;amp;sign=f080024b52b8bf130bd9c1c7860e4306&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;个人分析：&lt;/strong&gt; 个人认为，求得Y其实有两种情况： 1. X里面的最后一位数比倒数第二位数要大： 这个时候，直接交换那两位就可以得到Y了。比如：1234567，它的兄弟数字就是1234576.（由原数字组成，并且是比原数字大的数字里面的最小的一个。） - X里面的最后一位数比倒数第二位要小： 这个时候，就可以参照链接里的分析：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;blockquote&gt;
  &lt;p&gt;假设X的形式如下：x1x2x3…xky1y2y3y4，并且其中y1&amp;gt;y2&amp;gt;y3&amp;gt;y4，xk 3 4 7 2 2 6 4 1&lt;br /&gt;
首先找到，从右边开始的递增的、尽可能长的数位，这里是641。&lt;br /&gt;
3 4 7 2 2 (6 4 1)&lt;br /&gt;
则，选取前一位数字2，进行交换。641中，大于2的最小的值是4，则作如下交换：&lt;br /&gt;
3 4 7 2 4 (6 2 1)&lt;br /&gt;
为了得到最小值，对621，从小到大进行排序，得到&lt;br /&gt;
3 4 7 2 4 1 2 6&lt;br /&gt;
则，Y为34724126.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;java&quot;&gt;&lt;strong&gt;下面是我自己的Java实现&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;执行结果如下：&lt;br /&gt;
The original numbers are: [897654, 979984653, 1234567, 3456123]&lt;br /&gt;
Their brother numbers are: [945678, 979985346, 1234576, 3456132]  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package auguest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class BrotherNumber {
    public static void main(String[] args) {
        List&amp;lt;String&amp;gt; orgNums = Arrays.asList(&quot;897654&quot;, &quot;979984653&quot;, &quot;1234567&quot;, &quot;3456123&quot;);
        List&amp;lt;String&amp;gt; newNums = new ArrayList&amp;lt;String&amp;gt;();

        for (String orgNum : orgNums) {

            newNums.add(getBrotherNumber(orgNum));
        }

        System.out.println(&quot;The original numbers are: &quot; + orgNums);
        System.out.println(&quot;Their brother numbers are: &quot; + newNums);

    }

    public static String getBrotherNumber(String orgNum) {
        //定义一个新的字符串
        String newString = orgNum;
        int length = orgNum.length();

        char[] orgArray = orgNum.toCharArray();

        //比较最后两位，如果倒数第二位比最后一位大，则需要继续处理；如果小，则可以直接交换得到兄弟数列。
        if (compareEnd(orgArray[length-2], orgArray[length-1])) {

            char[] newArray = orgNum.toCharArray();

            //从倒数第二位往回找，直到找到之前的一位比当前位小的情况
            //比如：34568765，从6开始往左找，找到“8“这一位的位置
            int i = length - 2;
            while (i&amp;gt;0 &amp;amp; compareEnd(orgArray[i-1], orgArray[i])) {
                i --;
            }

            for (int j=length-1; j&amp;gt;i-1; j--) {
                if (compareEnd(orgArray[j], orgArray[i-1])) {
                    newArray = exchangeNumbers(orgArray, i-1, j);
                    break;
                }
            }

            String newFrontStr = new String(newArray, 0, i);

            char[] tmpArray = new String(newArray, i, length-i).toCharArray();
            Arrays.sort(tmpArray);

            newString = newFrontStr + new String(tmpArray);

        } else {
            newString = new String(exchangeNumbers(orgArray, length-2, length-1));
        }

        return newString;
    }


    public static boolean compareEnd(char last2, char last1) {
        return last2 &amp;gt; last1 ? true : false;
    }

    public static char[] exchangeNumbers(char[] orgCharArray, int pos1, int pos2) {
        char tmpChar = orgCharArray[pos2];
        orgCharArray[pos2] = orgCharArray[pos1];
        orgCharArray[pos1] = tmpChar;
        return orgCharArray;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;/div&amp;gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>解决IIS问题：HttpException (0x80004005): The current identity does not have write access to IIS Temporary ASP.NET Files.]</title>
   <link href="http://blog.dellyqiao.com/middleware/2015/03/13/iishttpexception-0x80004005-the-current-identity-does-not-have-write-access-to-iistemporary-aspnet-files"/>
   <updated>2015-03-13T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2015/03/13/iishttpexception-0x80004005-the-current-identity-does-not-have-write-access-to-iistemporary-aspnet-files</id>
   <content type="html">
&lt;p&gt;IIS Log中出现这个错误：&lt;/p&gt;

&lt;p&gt;[HttpException (0x80004005): The current identity (NT AUTHORITY\NETWORK SERVICE) does not have write access to ‘C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary &lt;a href=&quot;http://ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; Files’.]&lt;br /&gt;
System.Web.HttpRuntime.SetUpCodegenDirectory(CompilationSection compilationSection) +9022990&lt;br /&gt;
System.Web.HttpRuntime.HostingInit(HostingEnvironmentFlags hostingFlags) +152  &lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;1） 进入.NET 安装目录&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Windows\Microsoft.NET\Framework\v2.0.50727
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2） 执行此命令：&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aspnet_regiis -ga IUSR_&amp;lt;machinename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>在Apache中配置自签名证书(Self signed Certification in Apache)</title>
   <link href="http://blog.dellyqiao.com/security/2015/03/13/apacheself-signed-certification-in-apache"/>
   <updated>2015-03-13T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/security/2015/03/13/apacheself-signed-certification-in-apache</id>
   <content type="html">
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a self-signed certificate to enable SSL  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; Under /etc/apache2/  
 openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./ssl.key/&amp;lt;hostname&amp;gt;.key -out ./ssl.crt/&amp;lt;hostname&amp;gt;.crt
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;under /etc/apache2/vhost.d/  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; cp vhost-ssl.template vhost-ssl
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit vhost-ssl.conf, add below 2 lines in the &lt;virtualhost&gt; configuration:&lt;/virtualhost&gt;&lt;/p&gt;

    &lt;p&gt;SSLCertificateFile /etc/apache2/ssl.crt/&lt;hostname&gt;.crt  
 SSLCertificateKeyFile /etc/apache2/ssl.key/&lt;hostname&gt;.crt&lt;/hostname&gt;&lt;/hostname&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>如何从Symantec为自己的网站购买SSL证书</title>
   <link href="http://blog.dellyqiao.com/security/2015/03/12/symantecssl"/>
   <updated>2015-03-12T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/security/2015/03/12/symantecssl</id>
   <content type="html">
&lt;p&gt;当我们的网站有加密会话的需求的时候，我们会把所有的请求从HTTP协议转向HTTPS协议。使用HTTPS协议加密session的话我们就需要用到安全证书。当然我们可以自己生成安全证书，但是没人能证明你的安全证书本身足够安全。所以，我们需要从业界公认的证书提供商处去购买一个安全性强的证书，让他们来证明你的网站的会话确实可以被加密。。。。。。&lt;/p&gt;

&lt;p&gt;基于这样的需求，有实力的公司会选择信誉良好的证书提供商，以证明他们的网站确实很安全（在访问银行类保险公司类的网站的时候基本上每一个网页都会有HTTPS加密，浏览器的地址栏旁边会提示说安全证书哪家最强云云……），价格问题会放在其次。&lt;/p&gt;

&lt;p&gt;Symantec就是其中一个比较不错的证书提供商。但是他的网站的易用性确实不怎么好，很多时候申请的信息会莫名其妙的自动被修改。这篇文章是基于我自己的大量的证书申请经历创建的，按照本文的方法做，保你申请无忧。&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;本文以申请IBM HTTP Server的证书为例。另外Symantec网站的证书申请流程也已经经过了数次变更，目前的步骤仅适用于现在的情况。具体步骤如下：&lt;/p&gt;

&lt;h2 id=&quot;csr&quot;&gt;1. 创建证书申请CSR文件&lt;/h2&gt;

&lt;p&gt;IBM HTTP Server（IHS）的证书由几部分组成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kdb文件：用来存放安全证书的容器，存放公钥和私钥&lt;/li&gt;
  &lt;li&gt;cer文件：证书文件，也就是从证书提供商（以后简称CA —— Certificate Authority 身份认证机构，本文特指Symantec）得到的个人证书，私钥&lt;/li&gt;
  &lt;li&gt;csr文件：证书request文件，申请证书时得告诉CA你需要的是什么样的证书，那些信息就放在这个文件里&lt;/li&gt;
  &lt;li&gt;sth文件：kdb是需要设置密码的，这个文件就是用来放置密码的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意，除了kdb文件和sht文件之外，其他文件的扩展名都是任意的，csr,arm,txt统统没问题，关键的是文件的内容要符合规范需求。&lt;/p&gt;

&lt;p&gt;下面介绍如何生成CSR文件：&lt;/p&gt;

&lt;p&gt;IHS证书使用IHS自带的ikeyman去创建。打开{IHS Home}/bin/ikeyman，然后点击新建：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/1-1.png/scale&quot; alt=&quot;1-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;继续，为这个KDB设置密码，记住勾选将密码存储到文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/1-2.png/scale&quot; alt=&quot;1-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;密码设置完之后就能进入个人证书请求的界面了。选中个人证书请求项：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/1-3.png/scale&quot; alt=&quot;1-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最前面的四项是最重要的。&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;密钥标签：为即将申请到的个人证书起一个名字，如果你打算在这个KDB中放置多个证书，那就需要认真起名，便于以后在配置文件中能正确地设置。&lt;/li&gt;
  &lt;li&gt;密钥大小：定义密钥的大小，2048是一个不错的选择。&lt;/li&gt;
  &lt;li&gt;签名算法：这里看个人的需求。现在基本上都需要申请SHA256加密算法的证书，因为如果你选择SHA128，新版本的Chrome浏览器会认为你的网站加密算法太弱，不够安全。既然钱花到了，自然得买个好的。&lt;/li&gt;
  &lt;li&gt;共用名：这里要填写你的网站的域名。这儿要跟网站域名严格匹配，否则你的网站将会出现证书与域名不匹配的警告。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他项目根据自己的情况填写就好。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/1-4.png/scale&quot; alt=&quot;1-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;保存过后会生成一个certreq.arm文件，用任何编辑器打开这个文件即可看到里面的内容。把里面的内容拷贝出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/1-5.png/scale&quot; alt=&quot;1-1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;symantec&quot;&gt;2. 在Symantec网站上购买证书&lt;/h2&gt;

&lt;p&gt;首先，登录Symantec Trust Center网站，&lt;a href=&quot;https://trustcenter-enterprise.websecurity.symantec.com&quot;&gt;https://trustcenter-enterprise.websecurity.symantec.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;登录之后按照提示添加要购买的证书的域名相关的公司信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/2-1.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填写下图中的所有项目，最终要的项目是“Organization Information”和“Organization Contact”。注意：Organization公司名一定要填写真实完整的公司名，要填写在工商局注册的名字，Symantec自己有一个数据库，他们会去验证你的公司是否真实有效。&lt;/p&gt;

&lt;p&gt;联系人也要填写能联系到的人，在购买新证书的时候Symantec的支持团队会打电话给这个人确认你的订单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/2-2.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填完确定后就能看到刚刚填写的信息了。现在继续在”Domains authenticated”里添加跟这个“Organization”相关的域名。&lt;/p&gt;

&lt;p&gt;你也可以看到“Organizations”是一个列表，不止可以填一个。像我这样的工作性质，作为乙方，位甲方去购买证书的情况，这个设置是非常有用的，因为我的甲方有很多个国家的很多分公司，每个分公司的联络人都不一样。&lt;/p&gt;

&lt;p&gt;在“Domains Authenticated”里面填写好之后，比如我的“Organizations”是dellyserver，授权的域名包含了www.dellyserver.com，那么当我购买www.dellyserver.com的安全证书的时候就会直接调用我在之前填写的“dellyserver”公司的信息（包括地区，联系人，公司名，等等）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/2-3.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面的部分设置好之后就可以开始获取证书了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/2-4.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择一个证书的类型。每种证书的价格都是不一样的，根据个人需求选择需要的证书。一般选择“Secure Site Pro”就OK：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/2-5.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来就要用到我们的CSR了。“Server Type”中选择要购买的证书类型。我们需要IHS证书，所以选择Other。接下来把CSR文件里的内容粘贴到下面的框里。点击下一步。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/2-6.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;出现了一个警告信息，然后在右侧也出现了“Common Name”，说明证书申请已经被识别出来了。警告信息可以无视，重新点击下一步。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/2-7.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来到达了订单Summary，注意看好各项信息是否正确。&lt;/p&gt;

&lt;p&gt;注意：这里的“Location” “Country”这些项目有时候不会跟你的CSR申请完全一致。比如如果你的Symantec账户注册的时候选择的所在地是香港，而之前在设置Organization的时候也没有完全设置正确，那么我们在位泰国的这家公司购买证书的时候，这个City、Location就会很有可能变成中国。如果出现这种情况，也可以先下单，之后给Symantec的Support团队发邮件告诉他们做一下修正。&lt;/p&gt;

&lt;p&gt;（根据之前的经验，之前有段时间就算你的Organization设置正确了，这个location也会出问题。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/2-8.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;确认订单之后新买的证书就会出现在自己的SSL证书库中了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/2-9.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时Symantec网站上的相关操作就完成了，等待Symantec打电话核实订单就OK。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;3. 获取并导入证书&lt;/h2&gt;

&lt;p&gt;在经过几天的等待之后（一般两个工作日就差不多了），你将会收到Symantec发来的邮件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-1.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们的证书已经准备好了！所以，点开邮件中的连接，然后点击“Get started”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-2.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入到下载证书的界面，不管之前申请的证书是什么类型，现在都可以下载全类型的证书文件。（这个功能也是前段时间改版后才出现的）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-3.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们选择IHS，然后点击“Download”：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-4.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下载到的是一个压缩包，里面包含简要说明（getting_started.txt），个人证书（ssl_certificate.arm），Symantec提供的G4证书（IntermediateCA.arm），还有Symantec的G5证书（crossRootCA.arm）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-5.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用ikeyman打开我们之前创建的KDB文件，选择“Personal Certificates”项目，然后点击右侧的“Receive”按钮&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-6.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择“ssl_certificate.arm”，并且点击确定：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-7.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时将会看到在“Personal Certificates”项目下多出来一条“* xxxxxxx”的项目，这个就说明我们得到的个人证书已经正常导入到证书里了。也可以惦记个人证书申请项目，会发现申请的条目会自动消失。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-8.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来选择“Signer Certificates”签署人证书项目，这个项目是用来放置CA提供的公钥证书的。&lt;/p&gt;

&lt;p&gt;进入此项目之后，点击“Add”，分别选择我们得到的G4和G5证书，在取名的时候可以写G4和G5.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-9.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加G4和G5之后，CA证书还是不够，继续点击右侧的“Populate”按钮，把所有IHS的ikeyman工具内置的CA证书全部导入到KDB文件中。照图操作即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-10.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后CA证书导入完成，这个证书也就完全做好了。接下来就是修改HTTP Server的配置文件，引入这个KDB文件即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/04/3-11.png/scale&quot; alt=&quot;symantec&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;全文到此结束。如果在过程中有任何问题，也可以直接联系我进行讨论。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux学习笔记</title>
   <link href="http://blog.dellyqiao.com/server/2015/03/09/Linux-Learning-Notes"/>
   <updated>2015-03-09T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/server/2015/03/09/Linux-Learning-Notes</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;echo $SHELL
##永久改变shell
chsh -s /bin/bash [username]

##临时改变shell
/bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;linux&quot;&gt;Linux命令包括内部命令和系统命令&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;内部命令作为shell程序自身的子程序运行。Bash shell内部命令包括echo，exit，history。

系统命令是作为独立文件存在的程序，通过键入命令或文件名来执行。

帮助： info、help和man

help 可显示所有内部命令列表

man 提供系统命令的信息。man -k xxx 可以模糊搜索命令

一行输入;多个命令;用分号

!! 重复上个命令； !ma 可以执行上个以ma开头的命令

用一条命令作为另一命令的参数  echo `date`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section&quot;&gt;后台与前台切换命令&lt;/h3&gt;

&lt;p&gt;直接在命令后面加 &amp;amp; 开启后台任务&lt;/p&gt;

&lt;p&gt;如果有前台任务，Ctrl+Z可以挂起作业，然后输入bg把作业移入后台。&lt;/p&gt;

&lt;p&gt;输入 fg %jobnumber 把后台作业调到前台&lt;/p&gt;

&lt;p&gt;输入 kill %jobnumber 删除后台作业&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;文件操作&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ls
-c 按修改时间排列

mkdir -p abc/def/eft 连续创建子目录

rmdir -p abc/def/* 删除包括abc/def/下面的所有空子目录，如果abc/def也为空，删除这个目录。

设备到设备复制文件： dd xxxx

参数：
if=filename	源文件
of=filename	输出文件
bs=blocksize	每次读或写多少字节


mv 移动目录时，如果移动的是目录，目标目录已存在，则源目录会移动成为目标目录的子目录
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;信息显示命令&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;wc -c/-w/-l filename(s)

file xxxx 查看文件类型

touch 建新文件或修改现有文件的上次访问或修改时间。
-a 修改访问时间
-m 修改改变时间
-t 使用你指定的时间
-d 更新修改
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Training Daily</title>
   <link href="http://blog.dellyqiao.com/personal/2015/01/15/training-daily"/>
   <updated>2015-01-15T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/personal/2015/01/15/training-daily</id>
   <content type="html">
&lt;p&gt;得到了《囚徒健身》，开始力量训练。特在此记录每天的锻炼进度。&lt;/p&gt;

&lt;p&gt;不练不知道一练吓一跳，原来自己在力量方面这么弱。囚徒健身里有六艺，每艺有十个级别，也叫“十式”,今晚本打算做俯卧撑，深蹲，抬腿和引体向上的第一式，结果发现能做完俯卧撑和抬腿的第一式就不错了，深蹲的第一式完全做不到，引体向上也没精力尝试了。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;之前的跑步锻炼记录在这里：&lt;/p&gt;

&lt;p&gt;十二月记录：&lt;a href=&quot;http://dellyqiao.com/sporting-201412&quot;&gt;http://dellyqiao.com/sporting-240 * 21412&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;十一月跑步记录：&lt;a href=&quot;http://dellyqiao.com/sporting-201411&quot;&gt;http://dellyqiao.com/sporting-201411&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;十月跑步记录：&lt;a href=&quot;http://dellyqiao.com/pao-bu-liu-shui-zhang&quot;&gt;http://dellyqiao.com/pao-bu-liu-shui-zhang&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;按照作者给初学者的计划，每周做两次，每次做两艺的第一式，每次做两到三组，这种计划还是比较合理的。。。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;下面开始记录：&lt;/h3&gt;

&lt;p&gt;本周做俯卧撑，深蹲和引体向上的第一式，以及深蹲的第二式（第一式太难了！！！）&lt;/p&gt;

&lt;p&gt;做法在这儿：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/06/Daily/IMG_20150106_221654.jpg/scale2&quot; alt=&quot;alt 墙壁俯卧撑&quot; /&gt;
&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/11/zhedaoshendun.jpg/scale2&quot; alt=&quot;alt 折刀深蹲&quot; /&gt;
&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/06/Daily/IMG_20150106_221544.jpg/scale2&quot; alt=&quot;alt 坐姿屈膝&quot; /&gt;
&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/06/Daily/IMG_20150106_221611.jpg/scale2&quot; alt=&quot;alt 垂直引体向上&quot; /&gt;&lt;/p&gt;

&lt;p&gt;表中记录所做的力量训练，有氧运动（跑步），和晚饭状况（晚饭要少吃啊）：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;星期&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;日期&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;墙壁俯卧撑&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;折刀深蹲&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;坐姿屈膝&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;垂直引体向上&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;跑步&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;晚饭&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;二&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.06&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;50 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;10 * 1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;15 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0 * 0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;淀粉肠+红豆薏米粥+酸奶+瓜子&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;三&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.07&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;20 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;火腿肠&lt;em&gt;2 +酸奶&lt;/em&gt;2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;四&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.08&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;50 + 20&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;10 + 15&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 + 20&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;零食+牛奶燕麦&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;五&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.09&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;50 + 40&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;10 + 15&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;零食+小米粥&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;六&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.10&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;50 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;15 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;油泼面&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;日&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.11&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;泡面&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;一&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.12&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;30min&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;小米粥&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;二&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.13&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;50 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;15 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;三&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.14&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;麦片粥&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;四&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.15&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;零食&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;五&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.16&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;50 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;15 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;40 * 2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;麻辣烫&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;六&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.17&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Forgot&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;日&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.18&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Forgot&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;一&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.19&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Forgot&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;二&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.20&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Forgot&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;三&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.21&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;30min&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Forgot&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;四&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.22&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Forgot&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;五&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;01.23&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Forgot&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title>解决IHS/Plugin/WAS环境中请求转发失败的问题（500错误）</title>
   <link href="http://blog.dellyqiao.com/middleware/2014/12/09/Resolve-Error-500"/>
   <updated>2014-12-09T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2014/12/09/Resolve-Error-500</id>
   <content type="html">&lt;p&gt;这几天遇到了一个IHS到WAS请求转发失败的问题，所以就打算把常见的几种错误和排错的经验写出来了。&lt;/p&gt;

&lt;p&gt;文章内容仅适用于IHS和WAS分别安装在不同服务器上的情况，文章里提到的一些错误在其他情况下也许根本就不会发生。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;section&quot;&gt;本例中环境的配置：&lt;/h2&gt;

&lt;p&gt;IHS和WAS分别装在两台服务器上，两台服务器分别位于不同的DMZ，DMZ之间有防火墙，在防火墙上只开通了必要的端口。&lt;/p&gt;

&lt;p&gt;在本例中，公网用户通过公网IP(public_ip)，端口80和443访问IHS服务器，IHS服务器(IP地址为：ihs_server)上安装了Plugin，plugin通过端口9081把网站的请求转发到WAS服务器(IP地址为：was_server)。假设要请求的资源在WAS服务器上，叫abc.jsp.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;出现的问题：&lt;/h2&gt;

&lt;p&gt;从公网测试：&lt;/p&gt;

&lt;p&gt;http://public_ip/abc.jsp — abc.jsp可以正常显示&lt;/p&gt;

&lt;p&gt;https://public_ip/abc.jsp — 500 Internal Server Error&lt;/p&gt;

&lt;p&gt;从IHS服务器上测试：&lt;/p&gt;

&lt;p&gt;http://ihs_server/abc.jsp — abc.jsp可以正常显示&lt;/p&gt;

&lt;p&gt;https://ihs_server/abc.jsp — 500 Internal Server Error&lt;/p&gt;

&lt;p&gt;从IHS和WAS服务器上分别测试：&lt;/p&gt;

&lt;p&gt;http://was_server:9081/abc.jsp – abc.jsp可以正常显示&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting和问题分析&lt;/h2&gt;

&lt;h3 id=&quot;plugincfglog&quot;&gt;1）首先看plugin_cfg.log，错误信息如下：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Wed Dec 03 15:40:13 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereGetStream: Connect timeout fired

[Wed Dec 03 15:40:18 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereGetStream: Connect timeout fired

[Wed Dec 03 15:40:18 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereExecute: Failed to create the stream

[Wed Dec 03 15:40:18 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereHandleRequest: Failed to execute the transaction to ‘wasserverNode01_abc&#39;on host ‘wasserver&#39;; will try another one

[Wed Dec 03 15:40:23 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereGetStream: Connect timeout fired

[Wed Dec 03 15:40:28 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereGetStream: Connect timeout fired

[Wed Dec 03 15:40:28 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereExecute: Failed to create the stream

[Wed Dec 03 15:40:28 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereHandleRequest: Failed to execute the transaction to ‘wasserverNode01_abc&#39;on host ‘wasserver&#39;; will try another one

[Wed Dec 03 15:40:28 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereWriteRequestReadResponse: Failed to find an app server to handle this request

[Wed Dec 03 15:40:28 2014] 00000dbc 00000e78 - ERROR: ESI: getResponse: failed to get response: rc = 2

[Wed Dec 03 15:40:28 2014] 00000dbc 00000e78 - ERROR: ws_common: websphereHandleRequest: Failed to handle request
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段错误的LOG完全给不出有用的信息，只是在说无法建立连接，导致请求处理失败。&lt;/p&gt;

&lt;p&gt;奇怪的地方是http没问题但是https就不行。&lt;/p&gt;

&lt;h3 id=&quot;logihserror-logwasjvm-loghttpswas&quot;&gt;2）继续检查其他所有的Log，包括IHS的error log——没有任何错误信息，WAS的JVM log——用https做的访问请求完全没有任何输出，意味着请求完全没有到达WAS应用。&lt;/h3&gt;

&lt;h3 id=&quot;plugin-config&quot;&gt;3）继续怀疑是plugin config文件的问题，但是试过很多更改，全部都是一样的效果。&lt;/h3&gt;

&lt;p&gt;怎么办？还是怀疑问题出在plugin的转发过程上。想起来plugin的Log level是可以更改的，我们所设置的leve是ERROR，只有在plugin转发出现ERROR信息的时候才会保存到plugin_cfg.log文件内。现在试着把完整地跟踪信息输出。&lt;/p&gt;

&lt;p&gt;更改plugin_cfg.xml： 找到这行配置：&lt;em&gt;LogLevel&lt;/em&gt;=“Error”， 把Error改成Trace即可。可以等1分钟自动重新加载plugin配置文件或者直接重启IHS服务立刻生效。&lt;/p&gt;

&lt;p&gt;果然发现问题了，在plugin log里有这么一段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Wed Dec 03 17:17:07 2014] 00001220 000012a4 - TRACE: ws_server_group: lockedServerGroupUseServer: Server wasserver_abc picked, weight 2.

[Wed Dec 03 17:17:07 2014] 00001220 000012a4 - TRACE: ws_common: websphereFindTransport: Finding the transport

[Wed Dec 03 17:17:07 2014] 00001220 000012a4 - DETAIL: ws_common: websphereFindTransport: Setting the transport(case 1): wasserver on port 9444

[Wed Dec 03 17:17:07 2014] 00001220 000012a4 - TRACE: ws_common: websphereExecute: Executing the transaction with the app server reqInfo is OKuseExistingStream=0, client-&amp;gt;stream=00000000

[Wed Dec 03 17:17:07 2014] 00001220 000012a4 - DEBUG: ws_common: websphereGetStream: Getting the stream to the app server

[Wed Dec 03 17:17:07 2014] 00001220 000012a4 - TRACE: ws_transport: transportStreamDequeue: Checking for existing stream from the queue

[Wed Dec 03 17:17:07 2014] 00001220 000012a4 - TRACE: ws_common: websphereGetStream: Have a connect timeout of 5; Setting socket to not block for the connect

[Wed Dec 03 17:17:12 2014] 00001220 000012a4 - TRACE: errno 0

[Wed Dec 03 17:17:12 2014] 00001220 000012a4 - TRACE: RET 0

[Wed Dec 03 17:17:12 2014] 00001220 000012a4 - TRACE: READ SET 0

[Wed Dec 03 17:17:12 2014] 00001220 000012a4 - TRACE: WRITE SET 0

[Wed Dec 03 17:17:12 2014] 00001220 000012a4 - TRACE: EXCEPT SET 0

[Wed Dec 03 17:17:12 2014] 00001220 000012a4 - ERROR: ws_common: websphereGetStream: Connect timeout fired
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上看到这一行：Setting the transport(case 1): wasserver on port 9444 就大概明白了，IHS在进行请求转发的时候使用的不是9081，而是9444，9444是wc_default_secure端口，也就是WAS服务器容器的安全传输端口。而9444端口在IHS和WAS之间并没有打开。&lt;/p&gt;

&lt;p&gt;看来在处理https请求的时候，IHS会尝试使用安全端口吧请求转发到WAS。&lt;/p&gt;

&lt;p&gt;所以现在的问题变成了如何让IHS利用9081端口而不是9444端口？&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;问题解决&lt;/h2&gt;

&lt;p&gt;在plugin_cfg.xml配置文件中，有一行关于kdb文件的配置信息，里面写明了所使用的plugin.kdb文件放置的路径。删掉这行配置，或者删掉对应的kdb文件就好了。&lt;/p&gt;

&lt;p&gt;KDB文件是IBM的用来存放安全证书的文件，安全证书用来给session加密。下一次当IHS找不到安全证书的时候自然就会退而求其次使用没有安全加密的端口9081了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Theme for Postach.io - 适用于中国大陆postach.io用户的博客主题</title>
   <link href="http://blog.dellyqiao.com/tools/2014/03/15/theme-for-postachio"/>
   <updated>2014-03-15T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/tools/2014/03/15/theme-for-postachio</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;要干嘛&lt;/h3&gt;
&lt;p&gt;如果你在使用postach.io用evernote发博客，就一定有想法定制一下初始的主题，如果你发现不管怎么定制怎么换博客的速度依然很慢，那请试试我发布的这个主题吧。&lt;/p&gt;

&lt;p&gt;这几天把自己的博客主题大翻修了一下，访问速度可以算是大幅提升了，因此就想把这个主题共享出来供大家使用，对所有的大陆用户来说，这绝对是能减少你工作量和头疼度的最好选择。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section-1&quot;&gt;地址&lt;/h3&gt;
&lt;p&gt;地址在这儿：&lt;a href=&quot;https://github.com/qiaodeli111/theme-for-postach.io.git&quot;&gt;https://github.com/qiaodeli111/theme-for-postach.io.git&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;主题的替换方法&lt;/h3&gt;
&lt;p&gt;Step 1）从Github中把我的主题fork到你自己的repository中。&lt;/p&gt;

&lt;p&gt;Step 2）
登录postach.io » 编辑站点 » Edit Theme » 绑定Github » 从下拉列表中选择 theme-for-postach.io » 应用&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;截图&lt;/h3&gt;

&lt;p&gt;自适应桌面设备和移动设备：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/02/screenshot-s.png&quot; alt=&quot;alt Large&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/02/screenshot-l.png&quot; alt=&quot;alt Small&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;关于本主题&lt;/h3&gt;

&lt;p&gt;本主题基于postach.io出品的默认主题&lt;a href=&quot;https://github.com/postachio/theme-original.git&quot;&gt;theme-original&lt;/a&gt;制作而来，采用BootStrap3.3.0搭建（原主题使用2.3.1，实在是已经过时了），利用BootStrap的响应式布局使得本主题自适应桌面设备和移动设备。请放心使用。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;应用到自己的博客&lt;/h3&gt;

&lt;p&gt;Fork 这个项目到自己的项目列表中，然后在postach.io的站点管理功能里选择此主题就可以应用这个主题啦。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;关于主题的使用&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;主题已添加百度分享按钮和有言评论系统，如有需要，请在theme.html中找到相关的部分，替换相关代码即可。&lt;/li&gt;
  &lt;li&gt;关于归档。postach.io实际上不提供归档功能，但是提供标签功能。通过标签为文章归档，点击标签也可以获得所有在该标签分类下的文章列表。&lt;/li&gt;
  &lt;li&gt;静态资源的分离是博客站点提速的关键。对于静态资源库，比如图片资源，CSS资源和JS资源，我个人是把它们都放到了七牛CDN上，你有以下选择：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;公共资源（JQuery，BootStrap等）&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;直接使用我的七牛CDN公共连接。我不保证所有的公共连接永久生效。&lt;/li&gt;
  &lt;li&gt;自己找国内的CDN托管库，比如又拍云CDN，百度CDN等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;个人静态资源（比如个人定制的style.css和个人头像的图片）&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;申请一个CDN平台，然后修改好放到自己的CDN平台上，通过静态外链URL引用（&lt;strong&gt;推荐&lt;/strong&gt;）&lt;/li&gt;
  &lt;li&gt;放到postach.io的平台上，通过主题标签引用（引用方法会在theme.html中提供——theme.html 18行和252行）（默认）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-7&quot;&gt;关于修改调试&lt;/h3&gt;

&lt;p&gt;Postach.io相较于github的一个好处就是发布的页面不必等30分钟以后才生效，主题资源即时同步到Github，效果即时同步。所以虽说不能搭建本地调试环境，但是终归调试起来还算方便。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;为什么要发布本主题&lt;/h3&gt;

&lt;p&gt;对于国外的postach.io用户，本主题基本没有意义（除非有人赞同我的审美取向：））。对于在长城墙的国内用户来说，主要可以解决两个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;速度慢&lt;/li&gt;
  &lt;li&gt;不够大&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-9&quot;&gt;1）速度问题的由来&lt;/h4&gt;
&lt;p&gt;theme-original主题留给用户的可定制空间比较少，他的初衷是为了解耦，公共部分如果需要修改，只需修改一次所有用户都能受益，而且只把跟用户相关的部分暴露出来，也减少用户的学习成本，减少出问题的几率。&lt;/p&gt;

&lt;p&gt;但是问题是本主题的公共静态资源库（比如CSS，JS）全都托管在国外的服务平台上，比如Google，Amazon云（postach.io本身好像就是托管在Amazon云平台上的），而且你还没得选。这样一来在访问自己站点的时候速度慢得不是一点点了。&lt;/p&gt;

&lt;p&gt;比如：JQuery的引用，原主题给出的可供修改的主题页面只有theme.html，在其中使用了标签，主题读取这个标签后，可以得到JQuery的引用和一些有特殊作用的脚本，而作者所引用的JQuery库是托管在GoogleAPI上的。如果用这样的主题，国外用户没什么感受，国内的用户会看到页面载入的小圈会一直转一直转，因为国内压根就连不上googleapi。&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;2）不够大&lt;/h4&gt;
&lt;p&gt;这个问题纯属个人喜好，个人希望自己的博客网站整体上简洁一点，字体稍微大一点，每一页显示的字数稍微多一点，页面利用率稍微高一点，当然了，功能也不能缺失。原主题只满足简洁的特点，其他特点都需要自己改动。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;联系作者&lt;/h3&gt;
&lt;p&gt;任何问题请联系我：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.dellyqiao.com&quot;&gt;博客网站&lt;/a&gt;上留言&lt;/li&gt;
  &lt;li&gt;Github项目留言&lt;/li&gt;
  &lt;li&gt;通过邮箱联系到我：qiaodeli111@126.com&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>如何重新部署Websphere Console控制台</title>
   <link href="http://blog.dellyqiao.com/middleware/2014/03/11/websphere-console"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2014/03/11/websphere-console</id>
   <content type="html">
&lt;p&gt;对于StandAlone服务器，跳转到${profile_home}/bin。&lt;/p&gt;

&lt;p&gt;对于ND集群，控制台是部署在DMGR上的，要跳转到${WAS_HOME}/bin。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;然后执行这个命令删除：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wsadmin.bat -lang jython -f [deployConsole.py](http://deployConsole.py) remove  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行这个命令重新安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wsadmin.bat -lang jython -f [deployConsole.py](http://deployConsole.py) install  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Websphere自动化管理方法集和脚本示例</title>
   <link href="http://blog.dellyqiao.com/middleware/2014/03/11/websphere"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2014/03/11/websphere</id>
   <content type="html">
&lt;p&gt;作为IBM Websphere产品的运维工程师，我们都知道Websphere提供了两种进行管理的工具：基于WEB界面的图形化工具，还有wsadmin工具。&lt;/p&gt;

&lt;p&gt;在做日常维护做一些小改动的时候，图形工具当然是最佳选择，但是在创建一个全新的环境或者在做迁移的时候，或者有一些固定的批量动作需要定时执行的时候，图形工具并不是最快最省力的方式，这时就需要用到wsadmin工具了。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;wsadmin内置五大对象，每个对象负责特定的一些功能，我们可以通过JACL语法和Jython语法来调用这些内置对象。当然很明显Jython要比JACL强大的多，而且对于熟悉高级编程语言的人来说，Jython也更简单（跟Python语法一致），所以在编写自动化脚本的时候，基本的思路就是：Jython负责逻辑部分，调用wsadmin的内置对象实现特定的功能。&lt;/p&gt;

&lt;p&gt;要说从头开始编写一套可以直接使用的脚本其实也是挺复杂的，正好我从IBM网站上找到了一个Websphere方法集，叫wasadminlib.py，既然有现成的那就用起来吧。本文主要目的是分享这个文件，并且介绍一下基本的使用方法。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;下载&lt;/h2&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;http://dellyqiao.qiniudn.com/2015/02/03/wsadminlib.py&quot;&gt;http://dellyqiao.qiniudn.com/2015/02/03/wsadminlib.py&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;如何使用&lt;/h2&gt;

&lt;h3 id=&quot;pywasadminlibpy&quot;&gt;1. 创建一个个人的py文件，用来放置自己的逻辑代码。并且把这个文件跟wasadminlib.py放置在同一个文件夹下&lt;/h3&gt;

&lt;p&gt;这里我们创建一个createJAAS.py，用来创建JAAS认证别名。&lt;/p&gt;

&lt;h3 id=&quot;createjaaspywasadminlibpy&quot;&gt;2. 在createJAAS.py中引入wasadminlib.py&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;execfile(&#39;wsadminlib.py&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意！这里要用execfile，不要用import&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;3. 编写自己的逻辑代码&lt;/h3&gt;

&lt;p&gt;这里我把自己的创建JAAS的逻辑代码贴出来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execfile(&#39;wsadminlib.py&#39;)

//我们要从JAAS.txt中读取需要创建的认证别名，用户名和密码。
f = open(&quot;JAAS.txt&quot;)
line = f.readline()
while line:
    print line
    attrs = line.split(&#39;,&#39;)
    //这里的createJAAS就是wasadminlib.py提供的方法
    createJAAS(attrs[0], attrs[1], attrs[2])
    line = f.readline()
f.close()

AdminConfig.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来也要创建一个JAAS.txt文件，内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;testing1, user1, testing1
testing2, user2, testing2
testing3, user3, testing3
testing4, user4, testing4
testing5, user5, testing5
testing6, user6, testing6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个文件里的三列分别代表：别名，用户名，密码。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意在编写JAAS.txt文件的时候，理论上是不应该有空格的，但是在我的测试环境Websphere8.0中，实际上是可以自动忽略前后的空格，所以加上也无所谓，观感上也会稍微好一点。如果不放心可以不加空格。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;4. 测试和调用&lt;/h3&gt;

&lt;p&gt;//跳转到脚本所在的位置
	cd C:\WASScript\&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//如果没有设置安全性，那可以不用添加 -username 和 -password 参数
c:\IBM\WebSphere\AppServer\profiles\AppSrv01\bin\wsadmin.bat -lang jython -f createJAAS.py -username xxxx -password xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试的时候需要注意：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;可以先注释掉&lt;code&gt;AdminConfig.save()&lt;/code&gt;，这行代码用来保存之前所有的配置，所以在确定语法以及一切都没问题之前，先不要让这句代码生效。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果想要测试wasadminlib.py的功能，可以直接用wsadmin工具测试。方法如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; //以Jython语法打开wsadmin工具
 c:\IBM\WebSphere\AppServer\profiles\AppSrv01\bin\wsadmin.bat -lang jython
 //引入wsadminlib.py
 execfile(&#39;wsadminlib.py&#39;)
 //现在就可以直接在这个交互的命令行里使用wsadminlib.py里面的方法了
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-4&quot;&gt;脚本示例&lt;/h2&gt;

&lt;p&gt;上面的例子中我写了一个创建JAAS的方法，下面例举了创建DataSourceProvider和DataSource的方法：&lt;/p&gt;

&lt;h3 id=&quot;dsprovider&quot;&gt;创建DSProvider：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;execfile(&#39;wsadminlib.py&#39;)

f = open(&quot;DBProvider.txt&quot;)
line = f.readline()


while line:
	attrs = line.split(&#39;,&#39;)
	print attrs
	
	//createJdbcProvider方法里的第一个参数server不是server的名字，而是Websphere为你的server生成的唯一的ID，如果想要把provider创建在Cell或Node下也一样，要找出对应的唯一ID。这个ID可以用wsadminlib.py提供的getXXXID()来找到，也可以从对应的scope的resources.xml文件里找到。
	serverID = getServerId(attrs[0],attrs[1])
	providerID = createJdbcProvider(serverID, attrs[2], attrs[3], attrs[4], attrs[5], attrs[6])
f.close()

AdminConfig.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相关的DBProvider.txt如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//可以根据需求修改脚本和这个文件。比如如果你的provider是要创建到Node这个scope之下的，第二个参数“server1”就没用了，在脚本中也需要调用getNodeID(attrs[0])来获取到“dellyserverNode01”的唯一ID。
dellyserverNode01,server1,mssql1,C:/drivers/mysql-driver.jar,C:/drivers/mysql-driver.jar,com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource,MySQL by Script,None
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;datasource&quot;&gt;创建DataSource：&lt;/h3&gt;

&lt;p&gt;wsadminlib.py提供了两种创建DataSource的方法，这个是简单通用的那种，仅仅是创建一个基本的DataSource，具体的DB name，DB server name，等等，都需要手动去创建。另一个方法是createDataSource_ext，需要提供很多的参数，有兴趣的自己搞一下吧。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execfile(&#39;wsadminlib.py&#39;)


f = open(&quot;DataSource.txt&quot;)
line = f.readline()

while line:
    attrs = line.split(&#39;,&#39;)
    print attrs
    
    //注意：wsadminlib.py提供了一些获取某些ID（比如server，cell，node）的方法，但是没有提供获取JDBCProvider的唯一ID的方法，像这种需求就可以用getObjectByXXX来获取，除了byName还可以ByNodeName，等等。具体请查看wsadminlib.py本身。
    providerID = getObjectByName(attrs[0])

    print createDataSource(providerID, attrs[1], attrs[2], attrs[3], attrs[4], attrs[5], attrs[6])
    line = f.readline()

f.close()

AdminConfig.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相关的DataSource.txt：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql_driver,user,userstable,jdbc/user,10,testing1,com.ibm.websphere.rsadapter.GenericDataStoreHelper
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;所有脚本可以从这里下载：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dellyqiao.qiniudn.com/2015/02/03/WASScript.zip&quot;&gt;http://dellyqiao.qiniudn.com/2015/02/03/WASScript.zip&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WAS日常维护中的重启时机——总结</title>
   <link href="http://blog.dellyqiao.com/middleware/2014/03/11/was"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2014/03/11/was</id>
   <content type="html">
&lt;p&gt;本笔记会不断更新，用来记录一下在WAS日常维护中的重启时机问题。 &lt;/p&gt;

&lt;p&gt;在做WAS的维护过程中，生产环境要求最大可能的不要有中断，所以重启的时机其实是一个非常值得记住的东西，有的时候因为没有重启或者重启的java进程不正确而导致大量的时间浪费也是非常正常的。谨以此文记录一下我个人的经验总结：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;JDBC：&lt;/p&gt;

&lt;p&gt;1）创建数据源、数据Provider的时候：一定需要重启！&lt;/p&gt;

&lt;p&gt;如果创建的时候选择的scope是Cell，那就需要重启DMGR；如果scope是Node，那就需要重启对应的Nodeagent；如果scope是Cluster，那就需要重启cluster下面所有的Application Server（可以逐一重启以确保高可用性）；如果scope是Application Server，那就需要重启Application Server。&lt;/p&gt;

&lt;p&gt;2）修改数据源、数据Provider的时候：根据创建时候选择的scope不同而不同。&lt;/p&gt;

&lt;p&gt;如果创建时候选择的scope是Cell，修改数据源后不需要重启任何东西，只需要保存并同步配置即可！&lt;/p&gt;

&lt;p&gt;如果创建时候选择的scope是其他的，就需要重启对应的进程（Node scope重启nodeagent，cluster scope重启cluster，server scope重启server）。&lt;/p&gt;

&lt;p&gt;PS：在可选的scope中有Cell和CellManager，从我个人经验来说，在使用上是没有差别的。感觉上可能IBM是建议我们把需要创建到Cell上的资源统统选择为CellManager，因为如果部署默认应用的话，是会再CellManager上默认给创建一个资源的。具体是否如此，以后需要多查阅去确认了。。。&lt;/p&gt;

&lt;p&gt;另PS：不论你的JDBC资源创建在哪个Scope之下，如果有条件的话尽量把影响到的应用重启一下。因为尽管理论上来说是跟上面我说的情况相同的，但是实际上也许是Websphere本身的bug，有的建立在Server级别下的JDBC修改过后重启Server不起作用，还需要重启nodeagent；有时建立在Cell级别的数据源改动后也需要重启Server。所以，重启吧，尽量保证我们的应用服务器可以应用到最新的配置。&lt;/p&gt;

&lt;p&gt;Application：&lt;/p&gt;

&lt;p&gt;1）修改Application上面的设置：不需要重启，只需要保存并同步配置即可。&lt;/p&gt;

&lt;p&gt;验证：可以修改一下Context Root或者JDBC引用来试试。&lt;/p&gt;

&lt;p&gt;PS：Integrated Solution Console事实上也是一个部署在DMGR JVM上的一个应用程序，所以对控制台的任何更改也是都不需要重启的。&lt;/p&gt;

&lt;p&gt;JVM：&lt;/p&gt;

&lt;p&gt;1）修改Application Server，NodeAgent，DMGR的设置：必须重启才会生效。&lt;/p&gt;

&lt;p&gt;暂且先记录这么多，如果有其他重启时机相关的问题，会继续更新。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>批量检测网站访问速度</title>
   <link href="http://blog.dellyqiao.com/server/2014/03/11/testing-multiple-websites-response-time"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/server/2014/03/11/testing-multiple-websites-response-time</id>
   <content type="html">
&lt;p&gt;需求如下：&lt;/p&gt;

&lt;p&gt;我有一大堆需要维护的网站，每天早上都需要检查所有的网站是否存在异常然后给management发一份报告。简单来说需要查看每个网站的响应速度是否超过了设定的阈值（比如&amp;lt;10秒）。&lt;/p&gt;

&lt;p&gt;如何达成？以前用zabbix监控所有的网站，但是那东西太大型了，我需要一个能在本机运行而且耗费资源很少的工具，所以这里就要用到ab和abs。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;ab和abs是Apache附带的一个工具，在Apache安装目录的bin文件夹里就能找到，ab用来测试http网站，abs可以测https。想要使用这个工具的话可以下载Apache。如果不想要整个apache目录的话可以只保留bin文件夹，也是没有问题的。&lt;/p&gt;

&lt;p&gt;我们工作所用的电脑都是windows系统，所以写一个简单的windows脚本来实现批量检查吧。&lt;/p&gt;

&lt;p&gt;1） 写一个脚本，比如scan.bat，内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
for /F %%u in (serverlist.txt) do echo %%u &amp;gt;&amp;gt; Report.txt &amp;amp;&amp;amp; bin\abs %%u | findstr Time | findstr per | findstr (mean) &amp;gt;&amp;gt; Report.txt &amp;gt;&amp;gt; Report.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2） 创建一个放置网址的文件 serverlist.txt，把所有需要检测的网站都放进去，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.baidu.com/
http://abc.com/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意：如果网址没有指定URI，比如http://www.baidu.com/，在网址的最后必须要加上”/”，否则ab和abs无法识别！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3） 把Apache的bin文件夹拷贝到同目录下，运行scan.bat。&lt;/p&gt;

&lt;p&gt;输出结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.baidu.com/   
Time per request: 655.037 [ms] (mean)

http://www.sina.com/
Time per request: 633.037 [ms] (mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不要问我为什么输出的结果这么难看，不好意思用windows脚本处理字符串实在太蛋疼了。。。。。。&lt;/p&gt;

&lt;p&gt;如果有Linux系统的话，你可以做的更好，比如吧响应时间的毫秒转换成秒，然后跟阈值比较，大于阈值的可以直接输出个Fail之类的，自由发挥好了。&lt;/p&gt;

&lt;p&gt;附上abs工具的用法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage: bin\abs.exe [options] [http[s]://]hostname[:port]/path 

Options are:

-n requests Number of requests to perform

-c concurrency Number of multiple requests to make

-t timelimit Seconds to max. wait for responses

-b windowsize Size of TCP send/receive buffer, in bytes

-p postfile File containing data to POST. Remember also to set -T

-u putfile File containing data to PUT. Remember also to set -T

-T content-type Content-type header for POSTing, eg.

&#39;application/x-www-form-urlencoded&#39;

Default is &#39;text/plain&#39;

-v verbosity How much troubleshooting info to print

-w Print out results in HTML tables

-i Use HEAD instead of GET

-x attributes String to insert as table attributes

-y attributes String to insert as tr attributes

-z attributes String to insert as td or th attributes

-C attribute Add cookie, eg. &#39;Apache=1234. (repeatable)

-H attribute Add Arbitrary header line, eg. &#39;Accept-Encoding: gzip&#39;

Inserted after all normal header lines. (repeatable)

-A attribute Add Basic WWW Authentication, the attributes

are a colon separated username and password.

-P attribute Add Basic Proxy Authentication, the attributes

are a colon separated username and password.

-X proxy:port Proxyserver and port number to use

-V Print version number and exit

-k Use HTTP KeepAlive feature

-d Do not show percentiles served table.

-S Do not show confidence estimators and warnings.

-g filename Output collected data to gnuplot format file.

-e filename Output CSV file with percentages served

-r Don&#39;t exit on socket receive errors.

-h Display usage information (this message)

-Z ciphersuite Specify SSL/TLS cipher suite (See openssl ciphers)

-f protocol Specify SSL/TLS protocol

(SSL2, SSL3, TLS1 or ALL)
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>用Shell生成Zabbix监控的数字报表</title>
   <link href="http://blog.dellyqiao.com/monitoring/2014/03/11/shellzabbix"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/monitoring/2014/03/11/shellzabbix</id>
   <content type="html">
&lt;p&gt;我们都知道Zabbix是一个非常强大的监控工具，我们公司也在用Zabbix监控所有网站的状态。&lt;/p&gt;

&lt;p&gt;最近有一个需求，就是我们需要生成一份报告，报告里要包含前一天一整天的时间节点和对应的响应时间，这样的报告用来统计网站的可用性达到了什么水准。比如一个Excel格式的报表就ok。&lt;/p&gt;

&lt;p&gt;Zabbix本身自带报告功能，可是都是图像的，并没有数据格式的。虽然没有提供数据格式的报表，但是Zabbix提供了一套API，可以根据需求获取对应的数据（JSON格式），于是我就写了个脚本，用来把每个监控的网址的监控数据输出到一个CSV文件中。（后续可以用Excel做一个宏去把所有收集到的CSV文件集合成一个XLS文件，这个Excel文件可以下载到：）&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&quot;http://dellyqiao.qiniudn.com/2015/03/11README.xls&quot;&gt;README.xls&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;PS：服务器上面没有任何高级编程语言的编译工具或者运行环境，所以一切数据都用shell脚本去处理。用shell处理Json，蛋疼的不是一点点。。。。。。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本脚本可以收集前一天所有监控的URL的响应速度数据，每个URL对应一个单独的CSV文件。收集完之后会把所有的CSV和README.xls打包发给预订的邮箱。当你收到这个zip包之后，解压，打开README.xls，点击里面的大按钮就可以生成一个集成的报表了，集成的报表中，每个URL对应一个excel标签，方便查看。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;脚本如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash  
  
##获取api的授权码，后面获取需要的信息的时候要用到。  
  
##先根据官方方法获取授权，之后会有一段输出信息，其中包含授权码，用awk处理一下就能得到那串码了。  
authjson=`curl -l -X POST -H &#39;content-type: application/json&#39; -d &#39;{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;user.authenticate&quot;,&quot;params&quot;:{&quot;user&quot;:&quot;Admin&quot;,&quot;password&quot;:&quot;zabbix&quot;},&quot;id&quot;:1}&#39; http://127.0.0.1/zabbix/api_jsonrpc.php`  
authstr=`echo $authjson | awk -F &quot;[,:\&quot;]&quot; &#39;{print $11}&#39;`  
echo $authstr  
  
##报告的初始时间和结束时间（前一天的0点到24点）  
from=`date &quot;+%Y-%m-%d 00:00:00&quot; -d&quot;-1day&quot;`  
echo $from  
now=`date &quot;+%Y-%m-%d 00:00:00&quot;`  
  
##转换为Linux时间格式，Zabbix只支持这种格式。  
from=`date -d &quot;$from&quot; &#39;+%s&#39;`  
now=`date -d &quot;$now&quot; &#39;+%s&#39;`  
  
##每隔监控的网址在数据库中都有对应的一条记录，现在直接从数据库中获取所有的网址对应的ID。  
  
##getID.sql的内容如下：  
  
##select items.itemid from items join hosts on (items.hostid=hosts.hostid) where items.description like &#39;%response time%&#39; and hosts.host like &#39;%WebSite%&#39; and items.status=0; (sql文件可以根据实际情况编写，只要能得到所有受监控网址的ID就好。)  
  
  
mysql --user=root --password=zabbix zabbix &amp;lt; getMalaysiaID.sql &amp;gt; /etc/scripts/outputMYID.txt  
  
  
##mysql命令获取到的ID是有一个表头的，去掉。  
sed &#39;1d&#39; /etc/scripts/outputMYID.txt &amp;gt; /etc/scripts/outputMYID_Daily.txt  
  
##清理以前的临时文件  
rm -rf /etc/scripts/dailyreports/tmpjson/*.txt  
  
##获取每一个ID对应的网址的历史监控记录，Json格式，用时间段来做限定。  
for i in `cat /etc/scripts/outputMYID_Daily.txt`  
do  
jsonstr=&quot;{\&quot;jsonrpc\&quot;: \&quot;2.0\&quot;,\&quot;method\&quot;:\&quot;history.get\&quot;,\&quot;params\&quot;:{\&quot;history\&quot;:0,\&quot;itemids\&quot;:[\&quot;$i\&quot;],\&quot;time_from\&quot;:\&quot;$from\&quot;,\&quot;time_till\&quot;:\&quot;$now\&quot;,\&quot;output\&quot;:\&quot;extend\&quot;},\&quot;auth\&quot;: \&quot;$authstr\&quot;,\&quot;id\&quot;: 1}&quot;  
gethistory=&quot;curl -l -X POST -H &#39;Content-Type: application/json&#39; -d &#39;&quot;$jsonstr&quot;&#39; http://127.0.0.1/zabbix/api_jsonrpc.php&quot;  
echo $gethistory &amp;gt; /etc/scripts/tmp.sh  
chmod a+x /etc/scripts/tmp.sh  
/etc/scripts/tmp.sh &amp;gt; /etc/scripts/dailyreports/tmpjson/$i.txt  
done  
  
##新建一个文件夹!- -  
now=`date &quot;+%Y%m%d&quot;`  
mkdir /etc/scripts/dailyreports/dailyreports$now  
  
##处理获取到的Json数据了  
for i in `ls /etc/scripts/dailyreports/tmpjson/`  
do  
rm /etc/scripts/dailyreports/tmp/*  
  
##获取所有的响应时间的记录  
  
cat /etc/scripts/dailyreports/tmpjson/$i | sed -e &#39;s/[{}]/&#39;&#39;/g&#39; | awk -v k=&quot;text&quot; &#39;{n=split($0,a,&quot;,&quot;); for (i=1; i&amp;lt;=n; i++) print a[i]}&#39; | grep value | grep -o &#39;[0-9]\\.[0-9]*&#39; &amp;gt; /etc/scripts/dailyreports/tmp/values  
  
##获取所有的时间节点的记录  
cat /etc/scripts/dailyreports/tmpjson/$i | sed -e &#39;s/[{}]/&#39;&#39;/g&#39; | awk -v k=&quot;text&quot; &#39;{n=split($0,a,&quot;,&quot;); for (i=1; i&amp;lt;=n; i++) print a[i]}&#39; | grep clock | grep -o &#39;[0-9]*&#39; &amp;gt; /etc/scripts/dailyreports/tmp/clocks_org  
  
##获取到的时间节点要处理成人看的格式。  
for c in `cat /etc/scripts/dailyreports/tmp/clocks_org`  
do  
date -d@$c &#39;+%Y-%m-%d %H:%M:%S&#39; &amp;gt;&amp;gt; /etc/scripts/dailyreports/tmp/clocks_new  
done  
  
##设置新文件的文件名  
itemidstr=`echo $i | awk -F [.] &#39;{print $1}&#39;`  
itemname=`mysql --user=root --password=zabbix zabbix -e &quot;select key_ from items where itemid=$itemidstr;&quot; | awk -F [\\[,] &#39;{print $2}&#39;`  
  
##创建一个报告文件，并且加入表头  
echo &quot;Monitored URL:,$itemname,&quot; &amp;gt; /etc/scripts/dailyreports/dailyreports$now/$itemidstr.csv  
echo &quot;Clock,Response Time(s),&quot; &amp;gt;&amp;gt; /etc/scripts/dailyreports/dailyreports$now/$itemidstr.csv  
  
##把时间节点的记录跟响应时间的记录合成一个文件，并且追加到刚刚的报告文件里。  
paste -d &quot;,&quot; /etc/scripts/dailyreports/tmp/clocks_new /etc/scripts/dailyreports/tmp/values /dev/null &amp;gt;&amp;gt; /etc/scripts/dailyreports/dailyreports$now/$itemidstr.csv  
  
done  
  
##清理临时文件  
rm -rf /etc/scripts/dailyreports/tmpjson/*.txt  
  
##把所有获得的报告都收集起来，然后把写好宏的Excel文件也收集到一起，打包发给需要的人。  
  
##到时候在excel文件里会有一堆说明，点击哪儿哪儿的按钮就可以得到一份合适的Excel的报告啦。  
mkdir /etc/scripts/dailyreports/dailyreports$now/csv  
mv /etc/scripts/dailyreports/dailyreports$now/*.csv /etc/scripts/dailyreports/dailyreports$now/csv/  
cp /etc/scripts/dailyreports/README.xls /etc/scripts/dailyreports/dailyreports$now/  
cd /etc/scripts/dailyreports/  
zip -r dailyreports$now.zip dailyreports$now/  
  
cd /root/sendEmail-v1.51  
  
./sendEmail –f sender@sender.com -t receiver@receiver.com -u KLDC DMZ1 Daily SLA Report for WebHosting -m KLDC DMZ1 Daily SLA Report For WebHosting -s 192.168.169.23:25 -a /etc/scripts/dailyreports/dailyreports$now.zip  
  
  
rm -rf /etc/scripts/dailyreports/dailyreports*
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>检测服务器环境是否支持SHA 2加密的证书</title>
   <link href="http://blog.dellyqiao.com/security/2014/03/11/sha-2"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/security/2014/03/11/sha-2</id>
   <content type="html">
&lt;p&gt;最近几天，相信很多网站管理员都收到了Symantec的一封邮件，关于Chrome将在11月的version 39中停止对使用SHA-1签名算法的数字证书的支持。所以为了避免网站遭遇任何问题，请各位客户把自己网站的证书全部更新为使用SHA-2签名算法的证书。 （在2015年12月31日之后才会过期的证书可以在Symantec上免费更换，在那之前的，如果需要更换的话就得重新掏钱了。）&lt;/p&gt;

&lt;p&gt;相信很多管理员都已经开始考虑两个问题了：&lt;/p&gt;

&lt;p&gt;1） 如何更换证书。&lt;/p&gt;

&lt;p&gt;2） 自己网站使用的环境是否支持SHA-2证书。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;关于问题1），更换证书非常简单，重新生成证书请求文件CSR，然后再Symantec的Trust Center里面找到对应的证书，然后再Order标签下面会有一个“Replace”的链接，点击以后直接把新的CSR内容贴进去，按照提示进行更新即可。请求提交后两到三个工作日之后就可以得到新的证书CER文件了。&lt;/p&gt;

&lt;p&gt;关于问题2），SHA-2证书的兼容性：&lt;/p&gt;

&lt;p&gt;Symantec提供了一个支持的服务器环境的列表，包括所有支持的服务器类型，OS类型，应用服务器类型，浏览器类型，等等，可以从这个链接获取到这些信息。&lt;/p&gt;

&lt;p&gt;https://knowledge.verisign.com/support/ssl-certificates-support/index?page=content&amp;amp;id=SO25586&amp;amp;actp=search&amp;amp;viewlocale=en_US&amp;amp;searchid=1411053709765&lt;/p&gt;

&lt;p&gt;但是呢，这个链接并没有IBM HTTP Server的兼容性列表。根据Symantec提供的的信息，对于IHS来说，&lt;strong&gt;所有GSKit组件的版本在7.0.4.14以上的IHS都可以支持SHA-2.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;关于GSKit组件版本的查询，可以参考这个链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www-01.ibm.com/support/docview.wss?uid=swg21041570&quot;&gt;http://www-01.ibm.com/support/docview.wss?uid=swg21041570&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;根据我的经验，所有IHS6.1以上的版本的GSKit组件都是在7.0.4.14之上的，供参考。&lt;/p&gt;

&lt;p&gt;以下是Symantec邮件的全文，又到了网站管理员开始忙碌和公司破财的时候了，要知道换一个证书可以1000刀啊，真的不便宜。。。&lt;/p&gt;

&lt;p&gt;We would like to inform you of Google’s intent to phase out support for certificates using a SHA-1 hashing algorithm via degraded visual indicators and warnings in the Chrome™ browser. These changes are expected to take effect in the production version of Chrome version 39 in November 2014. You can find more information regarding the proposed plan on Google’s blog.&lt;/p&gt;

&lt;p&gt;As a proactive measure, in order to help ensure that Chrome 39 users visiting your websites do not encounter any UI degraded indicators, Symantec recommends the following:   &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Identify certificates that have a SHA-1 algorithm using SSL Toolbox. For more information, please refer to Knowledge Center article SO26442.   &lt;/li&gt;
  &lt;li&gt;Replace any SHA-1 certificates that expire beyond December 31, 2015, with SHA-2 certificates at no additional cost. For more information, please refer to Knowledge Center article SO17490.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please note that SHA-1 root certificates will not be affected by the plan.&lt;/p&gt;

&lt;p&gt;Here are some additional resources for your reference:   &lt;/p&gt;

&lt;p&gt;• &lt;br /&gt;
Symantec SHA-1 information page &lt;br /&gt;
• &lt;br /&gt;
Symantec Community Forum: Website Security Solutions &lt;br /&gt;
• &lt;br /&gt;
Upcoming Webcast: Get Answers to Your Questions on Google SHA-1 Deprecation Plans&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Log housekeeping日常维护之日志管理</title>
   <link href="http://blog.dellyqiao.com/server/middleware/2014/03/11/log-housekeeping"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/server/middleware/2014/03/11/log-housekeeping</id>
   <content type="html">
&lt;p&gt;服务器的日常维护总需要维护日志，常常用到的命令无非就是两种：&lt;/p&gt;

&lt;h4 id=&quot;n&quot;&gt;1）把N天以前的日志全部删掉&lt;/h4&gt;

&lt;p&gt;Windows系统用forfiles：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;forfiles /s /m *.log /d -60 /p “D:/logs/“ /c “cmd /c del @file&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参数解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/s 搜索子文件夹&lt;/li&gt;
  &lt;li&gt;/m mask,文件的标志符号&lt;/li&gt;
  &lt;li&gt;/d date，-60就是指60天以前&lt;/li&gt;
  &lt;li&gt;/p path，要做搜索的一个路径&lt;/li&gt;
  &lt;li&gt;/c 后面要跟上需要执行的操作 &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;p&gt;Linux系统用find命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find /var/log/ -name .log -mtime +60 -exec rm -rf {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体的用法可以man find来获取，find工具太博大精深了，拣自己需要用到的看一下就好了。&lt;/p&gt;

&lt;h4 id=&quot;log&quot;&gt;2）把当前的log文件压缩一下&lt;/h4&gt;

&lt;p&gt;压缩需要配合应用服务器的log输出的格式，比如Websphere可以设置每天rotate一次日志，定时把第一天的日志变成 SystemOut-2014-11-27.log类似这样的格式。这样的话我们借助脚本只把已经归档出来的日志压缩一下就行，然后设置好定时执行就好了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Windows系统:&lt;/p&gt;

    &lt;p&gt;需要使用工具了，下载个gzip.exe，zip.exe之类的，然后写一个脚本，类似于这样：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  G:
  cd G:\logs\WebSphere\server1

  For /F %%F in (&#39;dir /b G:\logs\WebSphere\server1\\*.log&#39;) DO (
  if NOT %%F == SystemErr.log if not %%F == SystemOut.log IF NOT EXIST %%F.gz G:\gzip.exe -q -9 %%F
  )
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;这样，Websphere正在使用的SystemOut.log和SystemErr.log文件就不会受到影响，其他的日志一概压缩归档。如果需要定时执行的话设置个计划任务就好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Linux系统：&lt;/p&gt;

    &lt;p&gt;选择比较多，一般Linux系统都自带gzip，tar这类的归档压缩工具，比如可以用这个命令：&lt;code&gt;gzip SystemOut-*.log&lt;/code&gt;， 直接把归档出来的日志都压缩。如果需要定时执行的话设置一下crontab就好了。&lt;/p&gt;

    &lt;p&gt;Crontab的设置如下：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;code&gt;crontab -e&lt;/code&gt; 进入编辑模式。crontab的编辑模式使用的时Vi编辑器的操作方式，在编辑之前先弄懂vi怎么操作，否则麻烦很大。&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;添加这一行：&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt; 10 0 * * * gzip /var/log/SystemOut-*.log &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

        &lt;p&gt;代表每天0点10分自动执行这个gzip /var/log/SystemOut-*.log命令，很简单吧。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有另外一种比较特别的情况：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）Apache 服务器的access.log的清理：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果Apache服务器恰好没有设置自动归档，那随着网站访问量增长，access日志会非常大，如果想清理日志又不希望宕机的话，可以采用下面的办法：&lt;/p&gt;

&lt;p&gt;仅针对Linux，切记。 Windows怎么做我不知道。。。。。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mv access_log access_log.old

kill -1 `cat httpd.pid`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个httpd.pid就是进程号，这种方法可以不重启整个进程而仅仅启动需要启动的线程，就可以创建出来新的access_log并且不宕机了。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Linux系统添加虚拟IP（Suse linux为例）</title>
   <link href="http://blog.dellyqiao.com/server/2014/03/11/linuxipsuse-linux"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/server/2014/03/11/linuxipsuse-linux</id>
   <content type="html">
&lt;p&gt;之前有提到Windows服务器添加多个虚拟IP的方法，只需要用图形化界面就可以了，但是Linux服务器就没那么简单。所以总结了这么一篇教程，记录一下如何在Linux服务器上添加虚拟IP。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;1）以Root权限登录，或者登陆以后su - 获取root权限。&lt;/p&gt;

&lt;p&gt;2）跳转到Network设置的位置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /etc/sysconfig/network-scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3）查看一下现有的网络适配器有哪些：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls ifcfg-eth*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到一个或一些类似于： ifcfg-eth-id-12:34:56:78:90:ab 这样的文件，这一串数字和字母的组合（12:34:56:78:90:ab）就是网卡的MAC码。&lt;/p&gt;

&lt;p&gt;4）接下来就编辑这个文件。&lt;/p&gt;

&lt;p&gt;打开这个文件：&lt;code&gt;vi ifcfg-eth-id-12:34:xxxxxx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以看到类似于如下的字段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BOOTPROTO=&#39;static&#39;  
BROADCAST=&#39;192.168.1.1&#39;  
IPADDR=&#39;192.168.1.1&#39;  
NETMASK=&#39;255.255.255.0&#39;  
NETWORK=&#39;192.168.1.1&#39;  
STARTMODE=&#39;onboot&#39;  
USERCONTROL=&#39;no&#39;  
_nm_name=&#39;bus-pci-0000:01:04.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来要做的，是添加如下的几行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IPADDR1=&#39;192.168.1.2&#39;  
NETMASK1=&#39;255.255.255.0&#39;  
LABEL1=&#39;0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5）保存关闭文件，然后重启network服务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/network restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就已经成功了，直接ifconfig查看一下吧，是不是已经有新添加的IP地址了。当然可以通过ping那个新添加的IP来测试一下是否已经成功。&lt;/p&gt;

&lt;p&gt;其他的Linux distribution可能网卡配置的路径不一样，但是大体原理是一样的，如果有类似的需求，就可以以本文作为参考了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux服务器的一些audit的方法</title>
   <link href="http://blog.dellyqiao.com/server/security/2014/03/11/linuxaudit"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/server/security/2014/03/11/linuxaudit</id>
   <content type="html">
&lt;p&gt;背景：&lt;/p&gt;

&lt;p&gt;JBoss服务被重启，根据JBoss log output的说法，那个JBoss服务应该是被某人重启过，所以现在要找出到底是谁做的。（JBoss stopping Output可以参照这里：&lt;a href=&quot;https://developer.jboss.org/wiki/ShutdownLogs&quot;&gt;https://developer.jboss.org/wiki/ShutdownLogs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先，找到最近连接过server的所有用户：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;last
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果类似这样的：&lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt;&lt;code&gt;reboot system boot 2.6.16.60-0.113. Sun Oct 19 06:50 (7+22:09)
root pts/0 10.50.164.31 Sun Oct 19 06:17 - down (00:24)
reboot system boot 2.6.16.60-0.113. Sun Oct 19 06:11 (00:30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到哪个用户在什么时间登录这台服务器的。&lt;/p&gt;

&lt;p&gt;找到有嫌疑的用户之后呢，看一下这个用户的信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat /etc/passwd | grep xxx(用户名）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以看到用户名的信息了。&lt;/p&gt;

&lt;p&gt;接下来查看一下这个用户的命令记录：&lt;/p&gt;

&lt;p&gt;首先用root账户登录，然后&lt;code&gt;su 用户名&lt;/code&gt;，root账户是可以直接su到用户的账户的。&lt;/p&gt;

&lt;p&gt;然后执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;history
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认情况下，history的输出是不会有时间戳的，那我们就给他加上：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HISTTIMEFORMAT=&quot;%d/%m/%y %T &quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再执行history，这样这个用户执行的所有命令和时间全都一览无遗了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux Shell Script training</title>
   <link href="http://blog.dellyqiao.com/coding/2014/03/11/linux-shell-script-training"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/coding/2014/03/11/linux-shell-script-training</id>
   <content type="html">
&lt;p&gt;&lt;strong&gt;1、写脚本实现，可以用shell、perl等。在目录/tmp下找到100个以abc开头的文件，然后把这些文件的第一行保存到文件new中。&lt;/strong&gt;    &lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
cd /tmp
for file in `ls abc* | head -100`; do
    head -1 $file &amp;gt;&amp;gt; new
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;分析&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先&lt;code&gt;ls abc* | head -100&lt;/code&gt; 找到100个以abc开头的文件，然后把每个文件的第一行都存到new文件里&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2、写脚本实现，可以用shell、perl等。把文件b中有的，但是文件a中没有的所有行，保存为文件c，并统计c的行数。&lt;/strong&gt;  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
diff A B &amp;gt; tmpfile
grep -A2 &#39;^[0-9]\{1,\}a[0-9]\{1,\}&#39; tmpfile | grep &#39;^&amp;gt; &#39; | cut -d &quot; &quot; -f 2 &amp;gt; C
rm -rf tmpfile
wc -l C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;分析&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先diff一下并且把结果放到tmpfile里面。&lt;br /&gt;
diff的结果，如果是A文件里没有但是B文件里有的，那么将会是类似于如下的结果：  &lt;code&gt;5a6 &amp;gt; xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们需要的内容是”&amp;gt;”后面的内容，所以需要吧tmpfile做一下处理：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -A2 &#39;^[0-9]{1,}a[0-9]{1,}&#39; tmpfile&lt;/code&gt;可以找到有类似5a6起的相邻两行，然后再把每一组的第二行找出来，然后再把”&amp;gt; “之后的实体内容找出来，这些内容就是真正的A里面没有但是B里有的内容了。然后得到的内容放到C里。&lt;/p&gt;

&lt;p&gt;C文件的行数就很简单了，wc -l C，搞定。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java面试题练习   计算格点</title>
   <link href="http://blog.dellyqiao.com/coding/2014/03/11/java---"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/coding/2014/03/11/java---</id>
   <content type="html">
&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;面试题#给定平面上的两个格点P1(x1,y1)，P2(x2,y2)，在线段P1P2上，除P1、P2外，一共有多少个格点？格点定义为x和y都是整数的点。关注微信公众账号“待字闺中”，了解和讨论参考分析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt; 常规思路：从一个点开始，X坐标逐渐往另一个点以1的距离靠近，然后计算一下对应的每个Y坐标是不是整数。&lt;/p&gt;

&lt;p&gt;好思路：&lt;em&gt;暂时没想到。。。。。。。&lt;/em&gt;  &lt;/p&gt;

&lt;!-- more --&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;java&quot;&gt;&lt;strong&gt;Java代码实现&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package auguest;

import java.util.ArrayList;
import java.util.List;

public class GetPoints {

    /**
     * @param args
     * #面试题#给定平面上的两个格点P1(x1,y1)，P2(x2,y2)，在线段P1P2上，除P1、P2外，一共有多少个格点？格点定义为x和y都是整数的点。
     */
    public static void main(String[] args) {
        Point point1 = new Point(-30, -30);
        Point point2 = new Point(31, 31);

        List&amp;lt;Point&amp;gt; points = getPoints(point1, point2);
        for (Point point : points) {
            System.out.println(point);
        }

    }

    public static List&amp;lt;Point&amp;gt; getPoints(Point point1, Point point2) {
        List&amp;lt;Point&amp;gt; points = new ArrayList&amp;lt;Point&amp;gt;();

        int lengthX = point2.getX() - point1.getX();
        int lengthY = point2.getY() - point1.getY();

        if (lengthX == 0) {
            for (int i=1; i&amp;lt;lengthY; i++) {
                Point p = new Point(point1.getX(), point1.getY()+i);
                points.add(p);
            }
        } else if (lengthY == 0) {
            for (int i=1; i&amp;lt;lengthX; i++) {
                Point p = new Point(point1.getX()+1, point1.getY());
                points.add(p);
            }
        } else {
            for (int i=1; i&amp;lt;lengthX; i++) {
                int tmpX = point1.getX() + i;
                int tmpY = tmpX * lengthY % lengthX;
                if (tmpY == 0) {
                    points.add(new Point(tmpX, tmpX * lengthY / lengthX));
                }
            }
        }

        return points;
    }

}


class Point {
    private int x;
    private int y;

    public Point() {
        x = 0;
        y = 0;
    }

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    @Override
    public String toString() {
        return &quot;Point: x=&quot; + this.x + &quot;, y=&quot; + this.y;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;/div&amp;gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>设置IIS服务器监听特定IP的特定端口（IIS与IHS或Apache共存的解决方案）</title>
   <link href="http://blog.dellyqiao.com/middleware/2014/03/11/iisipiisihsapache"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2014/03/11/iisipiisihsapache</id>
   <content type="html">
&lt;p&gt;在某些场景中，需要IIS与Apache类的中间件产品共存的情况。如果你的服务器换过网卡，也许会出现跟本文类似的IIS无法启动的情况。如果碰到了同样的问题，可以参考本文去修复。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;IIS启动时错误弹窗，信息如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;The network location cannot be reached, xxxxxx&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows报的这种弹窗错误，也只能通过Windows自带的事件管理器里查看了。直接运行：eventvwr，打开SYSTEM项，看到新地址没有被监听的错误，服务器无法接受来自这个IP的请求。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;问题分析&lt;/h3&gt;

&lt;p&gt;多方搜集资料后发现，如果是首次配置IIS，那么用IIS的图形界面工具添加绑定就没问题了。&lt;/p&gt;

&lt;p&gt;但是如果换过网卡，仅通过图形界面无法让IIS去监听某一个IP地址的d某个端口，必须要用命令行&lt;code&gt;httpcfg&lt;/code&gt;工具来把监听列表更新一下才可以。猜想这个监听列表是属于系统文件的一部分，IIS在启动的时候可能是会依据这个文件作为更高优先级别的端口绑定。&lt;/p&gt;

&lt;p&gt;按照如下步骤进行配置：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;httpcfg query iplisten&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;列出现在的监听列表。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;httpcfg delete iplisten -i 10.50.165.45&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;移除旧的监听IP地址。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;httpcfg set iplisten -i 10.52.21.125&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;添加新的IP地址到监听列表。&lt;/p&gt;

&lt;p&gt;再次测试依然失败。。。为什么？重启一下Server就好了。。。。。。(注意是重启服务器，重启IIS服务不会起作用的）&lt;/p&gt;

&lt;p&gt;Server重启之后查看一下监听的端口和IP：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netstat -ano | findstr 10.52.21.125
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到进程4监听10.52.21.125的80和443端口。进程4是一个系统进程，IIS貌似也是属于挂在这个进程里边的一个子进程（猜想。。。不太懂IIS）。&lt;/p&gt;

&lt;p&gt;好了IIS设置好了，接下来配置Apache的配置文件，让virtual host的IP不同于IIS（比如设置为10.52.21.45），同样也可以正常启动。&lt;/p&gt;

&lt;p&gt;所以现在这台服务器既可以接受向IP：10.52.21.125发送的请求（IIS会处理这些请求），也可以接受向IP：10.52.21.45发送的请求（IHS会处理这些请求）。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在IIS7.0中配置自签名证书(Enable SSL in IIS 7.0 Server)</title>
   <link href="http://blog.dellyqiao.com/security/2014/03/11/iis70enable-ssl-in-iis-70-server"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/security/2014/03/11/iis70enable-ssl-in-iis-70-server</id>
   <content type="html">
&lt;p&gt;在IIS Manager界面，点击左侧的hostname。然后点击 Create Self-Signed Certificate。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/111.png/scale&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;右击 “Default Web Site”，然后点击 “Edit Bindings”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/112.png/scale&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 “Add”，把HTTPS协议跟生成的self signed certificate绑定起来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/113.png/scale&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加完成后点击“OK”，然后“Close”保存配置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/03/114.png/scale&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>IHS从旧版本到新版本的迁移</title>
   <link href="http://blog.dellyqiao.com/middleware/migration/2014/03/11/ihs"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/migration/2014/03/11/ihs</id>
   <content type="html">
&lt;h3 id=&quot;ihs6ihs8&quot;&gt;如何把IHS6迁移到IHS8？&lt;/h3&gt;

&lt;p&gt;IHS的迁移比较简单，正好前几天做了一个IHS6到IHS8的迁移，全新的服务器，全新的IHS8安装，这里就以IHS6到IHS8为例介绍一下简要的迁移步骤和需要注意的地方。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;步骤&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;拷贝文件&lt;/p&gt;

    &lt;p&gt;把老服务器上的httpd.conf文件拷贝到新服务器上。同时需要把SSL证书，DocumentRoot目录全部都考过去。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改配置文件&lt;/p&gt;

    &lt;p&gt;修改httpd.conf文件，把监听的IP改为新服务器的IP地址，HostName等等配置都要做响应的改变。&lt;/p&gt;

    &lt;p&gt;如果要配置的服务所监听的IP是一个虚拟IP，那就在服务器上添加好虚拟IP。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尝试启动IHS服务&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;
 cd &amp;lt;IHS_HOME&amp;gt;/bin
 httpd -k start -f &amp;lt;IHS_HOME&amp;gt;/conf/httpd.conf
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在Windows系统下，如果启动的时候没有任何错误，就把这个服务作为Windows服务添加到服务管理里，以便于自动启动。&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;
 cd &amp;lt;IHS_HOME&amp;gt;/bin
 httpd -k install -n IHS-yourservice -f &amp;lt;IHS_HOME&amp;gt;/conf/httpd.conf
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;如下图：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/19/installservice.png/scale&quot; alt=&quot;installservice&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;遇到的问题及解决方案&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;第一次尝试启动的时候出现了Syntax Error，也就是语法错误。&lt;/p&gt;

    &lt;p&gt;这样的问题比较容易解决，找到错误信息中对应的行，发现错误改掉就好了。&lt;/p&gt;

    &lt;p&gt;IHS6到8，下面这行配置一定需要修改：&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;
  LoadModule access_module modules/mod_access.so
 &lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;需要改成：&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;
  Loadmodule authz_host_module modules/mod_authz_host.so
 &lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;这是IHS接收用户访问的模块有变动，修改之后就没问题了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尝试启动的时候错误信息里没有Syntax Error（说明语法没问题），但是启动不起来，创建socket失败之类的。&lt;/p&gt;

    &lt;p&gt;这样的问题多半是端口被占用引起的，解决方法如下：&lt;/p&gt;

    &lt;p&gt;比如我们的IHS服务需要监听80端口，用&lt;code&gt;netstat -ano | findstr 80&lt;/code&gt; (Linux的话就用&lt;code&gt;netsh -ano | grep 80&lt;/code&gt;）找到哪个应用正在监听这个端口，这个命令可以看到监听端口的PID。&lt;/p&gt;

    &lt;p&gt;随后打开任务管理器，打开菜单的 视图 – 选择列 – 勾选PID那一项，就可以从任务管理器里找到那个应用到底是什么了。&lt;/p&gt;

    &lt;p&gt;在我配置的过程中，发现占用80端口的是IHS安装时默认启用的那个IHS服务，所以关掉它，改成手动启动就没问题了。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/01/19/porttest.png/scale&quot; alt=&quot;showport&quot; /&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;图中进程1184正在监听端口80.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>解决Websphere内置证书更新失败——IBM Renewing personal WAS certificate fails if plugin key.kdb is unavailable</title>
   <link href="http://blog.dellyqiao.com/middleware/2014/03/11/ibm-renewing-personal-was-certificate-fails-if-plugin-keykdb-is-unavailable"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2014/03/11/ibm-renewing-personal-was-certificate-fails-if-plugin-keykdb-is-unavailable</id>
   <content type="html">
&lt;p&gt;最近Websphere服务器集群遇到一个问题，在用部署脚本部署应用的时候出现错误，显示SSL证书过期导致无法建立安全连接。&lt;/p&gt;

&lt;p&gt;打开IBM Console，发现Console已经无法识别那个Node，Node状态显示为“？”，Node下所有的应用服务器的状态也无法被Console所识别。重启Nodeagent和DMGR均无效果。&lt;/p&gt;

&lt;p&gt;为什么会这样呢，经过检查，我发现那个Node中的内建证书过期了，可以在Security -&amp;gt; SSL Certificate and Key Management -&amp;gt; Key Stores and certificates -&amp;gt; NodeDefaultKeyStore -&amp;gt; Personal Certificates 这个路径下查看。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;有一个情况也是我注意到的，这个集群下有几个Node，但是唯独其中的那一个Node的证书更新失败。当我尝试去手动更新证书的时候，发现证书更新错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;An error occurred renewing default: 	
com.ibm.websphere.crypto.KeyException: KeyStore &quot;C:/WebSphere/AppServer/profiles/Dmgr01/wstemp/1623776755/workspace/cells/winwas70dCell01/nodes/winwas70dNode01/servers/webserver1/plugin-key.kdb&quot; does not exist.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在查找IBM资料和找IBM确认之后，确定恢复的办法如下：&lt;/p&gt;

&lt;p&gt;1）删除CMSKeyStore下的缺失证书的定义。&lt;/p&gt;

&lt;p&gt;2）勾选过期的证书，点击“renew”按钮。&lt;/p&gt;

&lt;p&gt;3）重启所有有问题的节点的服务，顺序：停止APP Server，Nodeagent， 然后启动Nodeagent，启动APP Server。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：这种方法无论在证书过期前还是过期后都是有效的，即使Node的状态是一个“？”也没关系。只要确定DMGR所在的服务器跟Nodeagent所在服务器之间的相关端口都开启了就行（最主要的应该是SOAP端口，Nodeagent默认为8878，可以在DMGR服务器上执行：telnet nodeagentserver 8878 去验证一下）。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IBM support center的资料原文如下，里面有证书无法更新的原因，供参考：&lt;/p&gt;

&lt;h2 id=&quot;technote-troubleshooting&quot;&gt;Technote (troubleshooting)&lt;/h2&gt;

&lt;div style=&quot;font-family: Arial, sans-serif; font-size: 13px; line-height: 1.2; text-indent: 0pt; word-spacing: normal; background-color: rgb(255, 255, 255); border: 0px rgb(0, 0, 0); clear: both; cursor: auto; direction: ltr; float: none; list-style: disc outside none; margin: 0px; outline: invert none 0px; table-layout: auto; vertical-align: baseline; visibility: inherit; z-index: auto; background-position: 0% 0%;&quot;&gt;

  &lt;h2 id=&quot;problemabstract&quot;&gt;Problem(Abstract)&lt;/h2&gt;

  &lt;p&gt;When the personal certificate in your WAS NodeDefaultKeyStore or CellDefaultKeyStore expires, you need to renew it (either manually or automatically using the expiration monitor).&lt;br /&gt;
This might fail with an error message, that the CMSKeystore is not available.&lt;/p&gt;

  &lt;h2 id=&quot;symptom&quot;&gt;Symptom&lt;/h2&gt;

  &lt;div style=&quot;border: 0px rgb(0, 0, 0); cursor: auto; direction: ltr; float: none; line-height: 1.2; list-style: disc outside none; margin: 0px; outline: invert none 0px; table-layout: auto; text-indent: 0pt; vertical-align: baseline; visibility: inherit; word-spacing: normal; z-index: auto; background-position: 0% 0%;&quot;&gt;

    &lt;p&gt;The expiring certificate is not renewed in the NodeDefaultKeyStore, although the ISC already shows the new personal certificate.&lt;/p&gt;

    &lt;p&gt;Steps to recreate:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Login to the AdminConsole (ISC)&lt;/li&gt;
      &lt;li&gt;Go to Security -&amp;gt; SSL Certificate and Key Management&lt;/li&gt;
      &lt;li&gt;Key Stores and certificates -&amp;gt; NodeDefaultKeyStore -&amp;gt; Personal Certificates&lt;/li&gt;
      &lt;li&gt;select the personal certificat that you want to renew (normally it’s called “default”)&lt;/li&gt;
      &lt;li&gt;Press the “Renew” Button&lt;/li&gt;
      &lt;li&gt;If the plugin-key.kdb cannot be accessed by the DMgr, you will an error similar to this:  &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;An error occurred renewing default: com.ibm.websphere.crypto.KeyException: KeyStore “C:/WebSphere/AppServer/profiles/Dmgr01/wstemp/1623776755/workspace/cells/winwas70dCell01/nodes/winwas70dNode01/servers/webserver1/plugin-key.kdb” does not exist.  &lt;/p&gt;

    &lt;p&gt;Along with a CWPKI0033E error in the DMgr’s SystemOut.log, telling the same problem.
  7. Despite of the error above, &lt;strong&gt;the&lt;/strong&gt; &lt;strong&gt;list of certificates will already show you the new certificate with the new expiration date, but this is a false notification!&lt;/strong&gt;  &lt;/p&gt;

    &lt;p&gt;If you logout and login again, you will find that there is still the old personal certificate in the NodeDefaultKeyStore!&amp;lt;/div&amp;gt;&lt;/p&gt;

    &lt;h2 id=&quot;cause&quot;&gt;Cause&lt;/h2&gt;

    &lt;div style=&quot;border: 0px rgb(0, 0, 0); cursor: auto; direction: ltr; float: none; line-height: 1.2; list-style: disc outside none; margin: 0px; outline: invert none 0px; table-layout: auto; text-indent: 0pt; vertical-align: baseline; visibility: inherit; word-spacing: normal; z-index: auto; background-position: 0% 0%;&quot;&gt;

      &lt;p&gt;The WebServer Plugin needs the signer certificate from the Node’s personal certificate to ensure a secure Plugin-WAS connection.&lt;/p&gt;

      &lt;p&gt;If the plugin-key.kdb ist not available at the defined location of the CMSKeyStore (or not accessible due to file permission problems), then the automatic signer exchange is not possible for the Deployment Manager - hence the renewal of the certificate cannot complete and is interrupted.&lt;/p&gt;

    &lt;/div&gt;

    &lt;h2 id=&quot;resolving-the-problem&quot;&gt;Resolving the problem&lt;/h2&gt;

    &lt;div style=&quot;border: 0px rgb(0, 0, 0); cursor: auto; direction: ltr; float: none; line-height: 1.2; list-style: disc outside none; margin: 0px; outline: invert none 0px; table-layout: auto; text-indent: 0pt; vertical-align: baseline; visibility: inherit; word-spacing: normal; z-index: auto; background-position: 0% 0%;&quot;&gt;

      &lt;p&gt;You either need to ensure, that all keystores and truststores which are defined in the cell are accessible, including the CMSKeyStore for the plugin.&lt;br /&gt;
If for some reason the plugin-key.kdb has been removed and is no longer required in this cell, the CMSKeyStore definition should also be deleted in the list of keystores in the ISC.&lt;/p&gt;

    &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>在IBM HTTP Server中配置URL重定向</title>
   <link href="http://blog.dellyqiao.com/middleware/2014/03/11/ibm-http-serverurl"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2014/03/11/ibm-http-serverurl</id>
   <content type="html">
&lt;p&gt;之前总结在Apache中实现URL重定向跳转的功能，方法如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;比如要想把dellyserver/abc/下所有的资源都重定向到www.baidu.com，我的dellyserver是在DMZ中，这台server无法访问百度的服务器。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;
&lt;blockquote&gt;
  &lt;p&gt;第一步，写一个html文件，就叫test.html吧，放到网站的根目录。test.html只是个空白网页，只需要在&amp;lt;head&amp;gt;标签里加上下面这行JS代码：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;pre&gt;window.location.href=&quot;http://www.baidu.com”&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二步，在httpd.conf中添加配置如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;RewriteCond %{HTTP_HOST} ^dellyserver [NC] 

RewriteRule ^/abc/(.*)$ /test.html [L]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;这样所有到达http://dellyserver/abc/xxxx的资源都会被定向到test.html，当test.html下载到本地的时候，浏览器会执行html文件中的JS代码：&amp;lt;pre&amp;gt;window.location.href=”http://www.baidu.com”&amp;lt;/pre&amp;gt;，这样浏览器会自动给http://www.baidu.com发送请求并且获得响应，费了一番功夫但是也确实达到了重定向的效果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;IHS是基于Apache的，按理说这种方法也应该能工作的，但是起作用的情况仅限静态网站的情况。&lt;/p&gt;

&lt;p&gt;如果IHS通过Plugin进行URI的处理，那么用上面的方法并不会生效，而是会直接跳出500错误。因为IHS会先通过plugin匹配用户的URI请求，然后再搜索DocumentRoot下地文件去匹配请求。&lt;/p&gt;

&lt;p&gt;如果请求abc.jsp，如果plugin无法处理对应的请求，IHS就会直接返回500错误，因为jsp只能被WAS处理，DocumentRoot下的文件全部都是静态html文件。&lt;/p&gt;

&lt;p&gt;那么应该如何配置才能让IHS首先去适配rewrite模块填写的规则呢？如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteRule ^/abc/(.*)$ /test.html [L,R=301]*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;R=301 代表/abc/下所有的资源都永久转移到新的位置了，这样IHS就会去直接执行这条规则而不是去尝试plugin匹配了。  &lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hadoop Cluster集群配置心得（低配置集群+自动同步配置）</title>
   <link href="http://blog.dellyqiao.com/hadoop/2014/03/11/hadoop-cluster"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/hadoop/2014/03/11/hadoop-cluster</id>
   <content type="html">
&lt;p&gt;本文为本人原创，首发到炼数成金 &lt;a href=&quot;http://f.dataguru.cn/thread-138720-1-1.html&quot;&gt;http://f.dataguru.cn/thread-138720-1-1.html&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;情况是这样的，我没有一个非常强劲的电脑来搞出一个性能非常NB的服务器集群，相信很多人也跟我差不多，所以现在把我的低配置集群经验拿出来写一下。&lt;/p&gt;

&lt;p&gt;我的配备：1）五六年前的赛扬单核处理器2G内存笔记本 2）公司给配的ThinkpadT420，i5双核处理器4G内存（可用内存只有3.4G，是因为装的是32位系统的缘故吧。。。）&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;就算是用公司配置的电脑，做出来三台1G内存的虚拟机也显然是不现实的。企业笔记本运行的软件多啊，什么都不做空余内存也才不到3G。所以呢，我的想法就是：&lt;/p&gt;

&lt;p&gt;用我自己的笔记本（简称PC1）做Master节点，用来跑Jobtracker,Namenode 和SecondaryNamenode；用公司的笔记本跑两个虚拟机（简称VM1和VM2），用来做Slave节点，跑Tasktracker和Datanode。这么做的话，就需要让PC1，VM1和VM2处于同一个网段里，保证他们之间可以互相连通。&lt;/p&gt;

&lt;p&gt;网络环境：我的两台电脑都是通过一个无线路由上网。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;1. 构建跟外部的电脑同一网段的虚拟机配置过程：&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;准备工作：构建一个集群，首先前提条件是每台服务器都要有一个固定的IP地址，然后才可能进行后续的操作。所以呢，先把我的两台笔记本电脑全部设置成固定IP（注意，如果像我一样使用无线路由上网，那就要把无线网卡的IP设置成固定IP）。用来做Master节点的PC1:192.168.33.150，用来跑虚拟机的宿主笔记本：192.168.33.157。目标：VM1和VM2的IP地址分别设置成192.168.33.151和152。&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;p&gt;1）新建VM1虚拟机。&lt;/p&gt;

&lt;p&gt;2）打开VM1的网卡设置界面，连接方式选Bridge。（桥接）&lt;/p&gt;

&lt;p&gt;关于桥接的具体信息，可以百度一下。我们需要知道的，就是用桥接的方式，可以让虚拟机通过本机的网关来上网，所以就可以跟本机处于同一个网段，互相之间可以进行通信。&lt;/p&gt;

&lt;p&gt;3）我用的是VMware Workstation8，就以他为例：菜单Edit——VirtualNetwork Editor。&lt;/p&gt;

&lt;p&gt;4）选择WMnet0（这个是VMware安装时默认预留出来为桥接这种连接方式做的一个配置文件），然后点击下面的bridgedto，就是要连接到哪个网卡上，要通过哪个网卡来上网。如果选择“自动“不可以正常上网的话，就手动选，选择连接到网络的那块网卡就可以了。（比如我的是无线网卡连路由器上网的，所以这里就选我自己的无线网卡就好）&lt;/p&gt;

&lt;p&gt;5）然后，点击OK。进入系统内部，设置IP地址为固定IP：192.168.33.151。我使用图形界面设置的。具体不同的Linux系统请查阅相关的网络配置文档。&lt;/p&gt;

&lt;p&gt;6）现在就可以互相ping一下了。如果可以ping通，那就说明互相连上了。&lt;/p&gt;

&lt;p&gt;如果不能，那就ifconfig查看一下各自的IP是否设置成功了，是否需要重新连接，之类的。&lt;/p&gt;

&lt;p&gt;按照这个步骤来，应该是没什么问题的。。。如果有哪些地方不明白或者设置出问题的，可以告诉我，互相交流看看。&lt;/p&gt;

&lt;h3 id=&quot;ssh&quot;&gt;&lt;strong&gt;2. SSH&lt;/strong&gt;设置：&lt;/h3&gt;

&lt;p&gt;虚拟机设置好之后就可以设置SSH了。当然在这之前要先建立好账户，三台服务器都建立一个相同的账户。&lt;/p&gt;

&lt;p&gt;Ubuntu默认是没有SSH server的（CentOS默认可以选择安装上），所以按照老师视频里设置好SSHKey之后是不可能互相SSH到的。（可以通过各种命令验证，比如&lt;code&gt;telnet localhost 22&lt;/code&gt;来验证到底本机上的22端口有没有程序在监听，显示连接失败的话那当然就是SSH Server没有设置咯。或者通过&lt;code&gt;netstat –ano | grep ssh&lt;/code&gt;之类的命令来查看。）&lt;/p&gt;

&lt;p&gt;关于SSH的安装，貌似现在OpenSSH是属于Linux系统上实际的SSH实现标准了，Ubuntu也可以很方便的安装OpenSSH。命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get installopenssh-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一行命令就够了。装完之后telnet试试先，可以验证是否安装成功。&lt;/p&gt;

&lt;p&gt;然后再按照老师视频里面的办法，生成公私密钥，把公钥全部聚在一起传播到每台服务器上。就可以实现无密码登陆了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意！在authorized_key&lt;/strong&gt;&lt;strong&gt;放到指定位置之后，千万要手动SSH&lt;/strong&gt;&lt;strong&gt;到所有的节点上一次！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如像我的，要从PC1输入命令：ssh &lt;vm1 ip=&quot;&quot;&gt;和ssh &lt;vm2ip&gt;来手动SSH到另外的所有节点上一次，看到是否要信任目标主机的提示后，输入yes，然后这才算是真的设置完成了。这是一个必要的操作，只有这样才可以把其他所有server的公钥都添加到本机的信任列表里，才能真的实现无任何提示的免密码登入。&lt;/vm2ip&gt;&lt;/vm1&gt;&lt;/p&gt;

&lt;p&gt;否则，在启动其他节点上的守护进程时会显示无法连接到对应的节点，无法启动之类的提示。&lt;/p&gt;

&lt;p&gt;这样的话，我的低配置集群环境就大概准备好了。&lt;/p&gt;

&lt;h3 id=&quot;hadoop&quot;&gt;&lt;strong&gt;3. 接下来就是配置Hadoop了。&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;关于Hadoop的配置，我的想法：这么大个集群，肯定得有个同步的机制吧，不然每次改一下配置文件就需要在所有的节点上改一次，那得是多大的工作量啊。。。。。。于是，看了一下权威指南教材269页开始的配置，确实是有这个配置的。此外还有一些配置是老师没有讲到的，也一并以我自己的理解和实践为例，写出来吧。&lt;/p&gt;

&lt;p&gt;主要的配置文件其实就是hadoop-env.sh和core-site.xml，hdfs-site.xml和mapred-site.xml。&lt;/p&gt;

&lt;h4 id=&quot;hadoop-envsh&quot;&gt;&lt;strong&gt;1. hadoop-env.sh：&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;首先，配置JAVA_HOME。这个不用说了，从oracle下载最新的gz包直接解压，设置好路径就好。&lt;/p&gt;

&lt;p&gt;然后这些配置我觉得非常有用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HADOOP_HEAPSIZE=400
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个是用来设置分配给守护进程的内存空间的。守护进程其实也全部都是Java进程，可以通过这个来设置JVM的Heapsize。我这里设置的是400MB。默认的是1000MB。&lt;/p&gt;

&lt;p&gt;正好也说一下我的设计。因为我的是低配置的，所以如果全部都按照默认的设置来，比如我自己的那台2G笔记本上跑Jobtracker，Namenode和SecoundaryNamenode，每个进程分配1000M，那如果真的是有大量的数据进来了，分配的这个内存空间就会被充满，到时候我的电脑绝对崩溃。&lt;/p&gt;

&lt;p&gt;所以，我的设计方案如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;我的老笔记本（2G内存）：Jobtracker：400M，Namenode：800M，SecondaryNamenode：800M。（照我的理解，Namenode对内存和IO进行集中的管理，所以是需要大量的空间来运作的）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;虚拟机VM1和2（每台1.2G内存）：Tasktracker：400M，Datanode：400M，然后Tasktracker开启的Map任务和Reduce任务子进程各1个，每个分配200M内存。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人感觉这样至少电脑不会爆掉吧。。。。。。等到以后真的开始进行数据处理的时候再看看怎么个情况吧，现在也只是根据自己粗浅的认识来这么配置的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HADOOP_NAMENODE_OPTS=&quot;-Xmx800m -Dcom.sun.management.jmxremote $HADOOP_NAMENODE_OPTS&quot;

export HADOOP_SECONDARYNAMENODE_OPTS=&quot;-Xmx800m -Dcom.sun.management.jmxremote $HADOOP_SECONDARYNAMENODE_OPTS&quot;

##这两个配置就是所说的Namenode和SecondaryNamenode分配800M的Heapsize。根据验证，这样设置是没问题的。

export HADOOP_MASTER=dellypc-master:/home/$USER/hadoop-0.20.2

host:path where hadoop code should be rsync&#39;d from. Unset by default.
#hadoop的code从哪里进行同步，默认为不同步。只要设置好了这个，就可以在每次更改配置文件的时候只更改一份配置文件，启动的时候启动信息里可以看到，所有的节点都会从设置的位置同步配置文件。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比如，我的Master节点hostname是dellypc-master，hadoop的所有配置文件都放在了/home/delly/hadoop-0.20.2这里（$USER会被识别成当前的用户名，也就是delly），那么每次启动hadoop守护进程的时候，hadoop都会自动先从dellypc-master的/home/delly/hadoop-0.20.2这个位置把所有的配置文件全部同步下来，然后才会进行启动的操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;值得注意的是，这个配置文件的保存地不一定非得是hadoop集群中的某一台机器，根据权威指南文档说的，可以是外部的一台server。&lt;/strong&gt;这样其实还挺好的，真的用起来的时候可以搞一台专门用来存放配置的机器，服务器集群肯定要通过防火墙隔离到DMZ网络中，然后开通这台配置机到集群机器的RPC文件同步端口，然后每次需要改配置就直接通过这台集群外的机器更改，并且启动集群守护程序的时候同步到所有节点，非常的安全和好用啊。&lt;/p&gt;

&lt;p&gt;继续配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HADOOP_SLAVE_SLEEP=0.1

##Seconds to sleep between slave commands. Unset by default. This can be useful in large clusters, where, e.g., slave rsyncs can otherwise arrive faster than the master can service them.
##不知道具体原理是怎么回事，但是这个配置看起来好像是在启动的时候，主节点会抽空闲时间休息0.1秒钟，避免请求同时到达主节点导致负载过高宕掉。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hadoop-env.sh的配置就写到这里了，还有其他log位置，pid位置之类的，就自行设置一下就好。部分设置都是似懂非懂的感觉好像有用就设置了，也许以后会理解更深一点可以知道怎样设置地更正确。&lt;/p&gt;

&lt;h4 id=&quot;core-sitexml&quot;&gt;2. core-site.xml：&lt;/h4&gt;

&lt;p&gt;除了视频教程里说的设置hdfs的位置和端口之外（相信&lt;code&gt;fs.default.name&lt;/code&gt;也是指定了namenode运行在哪台server上的吧。。），还配置了下面的东西：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;io.file.buffer.size&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;131072&amp;lt;/value&amp;gt;
&amp;lt;!-- 设置缓冲区辅助IO操作，默认4K，这里设置成128KB --&amp;gt;
&amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;hdfs-sitexml&quot;&gt;3. hdfs-site.xml：&lt;/h4&gt;

&lt;p&gt;也是除了视频中的设置，还设置了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.name.dir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;/home/delly/hadoop-0.20.2/name,/media/backup/hadoop-backup/namedata&amp;lt;/value&amp;gt;
&amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Namenode存放永久性元数据的目录，这里设置了两个目录，万一其中一个目录中数据出问题了，那么另一个作为冗余数据可以进行恢复&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;fs.checkpoint.dir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;/home/delly/hadoop-0.20.2/namesecondary,/media/backup/hadoop-backup/namesecondarydata&amp;lt;/value&amp;gt;
&amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同上，只不过是secondaryNamenode存放的位置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property&amp;gt;

&amp;lt;name&amp;gt;dfs.data.dir&amp;lt;/name&amp;gt;

&amp;lt;value&amp;gt;/home/delly/hadoop-0.20.2/data&amp;lt;/value&amp;gt;

&amp;lt;/property&amp;gt;

（datanode存放数据块的位置，默认是tmp文件夹，不安全吧。。。）

&amp;lt;property&amp;gt;

&amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;

&amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;

&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（数据复制的份数，不太理解到底是什么数据的复制，有懂的同学求指教啊）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property&amp;gt;

&amp;lt;name&amp;gt;dfs.block.size&amp;lt;/name&amp;gt;

&amp;lt;value&amp;gt;134217728&amp;lt;/value&amp;gt;

&amp;lt;!-- 128MB --&amp;gt;

&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（HDFS块大小，默认64M，这里设置成128M，减小namenode内存压力）&lt;/p&gt;

&lt;h4 id=&quot;mapred-sitexml&quot;&gt;4. 然后mapred-site.xml文件：&lt;/h4&gt;

&lt;p&gt;主要是额外配置了如下的东西，指定map任务和reduce任务子进程最多有多少个，以及他们的内存（我分配了200M）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property&amp;gt;

&amp;lt;name&amp;gt;mapred.tasktracker.map.tasks.maximum&amp;lt;/name&amp;gt;

&amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;

&amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;

&amp;lt;/property&amp;gt;

  


&amp;lt;property&amp;gt;

&amp;lt;name&amp;gt;mapred.tasktracker.reduce.tasks.maximum&amp;lt;/name&amp;gt;

&amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;

&amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;

&amp;lt;/property&amp;gt;

  


&amp;lt;property&amp;gt;

&amp;lt;name&amp;gt;mapred.child.java.opts&amp;lt;/name&amp;gt;

&amp;lt;value&amp;gt;-Xmx200m&amp;lt;/value&amp;gt;

&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;主要配置的东西就写到这里吧。&lt;/p&gt;

&lt;p&gt;我现在有一个巨大的疑问，hadoop是如何控制哪个进程在哪个节点上运行的？&lt;/p&gt;

&lt;p&gt;在配置文件里，我只看到了hdfs的主机（这个应该就是会指定namenode所在的主机吧？），然后还有jobtracker所在的主机，但是，SecondaryNamenode和Tasktracker，datanode到底要在哪个节点上执行，配置文件里完全没有配置，但是SecoundaryNamenode确实在我预想的主节点上跑起来了，datanode和tasktracker确实在两个slave节点上跑起来了，这是为什么？&lt;/p&gt;

&lt;p&gt;有人能解答疑问吗？非常感谢！&lt;/p&gt;

&lt;p&gt;经过测试和查看资料，这个疑问已解决： &lt;a href=&quot;http://f.dataguru.cn/thread-138720-1-1.html&quot;&gt;http://f.dataguru.cn/thread-138720-1-1.html&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>如何确定Hadoop守护进程分别会在哪台机器上运行</title>
   <link href="http://blog.dellyqiao.com/hadoop/2014/03/11/hadoop"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/hadoop/2014/03/11/hadoop</id>
   <content type="html">
&lt;p&gt;经过一段时间的配置，Hadoop环境总算运行起来了，但是，为何主节点就没有跑tasktracker和datanode进程，slave节点也没有跑secondary进程，Hadoop是如何控制的呢？&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;经过看权威指南（267页）和跟群里同学讨论，还有自己测试，最终确定：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tasktracker和datanode这两个守护进程 —— 只会在conf/slaves文件里指定的那些节点上运行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;secondarynamenode 这个守护进程 —— 只会在conf/masters文件里指定的那个节点上运行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;namenode和jobtracker这两个守护进程 —— 他们只会在同一台server上运行，可以通过core-site.xml和mapred-site.xml来确定要运行的主机。并且，假如说配置文件里指定的是node1，那么必须要在node1这台server上运行start脚本。否则，tasktracker，datanode和secondarynamenode这些进程都能顺利启动，而namenode和jobtracker无法启动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实际测试结果：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我的配置环境&lt;/strong&gt;：（请对下面频繁出现的delly表示淡定和理解。。。因为我的英文名叫Delly。。。）&lt;/p&gt;

&lt;p&gt;dellypc-master，dellypc-1，dellypc-2三台主机。&lt;/p&gt;

&lt;p&gt;其中，masters文件里记录了dellypc-master（表示secondarynamenode在dellypc-master上运行），slaves文件里记录了dellypc-1和dellypc-2（表示datanode和tasktracker要在dellypc-1和dellypc-2上运行）。&lt;/p&gt;

&lt;p&gt;core-site.xml文件里：hdfs://dellypc-master:9000， mapred-site.xml文件里：&lt;value&gt;dellypc-master:9001&lt;/value&gt;。（表示namenode跟jobtracker都在dellypc-master上运行，分别监听9000和9001端口）&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;正常情况：&lt;/h4&gt;

&lt;p&gt;在dellypc-master上执行start-all.sh脚本，完全正常。&lt;/p&gt;

&lt;p&gt;结果：&lt;/p&gt;

&lt;p&gt;dellypc-master：namenode，jobtracker和secondarynamenode&lt;/p&gt;

&lt;p&gt;dellypc-1：tasktracker和datanode&lt;/p&gt;

&lt;p&gt;dellypc-2：tasktracker和datanode&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;测试1：&lt;/h4&gt;

&lt;p&gt;在dellypc-1上执行start-all.sh脚本，namenode和jobtracker没有启动，其他进程正常启动。&lt;/p&gt;

&lt;p&gt;结果：&lt;/p&gt;

&lt;p&gt;dellypc-master：secondarynamenode&lt;/p&gt;

&lt;p&gt;dellypc-1：tasktracker和datanode&lt;/p&gt;

&lt;p&gt;dellypc-2：tasktracker和datanode&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;测试2：&lt;/h4&gt;

&lt;p&gt;修改core-site.xml： &lt;value&gt;hdfs://dellypc-1:9000&lt;/value&gt;&lt;/p&gt;

&lt;p&gt;修改mapred-site.xml： &lt;value&gt;dellypc-1:9001&lt;/value&gt;&lt;/p&gt;

&lt;p&gt;然后，再dellypc-1上执行start-all.sh，&lt;/p&gt;

&lt;p&gt;结果：&lt;/p&gt;

&lt;p&gt;dellypc-master：secondarynamenode&lt;/p&gt;

&lt;p&gt;dellypc-1：tasktracker，datanode和jobtracker&lt;/p&gt;

&lt;p&gt;dellypc-2：tasktracker和datanode&lt;/p&gt;

&lt;p&gt;奇怪的是namenode没有启动起来！按照预期，namenode应该会在dellypc-1上启动的嘛。。。为什么？&lt;/p&gt;

&lt;p&gt;纠结了一会儿，大概想出来问题的关键了：因为在dellypc-1上没有格式化的hdfs文件系统，所以无法正常启动namenode。&lt;/p&gt;

&lt;p&gt;也许你会跟我一样想说格式化一下试试呗，于是我就做了。。。但是格式化的时候失败了，因为我在hdfs-site.xml这个文件里设置了两个namenode元数据存储的目录，但是dellypc-1上没有其中的一个目录。于是我想就改回去吧。配置改回去，结果发现，datanode启动不了了。。。。。所以说啊，这个hdfs应该是一种分布式系统，跟所有的节点可能都会有关联。。。&lt;/p&gt;

&lt;p&gt;最后又把dellypc-1和dellypc-2上的hadoop文件夹删掉，又重新从主节点拷贝了一份，这才恢复了正常。&lt;/p&gt;

&lt;p&gt;这些试验，足够解决我的疑问了。希望也同样能帮到有同样疑问的同学。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fix vulnerability: HTTP Server Prone To Slow Denial Of Service Attack</title>
   <link href="http://blog.dellyqiao.com/security/2014/03/11/fix-vulnerability-http-server-prone-to-slow-denial-of-service-attack"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/security/2014/03/11/fix-vulnerability-http-server-prone-to-slow-denial-of-service-attack</id>
   <content type="html">
&lt;h2 id=&quot;vulnerability-description&quot;&gt;Vulnerability description&lt;/h2&gt;

&lt;p&gt;A denial of service vulnerability is present in some HTTP servers.&lt;/p&gt;

&lt;h2 id=&quot;how-to-fix-this-apache-vulnerability&quot;&gt;How to fix this Apache vulnerability&lt;/h2&gt;

&lt;p&gt;1) Ensure your Apache is supports the reqtimeout module&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mod_reqtimeout Module is available in Apache 2.2.15 and later.&lt;/li&gt;
  &lt;li&gt;mod_reqtimeout module defaulted to disabled in version 2.3.14 and earlier.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;p&gt;2) Add Below entries into httpd.conf file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadModule reqtimeout_module /usr/lib64/apache2-prefork/mod_reqtimeout.so
&amp;lt;IfModule reqtimeout_module&amp;gt;
	RequestReadTimeout header=10-20,minrate=500
	RequestReadTimeout body=10,minrate=500
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://dellyqiao.qiniudn.com/2015/02/13/屏幕快照 2015-02-13 下午11.06.52.png/scale&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3) Restart Apache Service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>利用Apache服务器实现URL跳转</title>
   <link href="http://blog.dellyqiao.com/middleware/2014/03/11/apacheurl"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://blog.dellyqiao.com/middleware/2014/03/11/apacheurl</id>
   <content type="html">
&lt;p&gt;此文记录一下如何利用Apache服务器进行URL跳转。开发人员可能会说用JavaScript或者后台代码可以很容易实现，但是不管是什么样的代码，都需要首先载入页面，之后才能实现跳转功能，体验并不是很好，如果在Apache服务器上设置好的话，由于服务器的配置已经预先读取到内存里了，所以当请求到达Apache的时候直接就可以进行相应地跳转，迅速可靠。&lt;/p&gt;

&lt;p&gt;Apache的URL重定向是利用rewrite_module实现的，这个模块功能十分强大，作为一个实用主义者我只取需要用到的功能。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果想要做的跳转是跨服务器的跳转，那么Apache所在的服务器必须得能访问目标服务器。比如说Apache在服务器A上，要想把abc.com/abc重定向到www.baidu.com，那么从服务器A上至少得能访问到www.baidu.com，否则跳转是不会成功的。所以说如果服务器在DMZ里，四面都有防火墙，那就请参照本文最后面的配置方法。&lt;/p&gt;

&lt;p&gt;如何配置此模块：&lt;/p&gt;

&lt;p&gt;1）找到这个模块的配置，把前面的注释符号去掉。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadModule rewrite_module modules/mod_rewrite.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2）在&lt;code&gt;&amp;lt;virtualhost&amp;gt;&lt;/code&gt; 的配置中，添加如下配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteEngine On
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置完成。&lt;/p&gt;

&lt;p&gt;注意：RewriteEngine必须要在virtualhost里启用，否则不会生效。&lt;/p&gt;

&lt;p&gt;在这行配置下面就可以写跳转的规则了。下面是常见的几种情况：&lt;/p&gt;

&lt;h4 id=&quot;url&quot;&gt;1）单个指定URL的跳转。&lt;/h4&gt;

&lt;p&gt;比如要把/abc.html重定向到/def.html：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Redirect /abc.thml /def.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section&quot;&gt;2）有相同特征的域名的跳转。&lt;/h4&gt;

&lt;p&gt;比如说把所有/abc/之下的所有页面都重定向到/def/1.html：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteRule ^/abc/(.*)$ /def/1.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rewrite_module支持正则表达式，^表示URI的开头，.表示任意字符，*表示出现N次，$表示结尾。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;3）还有一种情况，域名更换，但是所有资源的位置没有改变。&lt;/h4&gt;

&lt;p&gt;比如，访问http://dellyserver/abc/abcd.html的时候跳转到http://abc.dellyserver/abcd.html，是要根据所请求的资源动态跳转，而不是跳到一个特定的页面。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteCond %{HTTP_HOST} ^dellyserver [NC]
##声明一下请求的URL的hostname是dellyserver

RewriteCond %{REQUEST_URI} ^/abc/
##声明一下请求的URI是/abc/xxxxxx

RewriteRule ^/abc/(.*) &amp;lt;http://abc.dellyserver/$1&amp;gt; [R=permanent,L]
##在以上两个条件都符合的时候，执行这个跳转，$1代表的是http://dellyserver/abc/后面的部分
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4） 最后一种情况，跨服务器跳转，并且源服务器无法访问目标服务器的情况。&lt;/p&gt;

&lt;p&gt;比如要想把dellyserver/abc/下所有的资源都重定向到www.baidu.com，我的dellyserver是在DMZ中，这台server无法访问百度的服务器。&lt;/p&gt;

&lt;p&gt;这种时候，根据我目前的知识，唯一能想到的办法应该是借助程序代码了。&lt;/p&gt;

&lt;p&gt;第一步，写一个html文件，就叫test.html吧，放到网站的根目录。test.html只是个空白网页，只需要在&amp;lt;head&amp;gt;标签里加上下面这行JS代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre&amp;gt;window.location.href=&quot;http://www.baidu.com”&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二步，在httpd.conf中添加配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteCond %{HTTP_HOST} ^dellyserver [NC]

RewriteRule ^/abc/(.*)$ /test.html [L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样所有到达http://dellyserver/abc/xxxx的资源都会被定向到test.html，当test.html下载到本地的时候，浏览器会执行html文件中的JS代码：&amp;lt;pre&amp;gt;window.location.href=”http://www.baidu.com”&amp;lt;/pre&amp;gt;，这样浏览器会自动给http://www.baidu.com发送请求并且获得响应，费了一番功夫但是也确实达到了重定向的效果。  &lt;/p&gt;

&lt;p&gt;就这些了，rewrite_module非常强大，有更多需求的同学可以继续深入研究下这个东西。希望我本文能起到抛砖引玉的作用吧。&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
